"""
This type stub file was generated by pyright.
"""

import tkinter as tk
import datetime
from tkinter import ttk

version = __version__ = "4.32.1 Released 17-Nov-2020"
__version__ = version.split()[0]
port = 'PySimpleGUI'
g_time_start = 0
g_time_end = 0
g_time_delta = 0
def TimerStart():
    """ Time your code easily.... start the timer. """
    ...

def TimerStop():
    """ Time your code easily.... stop the timer and print the number of ms since the timer start """
    ...

_timeit_counter = 0
MAX_TIMEIT_COUNT = 1000
_timeit_total = 0
DEFAULT_BASE64_ICON = b'R0lGODlhIQAgAPcAAAAAADBpmDBqmTFqmjJrmzJsnDNtnTRrmTZtmzZumzRtnTdunDRunTRunjVvnzdwnzhwnjlxnzVwoDZxoTdyojhzozl0ozh0pDp1pjp2pjp2pzx0oj12pD52pTt3qD54pjt4qDx4qDx5qTx5qj16qj57qz57rD58rT98rkB4pkJ7q0J9rEB9rkF+rkB+r0d9qkZ/rEl7o0h8p0x9pk5/p0l+qUB+sEyBrE2Crk2Er0KAsUKAskSCtEeEtUWEtkaGuEiHuEiHukiIu0qKu0mJvEmKvEqLvk2Nv1GErVGFr1SFrVGHslaHsFCItFSIs1COvlaPvFiJsVyRuWCNsWSPsWeQs2SQtGaRtW+Wt2qVuGmZv3GYuHSdv3ievXyfvV2XxGWZwmScx2mfyXafwHikyP7TPP/UO//UPP/UPf/UPv7UP//VQP/WQP/WQf/WQv/XQ//WRP7XSf/XSv/YRf/YRv/YR//YSP/YSf/YSv/ZS//aSv/aS/7YTv/aTP/aTf/bTv/bT//cT/7aUf/cUP/cUf/cUv/cU//dVP/dVf7dVv/eVv/eV//eWP/eWf/fWv/fW/7cX/7cYf7cZP7eZf7dav7eb//gW//gXP/gXf/gXv/gX//gYP/hYf/hYv/iYf/iYv7iZP7iZf/iZv/kZv7iaP/kaP/ka//ma//lbP/lbv/mbP/mbv7hdP7lcP/ncP/nc//ndv7gef7gev7iff7ke/7kfv7lf//ocf/ocv/odP/odv/peP/pe//ofIClw4Ory4GszoSszIqqxI+vyoSv0JGvx5OxyZSxyZSzzJi0y5m2zpC10pi715++16C6z6a/05/A2qHC3aXB2K3I3bLH2brP4P7jgv7jh/7mgf7lhP7mhf7liv/qgP7qh/7qiP7rjf7sjP7nkv7nlv7nmP7pkP7qkP7rkv7rlv7slP7sl/7qmv7rnv7snv7sn/7un/7sqv7vq/7vrf7wpv7wqf7wrv7wsv7wtv7ytv7zvP7zv8LU48LV5c3a5f70wP7z0AAAACH5BAEAAP8ALAAAAAAhACAAAAj/AP8JHEiwoMGDCA1uoYIF4bhK1vwlPOjlQICLApwVpFTGzBk1siYSrCLgoskFyQZKMsOypRyR/GKYnBkgQbF/s8603KnmWkIaNIMaw6lzZ8tYB2cIWMo0KIJj/7YV9XgGDRo14gpOIUBggNevXpkKGCDsXySradSoZcMmDsFnDxpEKEC3bl2uXCFQ+7emjV83bt7AgTNroJINAq0wWBxBgYHHdgt0+cdnMJw5c+jQqYNnoARkAx04kPEvS4PTqBswuPIPUp06duzcuYMHT55wAjkwEahsQgqBNSQIHy582D9BePTs2dOnjx8/f1gJ9GXhRpTqApFQoDChu3cOAps///9D/g+gQvYGjrlw4cU/fUnYX6hAn34HgZMABQo0iJB/Qoe8UxAXOQiEg3wIXvCBQLUU4mAhh0R4SCLqJOSEBhhqkAEGHIYgUDaGICIiIoossogj6yBUTQ4htNgiCCB4oIJAtJTIyI2MOOLIIxMtQQIJIwQZpAgwCKRNI43o6Igll1ySSTsI7dOECSaUYOWVKwhkiyVMYuJlJpp0IpA6oJRTkBQopHnCmmu2IBA2mmQi5yZ0fgJKPP+0IwoooZwzkDQ2uCCoCywUyoIW/5DDyaKefOLoJ6LU8w87pJgDTzqmDNSMDpzqYMOnn/7yTyiglBqKKKOMUopA7JgCy0DdeMEjUDM71GqrrcH8QwqqqpbiayqToqJKLwN5g45A0/TAw7LL2krGP634aoopp5yiiiqrZLuKK+jg444uBIHhw7g+MMsDFP/k4wq22rririu4xItLLriAUxAQ5ObrwzL/0PPKu7fIK3C8uxz0w8EIIwzMP/cM7HC88hxEzBBCBGGxxT8AwQzDujws7zcJQVMEEUKUbPITAt1D78OSivSFEUXEXATKA+HTscC80CPSQNGEccQRYhjUDzfxcjPPzkgnLVBAADs='
DEFAULT_BASE64_LOADING_GIF = b''
PSG_DEBUGGER_LOGO = b'R0lGODlhMgAtAPcAAAAAADD/2akK/4yz0pSxyZWyy5u3zZ24zpW30pG52J250J+60aC60KS90aDC3a3E163F2K3F2bPI2bvO3rzP3qvJ4LHN4rnR5P/zuf/zuv/0vP/0vsDS38XZ6cnb6f/xw//zwv/yxf/1w//zyP/1yf/2zP/3z//30wyAC0AAAj/AP8JHEiwoMGDCBMqXMiwoUOFAiJGXBigYoAPDxlK3CigwUGLIAOEyIiQI8cCBUOqJFnQpEkGA1XKZPlPgkuXBATK3JmRws2bB3TuXNmQw8+jQoeCbHj0qIGkSgNobNoUqlKIVJs++BfV4oiEWalaHVpyosCwJidw7Sr1YMQFBDn+y4qSbUW3AiDElXiWqoK1bPEKGLixr1jAXQ9GuGn4sN22Bl02roo4Kla+c8OOJbsQM9rNPJlORlr5asbPpTk/RP2YJGu7rjWnDm2RIQLZrSt3zgp6ZmqwmkHAng3ccWDEMe8Kpnw8JEHlkXnPdh6SxHPILaU/dp60LFUP07dfRq5aYntohAO0m+c+nvT6pVMPZ3jv8AJu8xktyNbw+ATJDtKFBx9NlA20gWU0DVQBYwZhsJMICRrkwEYJJGRCSBtEqGGCAQEAOw=='
DEFAULT_WINDOW_ICON = DEFAULT_BASE64_ICON
DEFAULT_ELEMENT_SIZE = (45, 1)
DEFAULT_BUTTON_ELEMENT_SIZE = (10, 1)
DEFAULT_MARGINS = (10, 5)
DEFAULT_ELEMENT_PADDING = (5, 3)
DEFAULT_AUTOSIZE_TEXT = True
DEFAULT_AUTOSIZE_BUTTONS = True
DEFAULT_FONT = ("Helvetica", 10)
DEFAULT_TEXT_JUSTIFICATION = 'left'
DEFAULT_BORDER_WIDTH = 1
DEFAULT_AUTOCLOSE_TIME = 3
DEFAULT_DEBUG_WINDOW_SIZE = (80, 20)
DEFAULT_WINDOW_LOCATION = (None, None)
MAX_SCROLLED_TEXT_BOX_HEIGHT = 50
DEFAULT_TOOLTIP_TIME = 400
DEFAULT_TOOLTIP_OFFSET = (0, - 20)
TOOLTIP_BACKGROUND_COLOR = "#ffffe0"
TOOLTIP_FONT = None
BLUES = ("#082567", "#0A37A3", "#00345B")
PURPLES = ("#480656", "#4F2398", "#380474")
GREENS = ("#01826B", "#40A860", "#96D2AB", "#00A949", "#003532")
YELLOWS = ("#F3FB62", "#F0F595")
TANS = ("#FFF9D5", "#F4EFCF", "#DDD8BA")
NICE_BUTTON_COLORS = ((GREENS[3], TANS[0]), ('#000000', '#FFFFFF'), ('#FFFFFF', '#000000'), (YELLOWS[0], PURPLES[1]), (YELLOWS[0], GREENS[3]), (YELLOWS[0], BLUES[2]))
COLOR_SYSTEM_DEFAULT = '1234567890'
DEFAULT_BUTTON_COLOR = ('white', BLUES[0])
OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR = ('white', BLUES[0])
OFFICIAL_PYSIMPLEGUI_THEME = CURRENT_LOOK_AND_FEEL = 'Dark Blue 3'
DEFAULT_ERROR_BUTTON_COLOR = ("#FFFFFF", "#FF0000")
DEFAULT_BACKGROUND_COLOR = None
DEFAULT_ELEMENT_BACKGROUND_COLOR = None
DEFAULT_ELEMENT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR = None
DEFAULT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_INPUT_ELEMENTS_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_INPUT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT
DEFAULT_SCROLLBAR_COLOR = None
RELIEF_RAISED = 'raised'
RELIEF_SUNKEN = 'sunken'
RELIEF_FLAT = 'flat'
RELIEF_RIDGE = 'ridge'
RELIEF_GROOVE = 'groove'
RELIEF_SOLID = 'solid'
THEME_DEFAULT = 'default'
THEME_WINNATIVE = 'winnative'
THEME_CLAM = 'clam'
THEME_ALT = 'alt'
THEME_CLASSIC = 'classic'
THEME_VISTA = 'vista'
THEME_XPNATIVE = 'xpnative'
THEME_LIST = ('default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative')
DEFAULT_TTK_THEME = THEME_DEFAULT
USE_TTK_BUTTONS = None
DEFAULT_PROGRESS_BAR_COLOR = (GREENS[0], '#D0D0D0')
DEFAULT_PROGRESS_BAR_COMPUTE = ('#000000', '#000000')
DEFAULT_PROGRESS_BAR_COLOR_OFFICIAL = (GREENS[0], '#D0D0D0')
DEFAULT_PROGRESS_BAR_SIZE = (20, 20)
DEFAULT_PROGRESS_BAR_BORDER_WIDTH = 1
DEFAULT_PROGRESS_BAR_RELIEF = RELIEF_GROOVE
PROGRESS_BAR_STYLES = ('default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative')
DEFAULT_PROGRESS_BAR_STYLE = DEFAULT_TTK_THEME
DEFAULT_METER_ORIENTATION = 'Horizontal'
DEFAULT_SLIDER_ORIENTATION = 'vertical'
DEFAULT_SLIDER_BORDER_WIDTH = 1
DEFAULT_SLIDER_RELIEF = tk.FLAT
DEFAULT_FRAME_RELIEF = tk.GROOVE
DEFAULT_LISTBOX_SELECT_MODE = tk.SINGLE
SELECT_MODE_MULTIPLE = tk.MULTIPLE
LISTBOX_SELECT_MODE_MULTIPLE = 'multiple'
SELECT_MODE_BROWSE = tk.BROWSE
LISTBOX_SELECT_MODE_BROWSE = 'browse'
SELECT_MODE_EXTENDED = tk.EXTENDED
LISTBOX_SELECT_MODE_EXTENDED = 'extended'
SELECT_MODE_SINGLE = tk.SINGLE
LISTBOX_SELECT_MODE_SINGLE = 'single'
TABLE_SELECT_MODE_NONE = tk.NONE
TABLE_SELECT_MODE_BROWSE = tk.BROWSE
TABLE_SELECT_MODE_EXTENDED = tk.EXTENDED
DEFAULT_TABLE_SELECT_MODE = TABLE_SELECT_MODE_EXTENDED
TITLE_LOCATION_TOP = tk.N
TITLE_LOCATION_BOTTOM = tk.S
TITLE_LOCATION_LEFT = tk.W
TITLE_LOCATION_RIGHT = tk.E
TITLE_LOCATION_TOP_LEFT = tk.NW
TITLE_LOCATION_TOP_RIGHT = tk.NE
TITLE_LOCATION_BOTTOM_LEFT = tk.SW
TITLE_LOCATION_BOTTOM_RIGHT = tk.SE
TEXT_LOCATION_TOP = tk.N
TEXT_LOCATION_BOTTOM = tk.S
TEXT_LOCATION_LEFT = tk.W
TEXT_LOCATION_RIGHT = tk.E
TEXT_LOCATION_TOP_LEFT = tk.NW
TEXT_LOCATION_TOP_RIGHT = tk.NE
TEXT_LOCATION_BOTTOM_LEFT = tk.SW
TEXT_LOCATION_BOTTOM_RIGHT = tk.SE
TEXT_LOCATION_CENTER = tk.CENTER
ThisRow = 555666777
MESSAGE_BOX_LINE_WIDTH = 60
EVENT_TIMEOUT = TIMEOUT_EVENT = TIMEOUT_KEY = '__TIMEOUT__'
WIN_CLOSED = WINDOW_CLOSED = None
WRITE_ONLY_KEY = '__WRITE ONLY__'
MENU_DISABLED_CHARACTER = '!'
MENU_KEY_SEPARATOR = '::'
ENABLE_TK_WINDOWS = False
SUPPRESS_ERROR_POPUPS = False
SUPPRESS_RAISE_KEY_ERRORS = False
SUPPRESS_KEY_GUESSING = False
ENABLE_TREEVIEW_869_PATCH = True
ENABLE_MAC_NOTITLEBAR_PATCH = False
OLD_TABLE_TREE_SELECTED_ROW_COLORS = ('#FFFFFF', '#4A6984')
ALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS = ('SystemHighlightText', 'SystemHighlight')
SYMBOL_SQUARE = '█'
SYMBOL_CIRCLE = '⚫'
SYMBOL_CIRCLE_OUTLINE = '◯'
SYMBOL_UP = '▲'
SYMBOL_RIGHT = '►'
SYMBOL_LEFT = '◄'
SYMBOL_DOWN = '▼'
SYMBOL_X = '❎'
def RGB(red, green, blue):
    """
    Given integer values of Red, Green, Blue, return a color string "#RRGGBB"
    :param red:  Red portion from 0 to 255
    :type red: (int)
    :param green:  Green portion from 0 to 255
    :type green: (int)
    :param blue:  Blue portion from 0 to 255
    :type  blue: (int)
    :return:  A single RGB String in the format "#RRGGBB" where each pair is a hex number.
    :rtype: (str)
    """
    ...

BUTTON_TYPE_BROWSE_FOLDER = 1
BUTTON_TYPE_BROWSE_FILE = 2
BUTTON_TYPE_BROWSE_FILES = 21
BUTTON_TYPE_SAVEAS_FILE = 3
BUTTON_TYPE_CLOSES_WIN = 5
BUTTON_TYPE_CLOSES_WIN_ONLY = 6
BUTTON_TYPE_READ_FORM = 7
BUTTON_TYPE_REALTIME = 9
BUTTON_TYPE_CALENDAR_CHOOSER = 30
BUTTON_TYPE_COLOR_CHOOSER = 40
BUTTON_TYPE_SHOW_DEBUGGER = 50
BROWSE_FILES_DELIMITER = ';'
ELEM_TYPE_TEXT = 'text'
ELEM_TYPE_INPUT_TEXT = 'input'
ELEM_TYPE_INPUT_COMBO = 'combo'
ELEM_TYPE_INPUT_OPTION_MENU = 'option menu'
ELEM_TYPE_INPUT_RADIO = 'radio'
ELEM_TYPE_INPUT_MULTILINE = 'multiline'
ELEM_TYPE_INPUT_CHECKBOX = 'checkbox'
ELEM_TYPE_INPUT_SPIN = 'spind'
ELEM_TYPE_BUTTON = 'button'
ELEM_TYPE_IMAGE = 'image'
ELEM_TYPE_CANVAS = 'canvas'
ELEM_TYPE_FRAME = 'frame'
ELEM_TYPE_GRAPH = 'graph'
ELEM_TYPE_TAB = 'tab'
ELEM_TYPE_TAB_GROUP = 'tabgroup'
ELEM_TYPE_INPUT_SLIDER = 'slider'
ELEM_TYPE_INPUT_LISTBOX = 'listbox'
ELEM_TYPE_OUTPUT = 'output'
ELEM_TYPE_COLUMN = 'column'
ELEM_TYPE_MENUBAR = 'menubar'
ELEM_TYPE_PROGRESS_BAR = 'progressbar'
ELEM_TYPE_BLANK = 'blank'
ELEM_TYPE_TABLE = 'table'
ELEM_TYPE_TREE = 'tree'
ELEM_TYPE_ERROR = 'error'
ELEM_TYPE_SEPARATOR = 'separator'
ELEM_TYPE_STATUSBAR = 'statusbar'
ELEM_TYPE_PANE = 'pane'
ELEM_TYPE_BUTTONMENU = 'buttonmenu'
POPUP_BUTTONS_YES_NO = 1
POPUP_BUTTONS_CANCELLED = 2
POPUP_BUTTONS_ERROR = 3
POPUP_BUTTONS_OK_CANCEL = 4
POPUP_BUTTONS_OK = 0
POPUP_BUTTONS_NO_BUTTONS = 5
class ToolTip:
    """
    Create a tooltip for a given widget
    (inspired by https://stackoverflow.com/a/36221216)
    This is an INTERNALLY USED only class.  Users should not refer to this class at all.
    """
    def __init__(self, widget, text, timeout=...) -> None:
        """
        :param widget: The tkinter widget
        :type widget: widget type varies
        :param text: text for the tooltip. It can inslude \n
        :type text: (str)
        :param timeout: Time in milliseconds that mouse must remain still before tip is shown
        :type timeout: (int)
        """
        ...
    
    def enter(self, event=...):
        """
        Called by tkinter when mouse enters a widget
        :param event:  from tkinter.  Has x,y coordinates of mouse

        """
        ...
    
    def leave(self, event=...):
        """
        Called by tktiner when mouse exits a widget
        :param event:  from tkinter.  Event info that's not used by function.

        """
        ...
    
    def schedule(self):
        """
        Schedule a timer to time how long mouse is hovering
        """
        ...
    
    def unschedule(self):
        """
        Cancel timer used to time mouse hover
        """
        ...
    
    def showtip(self):
        """
        Creates a topoltip window with the tooltip text inside of it
        """
        ...
    
    def hidetip(self):
        """
        Destroy the tooltip window
        """
        ...
    


class Element:
    """ The base class for all Elements. Holds the basic description of an Element like size and colors """
    def __init__(self, type, size=..., auto_size_text=..., font=..., background_color=..., text_color=..., key=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        Element base class. Only used internally.  User will not create an Element object by itself

        :param type: The type of element. These constants all start with "ELEM_TYPE_"
        :type type: (int) (could be enum)
        :param size: w=characters-wide, h=rows-high
        :type size: (int, int)  (width, height)
        :param auto_size_text: True if the Widget should be shrunk to exactly fit the number of chars to show
        :type auto_size_text: bool
        :param font: specifies the font family, size, etc (see docs for exact formats)
        :type font: Union[str, Tuple[str, int]]
        :param background_color: color of background. Can be in #RRGGBB format or a color name "black"
        :type background_color: (str)
        :param text_color: element's text color. Can be in #RRGGBB format or a color name "black"
        :type text_color: (str)
        :param key: Identifies an Element. Should be UNIQUE to this window.
        :type key: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element (Default = True)
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def bind(self, bind_string, key_modifier):
        """
        Used to add tkinter events to an Element.
        The tkinter specific data is in the Element's member variable user_bind_event
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string: (str)
        :param key_modifier: Additional data to be added to the element's key when event is returned
        :type key_modifier: (str)
        """
        ...
    
    def unbind(self, bind_string):
        """
        Removes a previously bound tkinter event from an Element.
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string: (str)
        """
        ...
    
    def SetTooltip(self, tooltip_text):
        """
        Called by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').

        :param tooltip_text: the text to show in tooltip.
        :type tooltip_text: (str)
        """
        ...
    
    def SetFocus(self, force=...):
        """
        Sets the current focus to be on this element

        :param force: if True will call focus_force otherwise calls focus_set
        :type force: bool
        """
        ...
    
    def set_size(self, size=...):
        """
        Changes the size of an element to a specific size.
        It's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.

        :param size: The size in characters, rows typically. In some cases they are pixels
        :type size: (int, int)
        """
        ...
    
    def get_size(self):
        """
        Return the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.
        :return: width and height of the element
        :rtype: Tuple[int, int]
        """
        ...
    
    def hide_row(self):
        """
        Hide the entire row an Element is located on.
        Use this if you must have all space removed when you are hiding an element, including the row container
        """
        ...
    
    def unhide_row(self):
        """
        Unhides (makes visible again) the row container that the Element is located on.
        Note that it will re-appear at the bottom of the window / container, most likely.
        """
        ...
    
    def expand(self, expand_x=..., expand_y=..., expand_row=...):
        """
        Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions

        :param expand_x: If True Element will expand in the Horizontal directions
        :type expand_x: (bool)
        :param expand_y: If True Element will expand in the Vertical directions
        :type expand_y: (bool)
        :param expand_row: If True the row containing the element will also expand. Without this your element is "trapped" within the row
        :type expand_row: (bool)
        """
        ...
    
    def set_cursor(self, cursor):
        """
        Sets the cursor for the current Element.
        :param cursor: The tkinter cursor name
        :type cursor: (str)
        """
        ...
    
    def set_vscroll_position(self, percent_from_top):
        """
        Attempts to set the vertical scroll postition for an element's Widget
        :param percent_from_top: From 0 to 1.0, the percentage from the top to move scrollbar to
        :type percent_from_top: (float)
        """
        ...
    
    def __call__(self, *args, **kwargs):
        """
        Makes it possible to "call" an already existing element.  When you do make the "call", it actually calls
        the Update method for the element.
        Example:    If this text element was in yoiur layout:
                    sg.Text('foo', key='T')
                    Then you can call the Update method for that element by writing:
                    window.FindElement('T')('new text value')
        """
        ...
    
    set_tooltip = ...
    set_focus = ...


class InputText(Element):
    """
    Display a single text input field.  Based on the tkinter Widget `Entry`
    """
    def __init__(self, default_text=..., size=..., disabled=..., password_char=..., justification=..., background_color=..., text_color=..., font=..., tooltip=..., border_width=..., change_submits=..., enable_events=..., do_not_clear=..., key=..., k=..., focus=..., pad=..., use_readonly_for_disable=..., readonly=..., disabled_readonly_background_color=..., disabled_readonly_text_color=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param default_text: Text initially shown in the input box as a default value(Default value = ''). Will automatically be converted to string
        :type default_text: (Any)
        :param size: w=characters-wide, h=rows-high
        :type size: (int, int)  (width, height)
        :param disabled: set disable state for element (Default = False)
        :type disabled: (bool)
        :param password_char: Password character if this is a password field (Default value = '')
        :type password_char: (char)
        :param justification: justification for data display. Valid choices - left, right, center
        :type justification: (str)
        :param background_color: color of background in one of the color formats
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param change_submits: * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits: (bool)
        :param enable_events: If True then changes to this element are immediately reported as an event. Use this instead of change_submits (Default = False)
        :type enable_events: (bool)
        :param do_not_clear: If False then the field will be set to blank after ANY event (button, any event) (Default = True)
        :type do_not_clear: (bool)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param focus: Determines if initial focus should go to this element.
        :type focus: (bool)
        :param pad: Amount of padding to put around element. Normally (horizontal pixels, vertical pixels) but can be split apart further into ((horizontal left, horizontal right), (vertical above, vertical below))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param use_readonly_for_disable: If True (the default) tkinter state set to 'readonly'. Otherwise state set to 'disabled'
        :type use_readonly_for_disable: (bool)
        :param readonly: If True tkinter state set to 'readonly'.  Use this in place of use_readonly_for_disable as another way of achieving readonly.  Note cannot set BOTH readonly and disabled as tkinter only supplies a single flag
        :type readonly: (bool)
        :param disabled_readonly_background_color: If state is set to readonly or disabled, the color to use for the background
        :type disabled_readonly_background_color: (str)
        :param disabled_readonly_text_color: If state is set to readonly or disabled, the color to use for the text
        :type disabled_readonly_text_color: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element (Default = True)
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., disabled=..., select=..., visible=..., text_color=..., background_color=..., move_cursor_to=...):
        """
        Changes some of the settings for the Input Element. Must call `Window.Read` or `Window.Finalize` prior

        :param value: new text to display as default text in Input field
        :type value: (str)
        :param disabled: disable or enable state of the element (sets Entry Widget to readonly or normal)
        :type disabled: (bool)
        :param select: if True, then the text will be selected
        :type select: (bool)
        :param visible: change visibility of element
        :type visible: (bool)
        :param text_color: change color of text being typed
        :type text_color: (str)
        :param background_color: change color of the background
        :type background_color: (str)
        :param move_cursor_to: Moves the cursor to a particular offset. Defaults to 'end'
        :type move_cursor_to: Union[int, str]
        """
        ...
    
    def Get(self):
        """
        Read and return the current value of the input element. Must call `Window.Read` or `Window.Finalize` prior

        :return: current value of Input field or '' if error encountered
        :rtype: (str)
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


In = InputText
Input = InputText
I = InputText
class Combo(Element):
    """
    ComboBox Element - A combination of a single-line input and a drop-down menu. User can type in their own value or choose from list.
    """
    def __init__(self, values, default_value=..., size=..., auto_size_text=..., background_color=..., text_color=..., change_submits=..., enable_events=..., disabled=..., key=..., k=..., pad=..., tooltip=..., readonly=..., font=..., visible=..., metadata=...) -> None:
        """
        :param values: values to choose. While displayed as text, the items returned are what the caller supplied, not text
        :type values: List[Any] or Tuple[Any]
        :param default_value: Choice to be displayed as initial value. Must match one of values variable contents
        :type default_value: (Any)
        :param size: width = characters-wide, height = rows-high
        :type size: (int, int) (width, height)
        :param auto_size_text: True if element should be the same size as the contents
        :type auto_size_text: (bool)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param change_submits: DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Combo event is when a choice is made
        :type enable_events: (bool)
        :param disabled: set disable state for element
        :type disabled: (bool)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text that will appear when mouse hovers over this element
        :type tooltip: (str)
        :param readonly: make element readonly (user can't change). True means user cannot change
        :type readonly: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., values=..., set_to_index=..., disabled=..., readonly=..., font=..., visible=...):
        """
        Changes some of the settings for the Combo Element. Must call `Window.Read` or `Window.Finalize` prior.
        Note that the state can be in 3 states only.... enabled, disabled, readonly even
        though more combinations are available. The easy way to remember is that if you
        change the readonly parameter then you are enabling the element.
        :param value: change which value is current selected based on new list of previous list of choices
        :type value: (Any)
        :param values: change list of choices
        :type values: List[Any]
        :param set_to_index: change selection to a particular choice starting with index = 0
        :type set_to_index: (int)
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param readonly: if True make element readonly (user cannot change any choices). Enables the element if either choice are made.
        :type readonly: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Get(self):
        """
        Returns the current (right now) value of the Combo.  DO NOT USE THIS AS THE NORMAL WAY OF READING A COMBO!
        You should be using values from your call to window.Read instead.  Know what you're doing if you use it.

        :return: Returns the value of what is currently chosen
        :rtype: Union[Any, None]
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


InputCombo = Combo
DropDown = InputCombo
Drop = InputCombo
DD = Combo
class OptionMenu(Element):
    """
    Option Menu is an Element available ONLY on the tkinter port of PySimpleGUI.  It's is a widget that is unique
    to tkinter.  However, it looks much like a ComboBox.  Instead of an arrow to click to pull down the list of
    choices, another little graphic is shown on the widget to indicate where you click.  After clicking to activate,
    it looks like a Combo Box that you scroll to select a choice.
    """
    def __init__(self, values, default_value=..., size=..., disabled=..., auto_size_text=..., background_color=..., text_color=..., key=..., k=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param values: Values to be displayed
        :type values: List[Any] or Tuple[Any]
        :param default_value: the value to choose by default
        :type default_value: (Any)
        :param size: size in characters (wide) and rows (high)
        :type size: (int, int) (width, height)
        :param disabled: control enabled / disabled
        :type disabled: (bool)
        :param auto_size_text: True if size of Element should match the contents of the items
        :type auto_size_text: (bool)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text that will appear when mouse hovers over this element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., values=..., disabled=..., visible=...):
        """
        Changes some of the settings for the OptionMenu Element. Must call `Window.Read` or `Window.Finalize` prior
        :param value: the value to choose by default
        :type value: (Any)
        :param values: Values to be displayed
        :type values: List[Any]
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


InputOptionMenu = OptionMenu
class Listbox(Element):
    """
    A List Box.  Provide a list of values for the user to choose one or more of.   Returns a list of selected rows
    when a window.Read() is executed.
    """
    def __init__(self, values, default_values=..., select_mode=..., change_submits=..., enable_events=..., bind_return_key=..., size=..., disabled=..., auto_size_text=..., font=..., no_scrollbar=..., background_color=..., text_color=..., key=..., k=..., pad=..., tooltip=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param values: list of values to display. Can be any type including mixed types as long as they have __str__ method
        :type values: List[Any] or Tuple[Any]
        :param default_values: which values should be initially selected
        :type default_values: List[Any]
        :param select_mode: Select modes are used to determine if only 1 item can be selected or multiple and how they can be selected.   Valid choices begin with "LISTBOX_SELECT_MODE_" and include: LISTBOX_SELECT_MODE_SINGLE LISTBOX_SELECT_MODE_MULTIPLE LISTBOX_SELECT_MODE_BROWSE LISTBOX_SELECT_MODE_EXTENDED
        :type select_mode: [enum]
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Listbox generates events when an item is clicked
        :type enable_events: (bool)
        :param bind_return_key: If True, then the return key will cause a the Listbox to generate an event
        :type bind_return_key: (bool)
        :param size: width = characters-wide, height = rows-high
        :type size: Tuple(int, int) (width, height)
        :param disabled: set disable state for element
        :type disabled: (bool)
        :param auto_size_text: True if element should be the same size as the contents
        :type auto_size_text: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param font: specifies the font family, size, etc
        :param no_scrollbar: ???
        :type no_scrollbar: ??? (bool)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, values=..., disabled=..., set_to_index=..., scroll_to_index=..., select_mode=..., visible=...):
        """
        Changes some of the settings for the Listbox Element. Must call `Window.Read` or `Window.Finalize` prior
        :param values: new list of choices to be shown to user
        :type values: List[Any]
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param set_to_index: highlights the item(s) indicated. If parm is an int one entry will be set. If is a list, then each entry in list is highlighted
        :type set_to_index: Union[int, list, tuple]
        :param scroll_to_index: scroll the listbox so that this index is the first shown
        :type scroll_to_index: (int)
        :param mode: changes the select mode according to tkinter's listbox widget
        :type mode: (str)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def SetValue(self, values):
        """
        Set listbox highlighted choices

        :param values: new values to choose based on previously set values
        :type values: List[Any]

        """
        ...
    
    def GetListValues(self: Listbox) -> List[Any]:
        """
        Returns list of Values provided by the user in the user's format

        :return: List of values. Can be any / mixed types -> []
        :rtype: List[Any]
        """
        ...
    
    def GetIndexes(self):
        """
        Returns the items currently selected as a list of indexes

        :return: A list of offsets into values that is currently selected
        :rtype: List[int]
        """
        ...
    
    def get(self):
        """
        Returns the list of items currently selected in this listbox.  It should be identical
        to the value you would receive when performing a window.read() call.

        :return: The list of currently selected items. The actual items are returned, not the indexes
        :rtype: List[Any]
        """
        ...
    
    get_indexes = ...
    get_list_values = ...
    set_focus = ...
    set_tooltip = ...
    set_value = ...
    update = ...


LBox = Listbox
LB = Listbox
class Radio(Element):
    """
    Radio Button Element - Used in a group of other Radio Elements to provide user with ability to select only
    1 choice in a list of choices.
    """
    def __init__(self, text, group_id, default=..., disabled=..., size=..., auto_size_text=..., background_color=..., text_color=..., font=..., key=..., k=..., pad=..., tooltip=..., change_submits=..., enable_events=..., visible=..., metadata=...) -> None:
        """
        :param text: Text to display next to button
        :type text: (str)
        :param group_id: Groups together multiple Radio Buttons. Any type works
        :type group_id: (Any)
        :param default: Set to True for the one element of the group you want initially selected
        :type default: (bool)
        :param disabled: set disable state
        :type disabled: (bool)
        :param size: (width, height) width = characters-wide, height = rows-high
        :type size: (int, int)
        :param auto_size_text: if True will size the element to match the length of the text
        :type auto_size_text: (bool)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Radio Button events happen when an item is selected
        :type enable_events: (bool)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., text=..., background_color=..., text_color=..., disabled=..., visible=...):
        """
        Changes some of the settings for the Radio Button Element. Must call `Window.Read` or `Window.Finalize` prior
        :param value: if True change to selected and set others in group to unselected
        :type value: (bool)
        :param text: Text to display next to radio button
        :type text: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text. Note this also changes the color of the selection dot
        :type text_color: (str)
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def ResetGroup(self):
        """
        Sets all Radio Buttons in the group to not selected
        """
        ...
    
    def Get(self: Radio) -> bool:
        """
        A snapshot of the value of Radio Button -> (bool)

        :return: True if this radio button is selected
        :rtype: (bool)
        """
        ...
    
    get = ...
    reset_group = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


R = Radio
Rad = Radio
class Checkbox(Element):
    """
    Checkbox Element - Displays a checkbox and text next to it
    """
    def __init__(self, text, default=..., size=..., auto_size_text=..., font=..., background_color=..., text_color=..., change_submits=..., enable_events=..., disabled=..., key=..., k=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param text: Text to display next to checkbox
        :type text: (str)
        :param default: Set to True if you want this checkbox initially checked
        :type default: (bool)
        :param size: (width, height) width = characters-wide, height = rows-high
        :type size: (int, int)
        :param auto_size_text: if True will size the element to match the length of the text
        :type auto_size_text: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Checkbox events happen when an item changes
        :type enable_events: (bool)
        :param disabled: set disable state
        :type disabled: (bool)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Get(self: Checkbox) -> bool:
        """
        Return the current state of this checkbox

        :return: Current state of checkbox
        :rtype: (bool)
        """
        ...
    
    def Update(self, value=..., text=..., background_color=..., text_color=..., disabled=..., visible=...):
        """
        Changes some of the settings for the Checkbox Element. Must call `Window.Read` or `Window.Finalize` prior.
        Note that changing visibility may cause element to change locations when made visible after invisible
        :param value: if True checks the checkbox, False clears it
        :type value: (bool)
        :param text: Text to display next to checkbox
        :type text: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text. Note this also changes the color of the checkmark
        :type text_color: (str)
        :param disabled: disable or enable element
        :type disabled: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


CB = Checkbox
CBox = Checkbox
Check = Checkbox
class Spin(Element):
    """
    A spinner with up/down buttons and a single line of text. Choose 1 values from list
    """
    def __init__(self, values, initial_value=..., disabled=..., change_submits=..., enable_events=..., readonly=..., size=..., auto_size_text=..., font=..., background_color=..., text_color=..., key=..., k=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param values: List of valid values
        :type values: Tuple[Any] or List[Any]
        :param initial_value: Initial item to show in window. Choose from list of values supplied
        :type initial_value: (Any)
        :param disabled: set disable state
        :type disabled: (bool)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Spin events happen when an item changes
        :type enable_events: (bool)
        :param readonly: Turns on the element specific events. Spin events happen when an item changes
        :type readonly: (bool)
        :param size: (width, height) width = characters-wide, height = rows-high
        :type size: (int, int)
        :param auto_size_text: if True will size the element to match the length of the text
        :type auto_size_text: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., values=..., disabled=..., readonly=..., visible=...):
        """
        Changes some of the settings for the Spin Element. Must call `Window.Read` or `Window.Finalize` prior
        Note that the state can be in 3 states only.... enabled, disabled, readonly even
        though more combinations are available. The easy way to remember is that if you
        change the readonly parameter then you are enabling the element.
        :param value: set the current value from list of choices
        :type value: (Any)
        :param values: set available choices
        :type values: List[Any]
        :param disabled: disable. Note disabled and readonly cannot be mixed. It must be one OR the other
        :type disabled: (bool)
        :param readonly: make element readonly.  Note disabled and readonly cannot be mixed. It must be one OR the other
        :type readonly: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Get(self):
        """
        Return the current chosen value showing in spinbox.
        This value will be the same as what was provided as list of choices.  If list items are ints, then the
        item returned will be an int (not a string)

        :return: The currently visible entry
        :rtype: (Any)
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


class Multiline(Element):
    """
    Multiline Element - Display and/or read multiple lines of text.  This is both an input and output element.
    Other PySimpleGUI ports have a separate MultilineInput and MultilineOutput elements.  May want to split this
    one up in the future too.
    """
    def __init__(self, default_text=..., enter_submits=..., disabled=..., autoscroll=..., border_width=..., size=..., auto_size_text=..., background_color=..., text_color=..., change_submits=..., enable_events=..., do_not_clear=..., key=..., k=..., write_only=..., auto_refresh=..., reroute_stdout=..., reroute_stderr=..., reroute_cprint=..., echo_stdout_stderr=..., focus=..., font=..., pad=..., tooltip=..., justification=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param default_text: Initial text to show
        :type default_text: (str)
        :param enter_submits: if True, the Window.Read call will return is enter key is pressed in this element
        :type enter_submits: (bool)
        :param disabled: set disable state
        :type disabled: (bool)
        :param autoscroll: If True the contents of the element will automatically scroll as more data added to the end
        :type autoscroll: (bool)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param size: (width, height) width = characters-wide, height = rows-high
        :type size: (int, int)
        :param auto_size_text: if True will size the element to match the length of the text
        :type auto_size_text: (bool)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Spin events happen when an item changes
        :type enable_events: (bool)
        :param do_not_clear: if False the element will be cleared any time the Window.Read call returns
        :type do_not_clear: (bool)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param write_only: If True then no entry will be added to the values dictionary when the window is read
        :type write_only: bool
        :param auto_refresh: If True then anytime the element is updated, the window will be refreshed so that the change is immediately displayed
        :type auto_refresh: (bool)
        :param reroute_stdout: If True then all output to stdout will be output to this element
        :type reroute_stdout: (bool)
        :param reroute_stderr: If True then all output to stderr will be output to this element
        :type reroute_stderr: (bool)
        :param reroute_cprint: If True your cprint calls will output to this element. It's the same as you calling cprint_set_output_destination
        :type reroute_cprint: (bool)
        :param echo_stdout_stderr: If True then output to stdout and stderr will be output to this element AND also to the normal console location
        :type echo_stdout_stderr: (bool)
        :param focus: if True initial focus will go to this element
        :type focus: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param justification: text justification. left, right, center. Can use single characters l, r, c.
        :type justification: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., disabled=..., append=..., font=..., text_color=..., background_color=..., text_color_for_value=..., background_color_for_value=..., visible=..., autoscroll=..., justification=...):
        """
        Changes some of the settings for the Multiline Element. Must call `Window.Read` or `Window.Finalize` prior
        :param value: new text to display
        :type value: (str)
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param append: if True then new value will be added onto the end of the current value. if False then contents will be replaced.
        :type append: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param text_color: color of the text
        :type text_color: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color_for_value: color of the new text being added (the value paramter)
        :type text_color_for_value: (str)
        :param background_color_for_value: color of the new background of the text being added (the value paramter)
        :type background_color_for_value: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param autoscroll: if True then contents of element are scrolled down when new text is added to the end
        :type autoscroll: (bool)
        :param justification: text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
        :type justification: (str)
        """
        ...
    
    def Get(self):
        """
        Return current contents of the Multiline Element

        :return: current contents of the Multiline Element (used as an input type of Multiline
        :rtype: (str)
        """
        ...
    
    def print(self, *args, end=..., sep=..., text_color=..., background_color=..., justification=...):
        """
        Print like Python normally prints except route the output to a multline element and also add colors if desired

        :param args: The arguments to print
        :type args: (Any)
        :param end: The end char to use just like print uses
        :type end: (str)
        :param sep: The separation character like print uses
        :type sep: (str)
        :param text_color: The color of the text
        :type text_color: (str)
        :param background_color: The background color of the line
        :type background_color: (str)
        :param justification: text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
        :type justification: (str)
        """
        ...
    
    def reroute_stdout_to_here(self):
        """
        Sends stdout (prints) to this element
        """
        ...
    
    def reroute_stderr_to_here(self):
        """
        Sends stderr to this element
        """
        ...
    
    def restore_stdout(self):
        """
        Restore a previously re-reouted stdout back to the original destination
        """
        ...
    
    def restore_stderr(self):
        """
        Restore a previously re-reouted stderr back to the original destination
        """
        ...
    
    def write(self, txt):
        """
        Called by Python (not tkinter?) when stdout or stderr wants to write

        :param txt: text of output
        :type txt: (str)
        """
        ...
    
    def flush(self):
        """
        Flush parameter was passed into a print statement.
        For now doing nothing.  Not sure what action should be taken to ensure a flush happens regardless.
        """
        ...
    
    def __del__(self):
        """
        If this Widget is deleted, be sure and restore the old stdout, stderr
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


ML = Multiline
MLine = Multiline
class Text(Element):
    """
    Text - Display some text in the window.  Usually this means a single line of text.  However, the text can also be multiple lines.  If multi-lined there are no scroll bars.
    """
    def __init__(self, text=..., size=..., auto_size_text=..., click_submits=..., enable_events=..., relief=..., font=..., text_color=..., background_color=..., border_width=..., justification=..., pad=..., key=..., k=..., right_click_menu=..., grab=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param text: The text to display. Can include /n to achieve multiple lines.  Will convert (optional) parameter into a string
        :type text: Any
        :param size: (width, height) width = characters-wide, height = rows-high
        :type size: (int, int)
        :param auto_size_text: if True size of the Text Element will be sized to fit the string provided in 'text' parm
        :type auto_size_text: (bool)
        :param click_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type click_submits: (bool)
        :param enable_events: Turns on the element specific events. Text events happen when the text is clicked
        :type enable_events: (bool)
        :param relief: relief style around the text. Values are same as progress meter relief values. Should be a constant that is defined at starting with "RELIEF_" - `RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID`
        :type relief: (str/enum)
        :param font: specifies the font family, size, etc
        :type font: (str or Tuple[str, int] or None)
        :param text_color: color of the text
        :type text_color: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param border_width: number of pixels for the border (if using a relief)
        :type border_width: (int)
        :param justification: how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`
        :type justification: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param grab: If True can grab this element and move the window around. Default is False
        :type grab: (bool)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., background_color=..., text_color=..., font=..., visible=...):
        """
        Changes some of the settings for the Text Element. Must call `Window.Read` or `Window.Finalize` prior
        :param value: new text to show
        :type value: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        """
        ...
    
    def Get(self):
        """
        Gets the current value of the displayed text

        :return: The current value
        :rtype: (str)
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


Txt: Text = Text
T: Text = Text
class StatusBar(Element):
    """
    A StatusBar Element creates the sunken text-filled strip at the bottom. Many Windows programs have this line
    """
    def __init__(self, text, size=..., auto_size_text=..., click_submits=..., enable_events=..., relief=..., font=..., text_color=..., background_color=..., justification=..., pad=..., key=..., k=..., right_click_menu=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param text: Text that is to be displayed in the widget
        :type text: (str)
        :param size: (w,h) w=characters-wide, h=rows-high
        :type size: Tuple[(int), (int)]
        :param auto_size_text: True if size should fit the text length
        :type auto_size_text: (bool)
        :param click_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type click_submits: (bool)
        :param enable_events: Turns on the element specific events. StatusBar events occur when the bar is clicked
        :type enable_events: (bool)
        :param relief: relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID`
        :type relief: (enum)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param text_color: color of the text
        :type text_color: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param justification: how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`
        :type justification: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., background_color=..., text_color=..., font=..., visible=...):
        """
        Changes some of the settings for the Status Bar Element. Must call `Window.Read` or `Window.Finalize` prior
        :param value: new text to show
        :type value: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


class TKProgressBar:
    uniqueness_counter = ...
    def __init__(self, root, max, length=..., width=..., style=..., relief=..., border_width=..., orientation=..., BarColor=..., key=...) -> None:
        """
        :param root: The root window bar is to be shown in
        :type root: Union[tk.Tk, tk.TopLevel]
        :param max: Maximum value the bar will be measuring
        :type max: (int)
        :param length: length in pixels of the bar
        :type length: (int)
        :param width: width in pixels of the bar
        :type width: (int)
        :param style: Progress bar style defined as one of these 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
        :type style: (str)
        :param relief: relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID` (Default value = DEFAULT_PROGRESS_BAR_RELIEF)
        :type relief: (str)
        :param border_width: The amount of pixels that go around the outside of the bar
        :type border_width: (int)
        :param orientation: 'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical')
        :type orientation: (str)
        :param BarColor: The 2 colors that make up a progress bar. One is the background, the other is the bar
        :type BarColor: Tuple[str, str]
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        """
        ...
    
    def Update(self, count=..., max=...):
        """
        Update the current value of the bar and/or update the maximum value the bar can reach
        :param count: current value
        :type count: (int)
        :param max: the maximum value
        :type max: (int)
        """
        ...
    


class TKOutput(tk.Frame):
    """
    tkinter style class. Inherits Frame class from tkinter. Adds a tk.Text and a scrollbar together.
    Note - This is NOT a user controlled class. Users should NOT be directly using it unless making an extention
    to PySimpleGUI by directly manipulating tkinter.
    """
    def __init__(self, parent, width, height, bd, background_color=..., text_color=..., echo_stdout_stderr=..., font=..., pad=...) -> None:
        """
        :param parent: The "Root" that the Widget will be in
        :type parent: Union[tk.Tk, tk.Toplevel]
        :param width: Width in characters
        :type width: (int)
        :param height: height in rows
        :type height: (int)
        :param bd: Border Depth.  How many pixels of border to show
        :type bd: (int)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param echo_stdout_stderr: If True then output to stdout will be output to this element AND also to the normal console location
        :type echo_stdout_stderr: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        """
        ...
    
    def write(self, txt):
        """
        Called by Python (not tkinter?) when stdout or stderr wants to write
        Refreshes the window after the write so that the change is immediately displayed

        :param txt: text of output
        :type txt: (str)
        """
        ...
    
    def Close(self):
        """
        Called when wanting to restore the old stdout/stderr
        """
        ...
    
    def flush(self):
        """
        Flush parameter was passed into a print statement.
        For now doing nothing.  Not sure what action should be taken to ensure a flush happens regardless.
        """
        ...
    
    def __del__(self):
        """
        If this Widget is deleted, be sure and restore the old stdout, stderr
        """
        ...
    


class Output(Element):
    """
    Output Element - a multi-lined text area where stdout and stderr are re-routed to.
    """
    def __init__(self, size=..., background_color=..., text_color=..., pad=..., echo_stdout_stderr=..., font=..., tooltip=..., key=..., k=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param size: (width, height) w=characters-wide, h=rows-high
        :type size: (int, int)
        :param background_color: color of background
        :type background_color: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param echo_stdout_stderr: If True then output to stdout will be output to this element AND also to the normal console location
        :type echo_stdout_stderr: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    @property
    def TKOut(self):
        """
        Returns the TKOutput object used to create the element

        :return: The TKOutput object
        :rtype: (TKOutput)
        """
        ...
    
    def Update(self, value=..., visible=...):
        """
        Changes some of the settings for the Output Element. Must call `Window.Read` or `Window.Finalize` prior

        :param value: string that will replace current contents of the output area
        :type value: (str)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Get(self):
        """
        Returns the current contents of the output.  Similar to Get method other Elements
        :return: the current value of the output
        :rtype: (str)
        """
        ...
    
    def expand(self, expand_x=..., expand_y=..., expand_row=...):
        """
        Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions

        :param expand_x: If True Element will expand in the Horizontal directions
        :type expand_x: (bool)
        :param expand_y: If True Element will expand in the Vertical directions
        :type expand_y: (bool)
        """
        ...
    
    def __del__(self):
        """
        Delete this element. Normally Elements do not have their delete method specified, but for this one
        it's important that the underlying TKOut object get deleted so that the stdout will get restored properly
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    tk_out = ...
    update = ...


class Button(Element):
    """
    Button Element - Defines all possible buttons. The shortcuts such as Submit, FileBrowse, ... each create a Button
    """
    def __init__(self, button_text=..., button_type=..., target=..., tooltip=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., change_submits=..., enable_events=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., size=..., auto_size_button=..., button_color=..., disabled_button_color=..., highlight_colors=..., use_ttk_buttons=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., visible=..., metadata=...) -> None:
        """
        :param button_text: Text to be displayed on the button
        :type button_text: (str)
        :param button_type: You  should NOT be setting this directly. ONLY the shortcut functions set this
        :type button_type: (int)
        :param target: key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button
        :type target: Union[str, Tuple[int, int]]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param file_types: the filetypes that will be used to match files. To indicate all files: (("ALL Files", "*.*"),).  Note - NOT SUPPORTED ON MAC
        :type file_types: Tuple[Tuple[str, str], ...]
        :param initial_folder: starting path for folders and files
        :type initial_folder: (str)
        :param default_extension:  If no extension entered by user, add this to filename (only used in saveas dialogs)
        :type default_extension: (str)
        :param disabled: If True button will be created disabled
        :type disabled: (bool)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. If this button is a target, should it generate an event when filled in
        :type enable_events: (bool)
        :param image_filename: image filename if there is a button image. GIFs and PNGs only.
        :type image_filename: (str)
        :param image_data: Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data: Union[bytes, str]
        :param image_size: Size of the image in pixels (width, height)
        :type image_size: (int, int)
        :param image_subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample: (int)
        :param border_width: width of border around button in pixels
        :type border_width: (int)
        :param size: (width, height) of the button in characters wide, rows high
        :type size: (int, int)
        :param auto_size_button: if True the button size is sized to fit the text
        :type auto_size_button: (bool)
        :param button_color: of button. Easy to remember which is which if you say "ON" between colors. "red" on "green".
        :type button_color: Tuple[str, str] or str or None
        :param disabled_button_color: colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color
        :type disabled_button_color: Tuple[str, str]
        :param highlight_colors: colors to use when button has focus (highlight, background). None will use computed colors. Only used by Linux and only for non-TTK button
        :type highlight_colors: Tuple[str, str]
        :param use_ttk_buttons: True = use ttk buttons. False = do not use ttk buttons.  None (Default) = use ttk buttons only if on a Mac and not with button images
        :type use_ttk_buttons: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param bind_return_key: If True the return key will cause this button to be pressed
        :type bind_return_key: (bool)
        :param focus: if True, initial focus will be put on this button
        :type focus: (bool)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def ButtonReleaseCallBack(self, parm):
        """
        Not a user callable function.  Called by tkinter when a "realtime" button is released

        :param parm: the event info from tkinter

        """
        ...
    
    def ButtonPressCallBack(self, parm):
        """
        Not a user callable method. Callback called by tkinter when a "realtime" button is pressed

        :param parm: Event info passed in by tkinter

        """
        ...
    
    def ButtonCallBack(self):
        """
        Not user callable! Called by tkinter when a button is clicked.  This is where all the fun begins!
        """
        ...
    
    def Update(self, text=..., button_color=..., disabled=..., image_data=..., image_filename=..., visible=..., image_subsample=..., disabled_button_color=..., image_size=...):
        """
        Changes some of the settings for the Button Element. Must call `Window.Read` or `Window.Finalize` prior
        :param text: sets button text
        :type text: (str)
        :param button_color: of button. Easy to remember which is which if you say "ON" between colors. "red" on "green"
        :type button_color: Tuple[str, str] or (str)
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param image_data: Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data: Union[bytes, str]
        :param image_filename: image filename if there is a button image. GIFs and PNGs only.
        :type image_filename: (str)
        :param disabled_button_color: colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color
        :type disabled_button_color: Tuple[str, str]
        :param visible: control visibility of element
        :type visible: (bool)
        :param image_subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample: (int)
        :param image_size: Size of the image in pixels (width, height)
        :type image_size: (int, int)
        """
        ...
    
    def GetText(self):
        """
        Returns the current text shown on a button

        :return: The text currently displayed on the button
        :rtype: (str)
        """
        ...
    
    def Click(self):
        """
        Generates a click of the button as if the user clicked the button
        Calls the tkinter invoke method for the button
        """
        ...
    
    click = ...
    get_text = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


B = Button
Btn = Button
class ButtonMenu(Element):
    """
    The Button Menu Element.  Creates a button that when clicked will show a menu similar to right click menu
    """
    def __init__(self, button_text, menu_def, tooltip=..., disabled=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., size=..., auto_size_button=..., button_color=..., text_color=..., background_color=..., disabled_text_color=..., font=..., item_font=..., pad=..., key=..., k=..., tearoff=..., visible=..., metadata=...) -> None:
        """
        :param button_text: Text to be displayed on the button
        :type button_text: (str)
        :param menu_def: A list of lists of Menu items to show when this element is clicked. See docs for format as they are the same for all menu types
        :type menu_def: List[List[str]]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param disabled: If True button will be created disabled
        :type disabled: (bool)
        :param image_filename: image filename if there is a button image. GIFs and PNGs only.
        :type image_filename: (str)
        :param image_data: Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type image_data: Union[bytes, str]
        :param image_size: Size of the image in pixels (width, height)
        :type image_size: (int, int)
        :param image_subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
        :type image_subsample: (int)
        :param border_width: width of border around button in pixels
        :type border_width: (int)
        :param size:(width, height) of the button in characters wide, rows high
        :type size: (int, int)
        :param auto_size_button: if True the button size is sized to fit the text
        :type auto_size_button: (bool)
        :param button_color: of button. Easy to remember which is which if you say "ON" between colors. "red" on "green"
        :type button_color: Tuple[str, str] or str
        :param background_color: color of the background
        :type background_color: (str)
        :param text_color: element's text color. Can be in #RRGGBB format or a color name "black"
        :type text_color: (str)
        :param disabled_text_color: color to use for text when item is disabled. Can be in #RRGGBB format or a color name "black"
        :type disabled_text_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param item_font: specifies the font family, size, etc, for the menu items
        :type item_font: Union[str, Tuple[str, int]]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tearoff: Determines if menus should allow them to be torn off
        :type tearoff: (bool)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, menu_definition, visible=...):
        """
        Changes some of the settings for the ButtonMenu Element. Must call `Window.Read` or `Window.Finalize` prior

        :param menu_definition: (New menu definition (in menu definition format)
        :type menu_definition: List[List]
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Click(self):
        """
        Generates a click of the button as if the user clicked the button
        Calls the tkinter invoke method for the button
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


BMenu = ButtonMenu
class ProgressBar(Element):
    """
    Progress Bar Element - Displays a colored bar that is shaded as progress of some operation is made
    """
    def __init__(self, max_value, orientation=..., size=..., auto_size_text=..., bar_color=..., style=..., border_width=..., relief=..., key=..., k=..., pad=..., visible=..., metadata=...) -> None:
        """
        :param max_value: max value of progressbar
        :type max_value: (int)
        :param orientation: 'horizontal' or 'vertical'
        :type orientation: (str)
        :param size: Size of the bar.  If horizontal (chars wide, pixels high), vert (pixels wide, rows high)
        :type size: (int, int)
        :param auto_size_text: Not sure why this is here
        :type auto_size_text: (bool)
        :param bar_color: The 2 colors that make up a progress bar. Easy to remember which is which if you say "ON" between colors. "red" on "green".
        :type bar_color: Tuple[str, str] or str
        :param style: Progress bar style defined as one of these 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
        :type style: (str)
        :param border_width: The amount of pixels that go around the outside of the bar
        :type border_width: (int)
        :param relief: relief style. Values are same as progress meter relief values.  Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID` (Default value = DEFAULT_PROGRESS_BAR_RELIEF)
        :type relief: (str)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def UpdateBar(self, current_count, max=...):
        """
        DEPRECATED BUT STILL USABLE - has been combined with the normal ProgressBar.update method.
        Change what the bar shows by changing the current count and optionally the max count

        :param current_count: sets the current value
        :type current_count: (int)
        :param max: changes the max value
        :type max: (int)
        """
        ...
    
    def Update(self, current_count, max=..., visible=...):
        """
        Changes some of the settings for the ProgressBar Element. Must call `Window.Read` or `Window.Finalize` prior
        Now has the ability to modify the count so that the update_bar method is not longer needed separately

        :param current_count: sets the current value
        :type current_count: (int)
        :param max: changes the max value
        :type max: (int)
        :param visible: control visibility of element
        :type visible: (bool)
        :return: Returns True if update was OK.  False means something wrong with window or it was closed
        :rtype: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...
    update_bar = ...


PBar = ProgressBar
Prog = ProgressBar
class Image(Element):
    """
    Image Element - show an image in the window. Should be a GIF or a PNG only
    """
    def __init__(self, filename=..., data=..., background_color=..., size=..., pad=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., enable_events=..., metadata=...) -> None:
        """
        :param filename: image filename if there is a button image. GIFs and PNGs only.
        :type filename: (str)
        :param data: Raw or Base64 representation of the image to put on button. Choose either filename or data
        :type data: Union[bytes, str]
        :param background_color: color of background
        :type background_color:
        :param size: (width, height) size of image in pixels
        :type size: (int, int)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param enable_events: Turns on the element specific events. For an Image element, the event is "image clicked"
        :type enable_events: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, filename=..., data=..., size=..., visible=...):
        """
        Changes some of the settings for the Image Element. Must call `Window.Read` or `Window.Finalize` prior.
        To clear an image that's been displayed, call with NONE of the options set.  A blank update call will
        delete the previously shown image.
        :param filename: filename to the new image to display.
        :type filename: (str)
        :param data: Base64 encoded string OR a tk.PhotoImage object
        :type data: Union[str, tkPhotoImage]
        :param size: size of a image (w,h) w=characters-wide, h=rows-high
        :type size: Tuple[int,int]
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def UpdateAnimation(self, source, time_between_frames=...):
        """
        Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
        NOTE - does NOT perform a sleep call to delay
        :param source: Filename or Base64 encoded string containing Animated GIF
        :type source: Union[str,bytes]
        :param time_between_frames: Number of milliseconds to wait between showing frames
        :type time_between_frames: (int)
        """
        ...
    
    def update_animation_no_buffering(self, source, time_between_frames=...):
        """
        Show an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.
        NOTE - does NOT perform a sleep call to delay
        :param source: Filename or Base64 encoded string containing Animated GIF
        :type source: Union[str,bytes]
        :param time_between_frames: Number of milliseconds to wait between showing frames
        :type time_between_frames: (int)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...
    update_animation = ...


class Canvas(Element):
    def __init__(self, canvas=..., background_color=..., size=..., pad=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., border_width=..., metadata=...) -> None:
        """
        :param canvas: Your own tk.Canvas if you already created it. Leave blank to create a Canvas
        :type canvas: (tk.Canvas)
        :param background_color: color of background
        :type background_color: (str)
        :param size: (width in char, height in rows) size in pixels to make canvas
        :type size: Tuple[int,int]
        :param pad:  Amount of padding to put around element
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param border_width: width of border around element in pixels. Not normally used with Canvas element
        :type border_width: (int)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    @property
    def TKCanvas(self):
        """
        Returns the underlying tkiner Canvas widget

        :return: The tkinter canvas widget
        :rtype: (tk.Canvas)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    tk_canvas = ...


class Graph(Element):
    """
    Creates an area for you to draw on.  The MAGICAL property this Element has is that you interact
    with the element using your own coordinate system.  This is an important point!!  YOU define where the location
    is for (0,0).  Want (0,0) to be in the middle of the graph like a math 4-quadrant graph?  No problem!  Set your
    lower left corner to be (-100,-100) and your upper right to be (100,100) and you've got yourself a graph with
    (0,0) at the center.
    One of THE coolest of the Elements.
    You can also use float values. To do so, be sure and set the float_values parameter.
    Mouse click and drag events are possible and return the (x,y) coordinates of the mouse
    Drawing primitives return an "id" that is referenced when you want to operation on that item (e.g. to erase it)
    """
    def __init__(self, canvas_size, graph_bottom_left, graph_top_right, background_color=..., pad=..., change_submits=..., drag_submits=..., enable_events=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., float_values=..., border_width=..., metadata=...) -> None:
        """
        :param canvas_size: size of the canvas area in pixels
        :type canvas_size: Tuple[int, int]
        :param graph_bottom_left: (x,y) The bottoms left corner of your coordinate system
        :type graph_bottom_left: Tuple[int, int]
        :param graph_top_right: (x,y) The top right corner of  your coordinate system
        :type graph_top_right: Tuple[int, int]
        :param background_color: background color of the drawing area
        :type background_color: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param change_submits: * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits: (bool)
        :param drag_submits: if True and Events are enabled for the Graph, will report Events any time the mouse moves while button down
        :type drag_submits: (bool)
        :param enable_events: If True then clicks on the Graph are immediately reported as an event. Use this instead of change_submits
        :type enable_events: (bool)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element (Default = True)
        :type visible: (bool)
        :param float_values: If True x,y coordinates are returned as floats, not ints
        :type float_values: (bool)
        :param border_width: width of border around element in pixels. Not normally used for Graph Elements
        :type border_width: (int)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def DrawLine(self, point_from, point_to, color=..., width=...):
        """
        Draws a line from one point to another point using USER'S coordinates. Can set the color and width of line
        :param point_from: Starting point for line
        :type point_from: Union[Tuple[int, int], Tuple[float, float]]
        :param point_to: Ending point for line
        :type point_to: Union[Tuple[int, int], Tuple[float, float]]
        :param color: Color of the line
        :type color: (str)
        :param width: width of line in pixels
        :type width: (int)
        :return: id returned from tktiner or None if user closed the window. id is used when you
        :rtype: Union[int, None]
        """
        ...
    
    def DrawLines(self, points, color=..., width=...):
        """
        Draw a series of lines given list of points

        :param points: list of points that define the polygon
        :type points: List[Union[Tuple[int, int], Tuple[float, float]]]
        :param color: Color of the line
        :type color: (str)
        :param width: width of line in pixels
        :type width: (int)
        :return: id returned from tktiner or None if user closed the window. id is used when you
        :rtype: Union[int, None]
        """
        ...
    
    def DrawPoint(self, point, size=..., color=...):
        """
        Draws a "dot" at the point you specify using the USER'S coordinate system
        :param point: Center location using USER'S coordinate system
        :type point: Union [Tuple[int, int], Tuple[float, float]]
        :param size: Radius? (Or is it the diameter?) in user's coordinate values.
        :type size: Union[int, float]
        :param color: color of the point to draw
        :type color: (str)
        :return: id returned from tkinter that you'll need if you want to manipulate the point
        :rtype: Union[int, None]
        """
        ...
    
    def DrawCircle(self, center_location, radius, fill_color=..., line_color=..., line_width=...):
        """
        Draws a circle, cenetered at the location provided.  Can set the fill and outline colors
        :param center_location: Center location using USER'S coordinate system
        :type center_location: Union [Tuple[int, int], Tuple[float, float]]
        :param radius: Radius in user's coordinate values.
        :type radius: Union[int, float]
        :param fill_color: color of the point to draw
        :type fill_color: (str)
        :param line_color: color of the outer line that goes around the circle (sorry, can't set thickness)
        :type line_color: (str)
        :param line_width: width of the line around the circle, the outline, in pixels
        :type line_width: (int)
        :return: id returned from tkinter that you'll need if you want to manipulate the circle
        :rtype: Union[int, None]
        """
        ...
    
    def DrawOval(self, top_left, bottom_right, fill_color=..., line_color=..., line_width=...):
        """
        Draws an oval based on coordinates in user coordinate system. Provide the location of a "bounding rectangle"
        :param top_left: the top left point of bounding rectangle
        :type top_left: Union[Tuple[int, int], Tuple[float, float]]
        :param bottom_right: the bottom right point of bounding rectangle
        :type bottom_right: Union[Tuple[int, int], Tuple[float, float]]
        :param fill_color: color of the interrior
        :type fill_color: (str)
        :param line_color: color of outline of oval
        :type line_color: (str)
        :param line_width: width of the line around the oval, the outline, in pixels
        :type line_width: (int)
        :return: id returned from tkinter that you'll need if you want to manipulate the oval
        :rtype: Union[int, None]
        """
        ...
    
    def DrawArc(self, top_left, bottom_right, extent, start_angle, style=..., arc_color=..., line_width=...):
        """
        Draws different types of arcs.  Uses a "bounding box" to define location
        :param top_left: the top left point of bounding rectangle
        :type top_left: Union[Tuple[int, int], Tuple[float, float]]
        :param bottom_right: the bottom right point of bounding rectangle
        :type bottom_right: Union[Tuple[int, int], Tuple[float, float]]
        :param extent: Andle to end drawing. Used in conjunction with start_angle
        :type extent: (float)
        :param start_angle: Angle to begin drawing. Used in conjunction with extent
        :type start_angle: (float)
        :param style: Valid choices are One of these Style strings- 'pieslice', 'chord', 'arc', 'first', 'last', 'butt', 'projecting', 'round', 'bevel', 'miter'
        :type style: (str)
        :param arc_color: color to draw arc with
        :type arc_color: (str)
        :return: id returned from tkinter that you'll need if you want to manipulate the arc
        :rtype: Union[int, None]
        """
        ...
    
    def DrawRectangle(self, top_left, bottom_right, fill_color=..., line_color=..., line_width=...):
        """
        Draw a rectangle given 2 points. Can control the line and fill colors

        :param top_left: the top left point of rectangle
        :type top_left: Union[Tuple[int, int], Tuple[float, float]]
        :param bottom_right: the bottom right point of rectangle
        :type bottom_right: Union[Tuple[int, int], Tuple[float, float]]
        :param fill_color: color of the interior
        :type fill_color: (str)
        :param line_color: color of outline
        :type line_color: (str)
        :param line_width: width of the line in pixels
        :type line_width: (int)
        :return: Union[int, None] id returned from tkinter that you'll need if you want to manipulate the rectangle
        :rtype: Union[int, None]
        """
        ...
    
    def DrawPolygon(self, points, fill_color=..., line_color=..., line_width=...):
        """
        Draw a polygon given list of points

        :param points: list of points that define the polygon
        :type points: List[Union[Tuple[int, int], Tuple[float, float]]]
        :param fill_color: color of the interior
        :type fill_color: (str)
        :param line_color: color of outline
        :type line_color: (str)
        :param line_width: width of the line in pixels
        :type line_width: (int)
        :return: id returned from tkinter that you'll need if you want to manipulate the rectangle
        :rtype: Union[int, None]
        """
        ...
    
    def DrawText(self, text, location, color=..., font=..., angle=..., text_location=...):
        """
        Draw some text on your graph.  This is how you label graph number lines for example

        :param text: text to display
        :type text: (str)
        :param location: location to place first letter
        :type location: Union[Tuple[int, int], Tuple[float, float]]
        :param color: text color
        :type color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param angle: Angle 0 to 360 to draw the text.  Zero represents horizontal text
        :type angle: (float)
        :param text_location: "anchor" location for the text. Values start with TEXT_LOCATION_
        :type text_location: (enum)
        :return: id returned from tkinter that you'll need if you want to manipulate the text
        :rtype: Union[int, None]
        """
        ...
    
    def DrawImage(self, filename=..., data=..., location=...):
        """
        Places an image onto your canvas.  It's a really important method for this element as it enables so much

        :param filename: if image is in a file, path and filename for the image. (GIF and PNG only!)
        :type filename: (str)
        :param data: if image is in Base64 format or raw? format then use instead of filename
        :type data: Union[str, bytes]
        :param location: the (x,y) location to place image's top left corner
        :type location: Union[Tuple[int, int], Tuple[float, float]]
        :return: id returned from tkinter that you'll need if you want to manipulate the image
        :rtype: Union[int, None]
        """
        ...
    
    def Erase(self):
        """
        Erase the Graph - Removes all figures previously "drawn" using the Graph methods (e.g. DrawText)
        """
        ...
    
    def DeleteFigure(self, id):
        """
        Remove from the Graph the figure represented by id. The id is given to you anytime you call a drawing primitive

        :param id: the id returned to you when calling one of the drawing methods
        :type id: (int)
        """
        ...
    
    def Update(self, background_color=..., visible=...):
        """
        Changes some of the settings for the Graph Element. Must call `Window.Read` or `Window.Finalize` prior

        :param background_color: color of background
        :type background_color: ???
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Move(self, x_direction, y_direction):
        """
        Moves the entire drawing area (the canvas) by some delta from the current position.  Units are indicated in your coordinate system indicated number of ticks in your coordinate system

        :param x_direction: how far to move in the "X" direction in your coordinates
        :type x_direction: Union[int, float]
        :param y_direction: how far to move in the "Y" direction in your coordinates
        :type y_direction: Union[int, float]
        """
        ...
    
    def MoveFigure(self, figure, x_direction, y_direction):
        """
        Moves a previously drawn figure using a "delta" from current position

        :param figure: Previously obtained figure-id. These are returned from all Draw methods
        :type figure: (id)
        :param x_direction: delta to apply to position in the X direction
        :type x_direction: Union[int, float]
        :param y_direction: delta to apply to position in the Y direction
        :type y_direction: Union[int, float]
        """
        ...
    
    def RelocateFigure(self, figure, x, y):
        """
        Move a previously made figure to an arbitrary (x,y) location. This differs from the Move methods because it
        uses absolute coordinates versus relative for Move

        :param figure: Previously obtained figure-id. These are returned from all Draw methods
        :type figure: (id)
        :param x: location on X axis (in user coords) to move the upper left corner of the figure
        :type x: Union[int, float]
        :param y: location on Y axis (in user coords) to move the upper left corner of the figure
        :type y: Union[int, float]
        """
        ...
    
    def SendFigureToBack(self, figure):
        """
        Changes Z-order of figures on the Graph.  Sends the indicated figure to the back of all other drawn figures

        :param figure: value returned by tkinter when creating the figure / drawing
        :type figure: (int)
        """
        ...
    
    def BringFigureToFront(self, figure):
        """
        Changes Z-order of figures on the Graph.  Brings the indicated figure to the front of all other drawn figures

        :param figure: value returned by tkinter when creating the figure / drawing
        :type figure: (int)
        """
        ...
    
    def GetFiguresAtLocation(self, location):
        """
        Returns a list of figures located at a particular x,y location within the Graph

        :param location: point to check
        :type location: Union[Tuple[int, int], Tuple[float, float]]
        :return: a list of previously drawn "Figures" (returned from the drawing primitives)
        :rtype: List[int]
        """
        ...
    
    def GetBoundingBox(self, figure):
        """
        Given a figure, returns the upper left and lower right bounding box coordinates

        :param figure: a previously drawing figure
        :type figure: object
        :return: upper left x, upper left y, lower right x, lower right y
        :rtype: Union[Tuple[int, int, int, int], Tuple[float, float, float, float]]
        """
        ...
    
    def change_coordinates(self, graph_bottom_left, graph_top_right):
        """
        Changes the corrdinate system to a new one.  The same 2 points in space are used to define the coorinate
        system - the bottom left and the top right values of your graph.

        :param graph_bottom_left: The bottoms left corner of your coordinate system
        :type graph_bottom_left: Tuple[int, int] (x,y)
        :param graph_top_right: The top right corner of  your coordinate system
        :type graph_top_right: Tuple[int, int]  (x,y)
        """
        ...
    
    @property
    def TKCanvas(self):
        """
        Returns the underlying tkiner Canvas widget

        :return: The tkinter canvas widget
        :rtype: (tk.Canvas)
        """
        ...
    
    def ButtonReleaseCallBack(self, event):
        """
        Not a user callable method.  Used to get Graph click events. Called by tkinter when button is released

        :param event: (event) event info from tkinter. Note not used in this method
        """
        ...
    
    def ButtonPressCallBack(self, event):
        """
        Not a user callable method.  Used to get Graph click events. Called by tkinter when button is released

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a click
        """
        ...
    
    def MotionCallBack(self, event):
        """
        Not a user callable method.  Used to get Graph mouse motion events. Called by tkinter when mouse moved

        :param event: (event) event info from tkinter. Contains the x and y coordinates of a mouse
        """
        ...
    
    bring_figure_to_front = ...
    button_press_call_back = ...
    button_release_call_back = ...
    delete_figure = ...
    draw_arc = ...
    draw_circle = ...
    draw_image = ...
    draw_line = ...
    draw_oval = ...
    draw_point = ...
    draw_polygon = ...
    draw_lines = ...
    draw_rectangle = ...
    draw_text = ...
    get_figures_at_location = ...
    get_bounding_box = ...
    erase = ...
    motion_call_back = ...
    move = ...
    move_figure = ...
    relocate_figure = ...
    send_figure_to_back = ...
    set_focus = ...
    set_tooltip = ...
    tk_canvas = ...
    update = ...


class Frame(Element):
    """
    A Frame Element that contains other Elements. Encloses with a line around elements and a text label.
    """
    def __init__(self, title, layout, title_color=..., background_color=..., title_location=..., relief=..., size=..., font=..., pad=..., border_width=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., element_justification=..., vertical_alignment=..., metadata=...) -> None:
        """
        :param title: text that is displayed as the Frame's "label" or title
        :type title: (str)
        :param layout: The layout to put inside the Frame
        :type layout: List[List[Elements]]
        :param title_color: color of the title text
        :type title_color: (str)
        :param background_color: background color of the Frame
        :type background_color: (str)
        :param title_location: location to place the text title.  Choices include: TITLE_LOCATION_TOP TITLE_LOCATION_BOTTOM TITLE_LOCATION_LEFT TITLE_LOCATION_RIGHT TITLE_LOCATION_TOP_LEFT TITLE_LOCATION_TOP_RIGHT TITLE_LOCATION_BOTTOM_LEFT TITLE_LOCATION_BOTTOM_RIGHT
        :type title_location: (enum)
        :param relief: relief style. Values are same as other elements with reliefs. Choices include RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief: (enum)
        :param size: (width, height) (note this parameter may not always work)
        :type size: (int, int)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param element_justification: All elements inside the Frame will have this justification 'left', 'right', 'center' are valid values
        :type element_justification: (str)
        :param vertical_alignment: Place the column at the 'top', 'center', 'bottom' of the row (can also use t,c,r). Defaults to no setting (tkinter decides)
        :type vertical_alignment: (str)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def AddRow(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Frame Element.

        :param *args: The list of elements for this row
        :type *args: List[Element]
        """
        ...
    
    def Layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows: List[List[Element]]
        :return: Used for chaining
        :rtype: (Frame)
        """
        ...
    
    def Update(self, value=..., visible=...):
        """
        Changes some of the settings for the Frame Element. Must call `Window.Read` or `Window.Finalize` prior

        :param value: New text value to show on frame
        :type value: (Any)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    add_row = ...
    layout = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


class VerticalSeparator(Element):
    """
    Vertical Separator Element draws a vertical line at the given location. It will span 1 "row". Usually paired with
    Column Element if extra height is needed
    """
    def __init__(self, color=..., pad=..., key=..., k=...) -> None:
        """
        :param color: Color of the line. Defaults to theme's text color. Can be name or #RRGGBB format
        :type color: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        """
        ...
    


VSeperator = VerticalSeparator
VSeparator = VerticalSeparator
VSep = VerticalSeparator
class HorizontalSeparator(Element):
    """
    Horizontal Separator Element draws a Horizontal line at the given location.
    """
    def __init__(self, color=..., pad=..., key=..., k=...) -> None:
        """
        :param color: Color of the line. Defaults to theme's text color. Can be name or #RRGGBB format
        :type color: (str)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        """
        ...
    


HSeparator = HorizontalSeparator
HSep = HorizontalSeparator
class Tab(Element):
    """
    Tab Element is another "Container" element that holds a layout and displays a tab with text. Used with TabGroup only
    Tabs are never placed directly into a layout.  They are always "Contained" in a TabGroup layout
    """
    def __init__(self, title, layout, title_color=..., background_color=..., font=..., pad=..., disabled=..., border_width=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., element_justification=..., metadata=...) -> None:
        """
        :param title: text to show on the tab
        :type title: (str)
        :param layout: The element layout that will be shown in the tab
        :type layout: List[List[Element]]
        :param title_color: color of the tab text (note not currently working on tkinter)
        :type title_color: (str)
        :param background_color: color of background of the entire layout
        :type background_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param disabled: If True button will be created disabled
        :type disabled: (bool)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param element_justification: All elements inside the Tab will have this justification 'left', 'right', 'center' are valid values
        :type element_justification: (str)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def AddRow(self, *args):
        """
        Not recommended use call.  Used to add rows of Elements to the Frame Element.

        :param *args: The list of elements for this row
        :type *args: List[Element]
        """
        ...
    
    def Layout(self, rows):
        """
        Not user callable.  Use layout parameter instead. Creates the layout using the supplied rows of Elements

        :param rows: List[List[Element]] The list of rows
        :type rows: List[List[Element]]
        :return: (Tab) used for chaining
        """
        ...
    
    def Update(self, title=..., disabled=..., visible=...):
        """
        Changes some of the settings for the Tab Element. Must call `Window.Read` or `Window.Finalize` prior

        :param title: tab title
        :type title: (str)
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def Select(self):
        """
        Create a tkinter event that mimics user clicking on a tab. Must have called window.Finalize / Read first!

        """
        ...
    
    add_row = ...
    layout = ...
    select = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


class TabGroup(Element):
    """
    TabGroup Element groups together your tabs into the group of tabs you see displayed in your window
    """
    def __init__(self, layout, tab_location=..., title_color=..., tab_background_color=..., selected_title_color=..., selected_background_color=..., background_color=..., font=..., change_submits=..., enable_events=..., pad=..., border_width=..., theme=..., key=..., k=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param layout: Layout of Tabs. Different than normal layouts. ALL Tabs should be on first row
        :type layout: List[List[Tab]]
        :param tab_location: location that tabs will be displayed. Choices are left, right, top, bottom, lefttop, leftbottom, righttop, rightbottom, bottomleft, bottomright, topleft, topright
        :type tab_location: (str)
        :param title_color: color of text on tabs
        :type title_color: (str)
        :param tab_background_color: color of all tabs that are not selected
        :type tab_background_color: (str)
        :param selected_title_color: color of tab text when it is selected
        :type selected_title_color: (str)
        :param selected_background_color: color of tab when it is selected
        :type selected_background_color: (str)
        :param background_color: color of background area that tabs are located on
        :type background_color: (str)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param change_submits: * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits: (bool)
        :param enable_events: If True then switching tabs will generate an Event
        :type enable_events: (bool)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param theme: DEPRICATED - You can only specify themes using set options or when window is created. It's not possible to do it on an element basis
        :type theme: (enum)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def AddRow(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Frame Element.

        :param *args:  The list of elements for this row
        :typeparam *args: List[Element]
        """
        ...
    
    def Layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows: List[List[Element]]
        :return: Used for chaining
        :rtype: (Frame)
        """
        ...
    
    def FindKeyFromTabName(self, tab_name):
        """
        Searches through the layout to find the key that matches the text on the tab. Implies names should be unique

        :param tab_name: name of a tab
        :type tab_name: str
        :return: Returns the key or None if no key found
        :rtype: Union[key, None]
        """
        ...
    
    def Get(self):
        """
        Returns the current value for the Tab Group, which will be the currently selected tab's KEY or the text on
        the tab if no key is defined.  Returns None if an error occurs.
        Note that this is exactly the same data that would be returned from a call to Window.Read. Are you sure you
        are using this method correctly?

        :return:  The key of the currently selected tab or the tab's text if it has no key
        :rtype: Union[Any, None]
        """
        ...
    
    add_row = ...
    find_key_from_tab_name = ...
    get = ...
    layout = ...
    set_focus = ...
    set_tooltip = ...


class Slider(Element):
    """
    A slider, horizontal or vertical
    """
    def __init__(self, range=..., default_value=..., resolution=..., tick_interval=..., orientation=..., disable_number_display=..., border_width=..., relief=..., change_submits=..., enable_events=..., disabled=..., size=..., font=..., background_color=..., text_color=..., key=..., k=..., pad=..., tooltip=..., visible=..., metadata=...) -> None:
        """
        :param range: slider's range (min value, max value)
        :type range: Union[Tuple[int, int], Tuple[float, float]]
        :param default_value: starting value for the slider
        :type default_value: Union[int, float]
        :param resolution: the smallest amount the slider can be moved
        :type resolution: Union[int, float]
        :param tick_interval: how often a visible tick should be shown next to slider
        :type tick_interval: Union[int, float]
        :param orientation: 'horizontal' or 'vertical' ('h' or 'v' also work)
        :type orientation: (str)
        :param disable_number_display: if True no number will be displayed by the Slider Element
        :type disable_number_display: (bool)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param relief: relief style. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief: (enum)
        :param change_submits: * DEPRICATED DO NOT USE. Use `enable_events` instead
        :type change_submits: (bool)
        :param enable_events: If True then moving the slider will generate an Event
        :type enable_events: (bool)
        :param disabled: set disable state for element
        :type disabled: (bool)
        :param size: (w=characters-wide, h=rows-high)
        :type size: (int, int)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param background_color: color of slider's background
        :type background_color: (str)
        :param text_color: color of the slider's text
        :type text_color: (str)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, value=..., range=..., disabled=..., visible=...):
        """
        Changes some of the settings for the Slider Element. Must call `Window.Read` or `Window.Finalize` prior

        :param value: sets current slider value
        :type value: Union[int, float]
        :param range: Sets a new range for slider
        :type range: Union[Tuple[int, int], Tuple[float, float]
        :param disabled: disable or enable state of the element
        :type disabled: (bool)
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


class TkFixedFrame(tk.Frame):
    """
    A tkinter frame that is used with Column Elements that do not have a scrollbar
    """
    def __init__(self, master, **kwargs) -> None:
        """
        :param master: The parent widget
        :type master: (tk.Widget)
        :param **kwargs: The keyword args
        """
        ...
    


class TkScrollableFrame(tk.Frame):
    """
    A frame with one or two scrollbars.  Used to make Columns with scrollbars
    """
    def __init__(self, master, vertical_only, **kwargs) -> None:
        """
        :param master: The parent widget
        :type master: (tk.Widget)
        :param vertical_only: if True the only a vertical scrollbar will be shown
        :type vertical_only: (bool)
        """
        ...
    
    def hookMouseWheel(self, e):
        ...
    
    def unhookMouseWheel(self, e):
        ...
    
    def resize_frame(self, e):
        ...
    
    def yscroll(self, event):
        ...
    
    def xscroll(self, event):
        ...
    
    def bind_mouse_scroll(self, parent, mode):
        ...
    
    def set_scrollregion(self, event=...):
        """ Set the scroll region on the canvas """
        ...
    


class Column(Element):
    """
    A container element that is used to create a layout within your window's layout
    """
    def __init__(self, layout, background_color=..., size=..., pad=..., scrollable=..., vertical_scroll_only=..., right_click_menu=..., key=..., k=..., visible=..., justification=..., element_justification=..., vertical_alignment=..., grab=..., expand_x=..., expand_y=..., metadata=...) -> None:
        """
        :param layout: Layout that will be shown in the Column container
        :type layout: List[List[Element]]
        :param background_color: color of background of entire Column
        :type background_color: (str)
        :param size: (width, height) size in pixels (doesn't work quite right, sometimes only 1 dimension is set by tkinter
        :type size: (int, int)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param scrollable: if True then scrollbars will be added to the column
        :type scrollable: (bool)
        :param vertical_scroll_only: if Truen then no horizontal scrollbar will be shown
        :type vertical_scroll_only: (bool)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param justification: set justification for the Column itself. Note entire row containing the Column will be affected
        :type justification: (str)
        :param element_justification: All elements inside the Column will have this justification 'left', 'right', 'center' are valid values
        :type element_justification: (str)
        :param vertical_alignment: Place the column at the 'top', 'center', 'bottom' of the row (can also use t,c,r). Defaults to no setting (tkinter decides)
        :type vertical_alignment: (str)
        :param grab: If True can grab this element and move the window around. Default is False
        :type grab: (bool)
        :param expand_x: If True the column will automatically expand in the X direction to fill available space
        :type expand_x: (bool)
        :param expand_y: If True the column will automatically expand in the Y direction to fill available space
        :type expand_y: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def AddRow(self, *args):
        """
        Not recommended user call.  Used to add rows of Elements to the Column Element.

        :param *args: The list of elements for this row
        :type *args: List[Element]
        """
        ...
    
    def Layout(self, rows):
        """
        Can use like the Window.Layout method, but it's better to use the layout parameter when creating

        :param rows: The rows of Elements
        :type rows: List[List[Element]]
        :return: Used for chaining
        :rtype: (Column)
        """
        ...
    
    def Update(self, visible=...):
        """
        Changes some of the settings for the Column Element. Must call `Window.Read` or `Window.Finalize` prior

        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    def contents_changed(self):
        """
        When a scrollable column has part of its layout changed by making elements visibile or invisible, then this function
        should be called so that the new scroll area is computed to match the new contents.
        """
        ...
    
    add_row = ...
    layout = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


Col = Column
class Pane(Element):
    """
    A sliding Pane that is unique to tkinter.  Uses Columns to create individual panes
    """
    def __init__(self, pane_list, background_color=..., size=..., pad=..., orientation=..., show_handle=..., relief=..., handle_size=..., border_width=..., key=..., k=..., visible=..., metadata=...) -> None:
        """
        :param pane_list: Must be a list of Column Elements. Each Column supplied becomes one pane that's shown
        :type pane_list: List[Column]
        :param background_color: color of background
        :type background_color: (str)
        :param size: (width, height) w=characters-wide, h=rows-high How much room to reserve for the Pane
        :type size: (int, int)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param orientation: 'horizontal' or 'vertical' or ('h' or 'v'). Direction the Pane should slide
        :type orientation: (str)
        :param show_handle: if True, the handle is drawn that makes it easier to grab and slide
        :type show_handle: (bool)
        :param relief: relief style. Values are same as other elements that use relief values. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID
        :type relief: (enum)
        :param handle_size: Size of the handle in pixels
        :type handle_size: (int)
        :param border_width: width of border around element in pixels
        :type border_width: (int)
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, visible=...):
        """
        Changes some of the settings for the Pane Element. Must call `Window.Read` or `Window.Finalize` prior

        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


class TKCalendar(ttk.Frame):
    """
    This code was shamelessly lifted from moshekaplan's repository - moshekaplan/tkinter_components
    NONE of this code is user callable.  Stay away!
    """
    datetime = ...
    timedelta = ...
    def __init__(self, master=..., target_element=..., close_when_chosen=..., default_date=..., **kw) -> None:
        """WIDGET-SPECIFIC OPTIONS: locale, firstweekday, year, month, selectbackground, selectforeground """
        ...
    
    def __setitem__(self, item, value):
        ...
    
    def __getitem__(self, item):
        ...
    
    @property
    def selection(self):
        ...
    


class Menu(Element):
    """
    Menu Element is the Element that provides a Menu Bar that goes across the top of the window, just below titlebar.
    Here is an example layout.  The "&" are shortcut keys ALT+key.
    Is a List of -  "Item String" + List
    Where Item String is what will be displayed on the Menubar itself.
    The List that follows the item represents the items that are shown then Menu item is clicked
    Notice how an "entry" in a mennu can be a list which means it branches out and shows another menu, etc. (resursive)
    menu_def = [['&File', ['!&Open', '&Save::savekey', '---', '&Properties', 'E&xit']],
                ['!&Edit', ['!&Paste', ['Special', 'Normal', ], 'Undo'], ],
                ['&Debugger', ['Popout', 'Launch Debugger']],
                ['&Toolbar', ['Command &1', 'Command &2', 'Command &3', 'Command &4']],
                ['&Help', '&About...'], ]
    Finally, "keys" can be added to entries so make them unique.  The "Save" entry has a key associated with it. You
    can see it has a "::" which signifies the beginning of a key.  The user will not see the key portion when the
    menu is shown.  The key portion is returned as part of the event.
    """
    def __init__(self, menu_definition, background_color=..., text_color=..., disabled_text_color=..., size=..., tearoff=..., font=..., pad=..., key=..., k=..., visible=..., metadata=...) -> None:
        """
        :param menu_definition: The Menu definition specified using lists (docs explain the format)
        :type menu_definition: List[List[Tuple[str, List[str]]]
        :param background_color: color of the background
        :type background_color: (str)
        :param text_color: element's text color. Can be in #RRGGBB format or a color name "black"
        :type text_color: (str)
        :param disabled_text_color: color to use for text when item is disabled. Can be in #RRGGBB format or a color name "black"
        :type disabled_text_color: (str)
        :param size: Not used in the tkinter port
        :type size: (int, int)
        :param tearoff: if True, then can tear the menu off from the window ans use as a floating window. Very cool effect
        :type tearoff: (bool)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param key: Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, menu_definition=..., visible=...):
        """
        Update a menubar - can change the menu definition and visibility.  The entire menu has to be specified

        :param menu_definition: ???
        :type menu_definition: List[List[Tuple[str, List[str]]]
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


MenuBar = Menu
class Table(Element):
    def __init__(self, values, headings=..., visible_column_map=..., col_widths=..., def_col_width=..., auto_size_columns=..., max_col_width=..., select_mode=..., display_row_numbers=..., num_rows=..., row_height=..., font=..., justification=..., text_color=..., background_color=..., alternating_row_color=..., selected_row_colors=..., header_text_color=..., header_background_color=..., header_font=..., row_colors=..., vertical_scroll_only=..., hide_vertical_scroll=..., size=..., change_submits=..., enable_events=..., bind_return_key=..., pad=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param values: ???
        :type values: List[List[Union[str, int, float]]]
        :param headings: The headings to show on the top line
        :type headings: List[str]
        :param visible_column_map: One entry for each column. False indicates the column is not shown
        :type visible_column_map: List[bool]
        :param col_widths: Number of characters that each column will occupy
        :type col_widths: List[int]
        :param def_col_width: Default column width in characters
        :type def_col_width: (int)
        :param auto_size_columns: if True columns will be sized automatically
        :type auto_size_columns: (bool)
        :param max_col_width: Maximum width for all columns in characters
        :type max_col_width: (int)
        :param select_mode: Select Mode. Valid values start with "TABLE_SELECT_MODE_".  Valid values are: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED
        :type select_mode: (enum)
        :param display_row_numbers: if True, the first column of the table will be the row #
        :type display_row_numbers: (bool)
        :param num_rows: The number of rows of the table to display at a time
        :type num_rows: (int)
        :param row_height: height of a single row in pixels
        :type row_height: (int)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param justification: 'left', 'right', 'center' are valid choices
        :type justification: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param alternating_row_color: if set then every other row will have this color in the background.
        :type alternating_row_color: (str)
        :param selected_row_colors: Sets the text color and background color for a selected row. Same format as button colors - tuple ('red', 'yellow') or string 'red on yellow'. Defaults to theme's button color
        :type selected_row_colors: str or Tuple[str, str]
        :param header_text_color: sets the text color for the header
        :type header_text_color: (str)
        :param header_background_color: sets the background color for the header
        :type header_background_color: (str)
        :param header_font: specifies the font family, size, etc
        :type header_font: Union[str, Tuple[str, int]]
        :param row_colors: list of tuples of (row, background color) OR (row, foreground color, background color). Sets the colors of listed rows to the color(s) provided (note the optional foreground color)
        :type row_colors: List[Union[Tuple[int, str], Tuple[Int, str, str]]
        :param vertical_scroll_only: if True only the vertical scrollbar will be visible
        :type vertical_scroll_only: (bool)
        :param hide_vertical_scroll: if True vertical scrollbar will be hidden
        :type hide_vertical_scroll: (bool)
        :param size: DO NOT USE! Use num_rows instead
        :type size: (int, int)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Table events happen when row is clicked
        :type enable_events: (bool)
        :param bind_return_key: if True, pressing return key will cause event coming from Table, ALSO a left button double click will generate an event if this parameter is True
        :type bind_return_key: (bool)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Update(self, values=..., num_rows=..., visible=..., select_rows=..., alternating_row_color=..., row_colors=...):
        """
        Changes some of the settings for the Table Element. Must call `Window.Read` or `Window.Finalize` prior

        :param values: A new 2-dimensional table to show
        :type values: List[List[Union[str, int, float]]]
        :param num_rows: How many rows to display at a time
        :type num_rows: (int)
        :param visible: if True then will be visible
        :type visible: (bool)
        :param select_rows: List of rows to select as if user did
        :type select_rows: List[int]
        :param alternating_row_color: the color to make every other row
        :type alternating_row_color: (str)
        :param row_colors: list of tuples of (row, background color) OR (row, foreground color, background color). Changes the colors of listed rows to the color(s) provided (note the optional foreground color)
        :type row_colors: List[Union[Tuple[int, str], Tuple[Int, str, str]]
        """
        ...
    
    def Get(self):
        """
        Dummy function for tkinter port.  In the Qt port you can read back the values in the table in case they were
        edited.  Don't know yet how to enable editing of a Tree in tkinter so just returning the values provided by
        user when Table was created or Updated.

        :return: the current table values (for now what was originally provided up updated)
        :rtype: List[List[Any]]
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...
    get = ...


class Tree(Element):
    """
    Tree Element - Presents data in a tree-like manner, much like a file/folder browser.  Uses the TreeData class
    to hold the user's data and pass to the element for display.
    """
    def __init__(self, data=..., headings=..., visible_column_map=..., col_widths=..., col0_width=..., def_col_width=..., auto_size_columns=..., max_col_width=..., select_mode=..., show_expanded=..., change_submits=..., enable_events=..., font=..., justification=..., text_color=..., background_color=..., selected_row_colors=..., header_text_color=..., header_background_color=..., header_font=..., num_rows=..., row_height=..., pad=..., key=..., k=..., tooltip=..., right_click_menu=..., visible=..., metadata=...) -> None:
        """
        :param data: The data represented using a PySimpleGUI provided TreeData class
        :type data: (TreeData)
        :param headings: List of individual headings for each column
        :type headings: List[str]
        :param visible_column_map: Determines if a column should be visible. If left empty, all columns will be shown
        :type visible_column_map: List[bool]
        :param col_widths: List of column widths so that individual column widths can be controlled
        :type col_widths: List[int]
        :param col0_width: Size of Column 0 which is where the row numbers will be optionally shown
        :type col0_width: (int)
        :param def_col_width: default column width
        :type def_col_width: (int)
        :param auto_size_columns: if True, the size of a column is determined  using the contents of the column
        :type auto_size_columns: (bool)
        :param max_col_width: the maximum size a column can be
        :type max_col_width: (int)
        :param select_mode: Use same values as found on Table Element.  Valid values include: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED
        :type select_mode: (enum)
        :param show_expanded: if True then the tree will be initially shown with all nodes completely expanded
        :type show_expanded: (bool)
        :param change_submits: DO NOT USE. Only listed for backwards compat - Use enable_events instead
        :type change_submits: (bool)
        :param enable_events: Turns on the element specific events. Tree events happen when row is clicked
        :type enable_events: (bool)
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param justification: 'left', 'right', 'center' are valid choices
        :type justification: (str)
        :param text_color: color of the text
        :type text_color: (str)
        :param background_color: color of background
        :type background_color: (str)
        :param selected_row_colors: Sets the text color and background color for a selected row. Same format as button colors - tuple ('red', 'yellow') or string 'red on yellow'. Defaults to theme's button color
        :type selected_row_colors: str or Tuple[str, str]
        :param header_text_color: sets the text color for the header
        :type header_text_color: (str)
        :param header_background_color: sets the background color for the header
        :type header_background_color: (str)
        :param header_font: specifies the font family, size, etc
        :type header_font: Union[str, Tuple[str, int]]
        :param num_rows: The number of rows of the table to display at a time
        :type num_rows: (int)
        :param row_height: height of a single row in pixels
        :type row_height: (int)
        :param pad: Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))
        :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
        :type k: Union[str, int, tuple, object]
        :param tooltip: text, that will appear when mouse hovers over the element
        :type tooltip: (str)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: [Union[List[str],str]]]
        :param visible: set visibility state of the element
        :type visible: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def add_treeview_data(self, node):
        """
        Not a user function.  Recursive method that inserts tree data into the tkinter treeview widget.

        :param node: The node to insert.  Will insert all nodes from starting point downward, recursively
        :type node: (TreeData)
        """
        ...
    
    def Update(self, values=..., key=..., value=..., text=..., icon=..., visible=...):
        """
        Changes some of the settings for the Tree Element. Must call `Window.Read` or `Window.Finalize` prior

        :param values: Representation of the tree
        :type values: (TreeData)
        :param key: identifies a particular item in tree to update
        :type key: Union[str, int, tuple, object]
        :param value: sets the node identified by key to a particular value
        :type value: (Any)
        :param text: sets the node identified by ket to this string
        :type text: (str)
        :param icon: can be either a base64 icon or a filename for the icon
        :type icon: Union[bytes, str]
        :param visible: control visibility of element
        :type visible: (bool)
        """
        ...
    
    set_focus = ...
    set_tooltip = ...
    update = ...


class TreeData(object):
    """
    Class that user fills in to represent their tree data. It's a very simple tree representation with a root "Node"
    with possibly one or more children "Nodes".  Each Node contains a key, text to display, list of values to display
    and an icon.  The entire tree is built using a single method, Insert.  Nothing else is required to make the tree.
    """
    class Node(object):
        """
        Contains information about the individual node in the tree
        """
        def __init__(self, parent, key, text, values, icon=...) -> None:
            """
            Represents a node within the TreeData class

            :param parent: The parent Node
            :type parent: (TreeData.Node)
            :param key: Used to uniquely identify this node
            :type key: Union[str, int, tuple, object]
            :param text: The text that is displayed at this node's location
            :type text: (str)
            :param values: The list of values that are displayed at this node
            :type values: List[Any]
            :param icon: just a icon
            :type icon: Union[str, bytes]
            """
            ...
        
    
    
    def __init__(self) -> None:
        """
        Instantiate the object, initializes the Tree Data, creates a root node for you
        """
        ...
    
    def Insert(self, parent, key, text, values, icon=...):
        """
        Inserts a node into the tree. This is how user builds their tree, by Inserting Nodes
        This is the ONLY user callable method in the TreeData class

        :param parent: the parent Node
        :type parent: (Node)
        :param key: Used to uniquely identify this node
        :type key: Union[str, int, tuple, object]
        :param text: The text that is displayed at this node's location
        :type text: (str)
        :param values: The list of values that are displayed at this node
        :type values: List[Any]
        :param icon: icon
        :type icon: Union[str, bytes]
        """
        ...
    
    def __repr__(self):
        """
        Converts the TreeData into a printable version, nicely formatted

        :return: (str) A formatted, text version of the TreeData
        """
        ...
    
    insert = ...


class ErrorElement(Element):
    """
    A "dummy Element" that is returned when there are error conditions, like trying to find an element that's invalid
    """
    def __init__(self, key=..., metadata=...) -> None:
        """
        :param key:  Used with window.FindElement and with return values to uniquely identify this element
        """
        ...
    
    def Update(self, silent_on_error=..., *args, **kwargs):
        """
        Update method for the Error Element, an element that should not be directly used by developer

        :param silent_on_error: if False, then a Popup window will be shown
        :type silent_on_error: (bool)
        :param *args:  meant to "soak up" any normal parameters passed in
        :type *args: (Any)
        :param **kwargs:  meant to "soak up" any keyword parameters that were passed in
        :type **kwargs: (Any)
        :return:  returns 'self' so call can be chained
        :rtype: (ErrorElement)
        """
        ...
    
    def Get(self):
        """
        One of the method names found in other Elements. Used here to return an error string in case it's called

        :return:  A warning text string.
        :rtype: (str)
        """
        ...
    
    get = ...
    set_focus = ...
    set_tooltip = ...
    update = ...


Stretch = ErrorElement
class Window:
    """
    Represents a single Window
    """
    NumOpenWindows = ...
    _user_defined_icon = ...
    hidden_master_root: tk.Tk = ...
    _animated_popup_dict = ...
    _active_windows: Dict[Window: tk.Tk()] = ...
    _move_all_windows = ...
    _window_that_exited: Window = ...
    _root_running_mainloop: tk.Tk() = ...
    _timeout_key = ...
    _TKAfterID = ...
    _window_running_mainloop = ...
    _container_element_counter = ...
    _read_call_from_debugger = ...
    _timeout_0_counter = ...
    multi_window_return_values_queue = ...
    def __init__(self, title, layout=..., default_element_size=..., default_button_element_size=..., auto_size_text=..., auto_size_buttons=..., location=..., size=..., element_padding=..., margins=..., button_color=..., font=..., progress_bar_color=..., background_color=..., border_depth=..., auto_close=..., auto_close_duration=..., icon=..., force_toplevel=..., alpha_channel=..., return_keyboard_events=..., use_default_focus=..., text_justification=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., resizable=..., disable_close=..., disable_minimize=..., right_click_menu=..., transparent_color=..., debugger_enabled=..., right_click_menu_background_color=..., right_click_menu_text_color=..., right_click_menu_disabled_text_color=..., right_click_menu_font=..., finalize=..., element_justification=..., ttk_theme=..., use_ttk_buttons=..., modal=..., metadata=...) -> None:
        """
        :param title: The title that will be displayed in the Titlebar and on the Taskbar
        :type title: (str)
        :param layout: The layout for the window. Can also be specified in the Layout method
        :type layout: List[List[Elements]]
        :param default_element_size: size in characters (wide) and rows (high) for all elements in this window
        :type default_element_size: (int, int) - (width, height)
        :param default_button_element_size: (width, height) size in characters (wide) and rows (high) for all Button elements in this window
        :type default_button_element_size: (int, int)
        :param auto_size_text: True if Elements in Window should be sized to exactly fir the length of text
        :type auto_size_text: (bool)
        :param auto_size_buttons: True if Buttons in this Window should be sized to exactly fit the text on this.
        :type auto_size_buttons: (bool)
        :param location: (x,y) location, in pixels, to locate the upper left corner of the window on the screen. Default is to center on screen.
        :type location: Tuple[int, int]
        :param size: (width, height) size in pixels for this window. Normally the window is autosized to fit contents, not set to an absolute size by the user
        :type size: (int, int)
        :param element_padding: Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom))
        :type element_padding: Tuple[int, int] or ((int, int),(int,int))
        :param margins: (left/right, top/bottom) Amount of pixels to leave inside the window's frame around the edges before your elements are shown.
        :type margins: Tuple[int, int]
        :param button_color: Default button colors for all buttons in the window
        :type button_color: Tuple[str, str] or str
        :param font: specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param progress_bar_color: (bar color, background color) Sets the default colors for all progress bars in the window
        :type progress_bar_color: Tuple[str, str]
        :param background_color: color of background
        :type background_color: (str)
        :param border_depth: Default border depth (width) for all elements in the window
        :type border_depth: (int)
        :param auto_close: If True, the window will automatically close itself
        :type auto_close: (bool)
        :param auto_close_duration: Number of seconds to wait before closing the window
        :type auto_close_duration: (int)
        :param icon: Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO
        :type icon: Union[str, str]
        :param force_toplevel: If True will cause this window to skip the normal use of a hidden master window
        :type force_toplevel: (bool)
        :param alpha_channel: Sets the opacity of the window. 0 = invisible 1 = completely visible. Values bewteen 0 & 1 will produce semi-transparent windows in SOME environments (The Raspberry Pi always has this value at 1 and cannot change.
        :type alpha_channel: (float)
        :param return_keyboard_events: if True key presses on the keyboard will be returned as Events from Read calls
        :type return_keyboard_events: (bool)
        :param use_default_focus: If True will use the default focus algorithm to set the focus to the "Correct" element
        :type use_default_focus: (bool)
        :param text_justification: Default text justification for all Text Elements in window
        :type text_justification: Union['left', 'right', 'center']
        :param no_titlebar: If true, no titlebar nor frame will be shown on window. This means you cannot minimize the window and it will not show up on the taskbar
        :type no_titlebar: (bool)
        :param grab_anywhere: If True can use mouse to click and drag to move the window. Almost every location of the window will work except input fields on some systems
        :type grab_anywhere: (bool)
        :param keep_on_top: If True, window will be created on top of all other windows on screen. It can be bumped down if another window created with this parm
        :type keep_on_top: (bool)
        :param resizable: If True, allows the user to resize the window. Note the not all Elements will change size or location when resizing.
        :type resizable: (bool)
        :param disable_close: If True, the X button in the top right corner of the window will no work.  Use with caution and always give a way out toyour users
        :type disable_close: (bool)
        :param disable_minimize: if True the user won't be able to minimize window.  Good for taking over entire screen and staying that way.
        :type disable_minimize: (bool)
        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.
        :type right_click_menu: List[List[Union[List[str],str]]]
        :param transparent_color: Any portion of the window that has this color will be completely transparent. You can even click through these spots to the window under this window.
        :type transparent_color: (str)
        :param debugger_enabled: If True then the internal debugger will be enabled
        :type debugger_enabled: (bool)
        :param right_click_menu_background_color: Background color for right click menus
        :type right_click_menu_background_color: (str)
        :param right_click_menu_text_color: Text color for right click menus
        :type right_click_menu_text_color: (str)
        :param right_click_menu_disabled_text_color: Text color for disabled right click menu items
        :type right_click_menu_disabled_text_color: (str)
        :param right_click_menu_font: Font for right click menus
        :type right_click_menu_font: Union[str, Tuple[str, int]]
        :param finalize: If True then the Finalize method will be called. Use this rather than chaining .Finalize for cleaner code
        :type finalize: (bool)
        :param element_justification: All elements in the Window itself will have this justification 'left', 'right', 'center' are valid values
        :type element_justification: (str)
        :param ttk_theme: Set the tkinter ttk "theme" of the window.  Default = DEFAULT_TTK_THEME.  Sets all ttk widgets to this theme as their default
        :type ttk_theme: (str)
        :param use_ttk_buttons: Affects all buttons in window. True = use ttk buttons. False = do not use ttk buttons.  None = use ttk buttons only if on a Mac
        :type use_ttk_buttons: (bool)
        :param modal: If True then this window will be the only window a user can interact with until it is closed
        :type modal: (bool)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    @classmethod
    def get_screen_size(self):
        """
        This is a "Class Method" meaning you call it by writing: width, height = Window.get_screen_size()
        Returns the size of the "screen" as determined by tkinter.  This can vary depending on your operating system and the number of monitors installed on your system.  For Windows, the primary monitor's size is returns. On some multi-monitored Linux systems, the monitors are combined and the total size is reported as if one screen.

        :return: Size of the screen in pixels as determined by tkinter
        :rtype: (int, int)
        """
        ...
    
    def AddRow(self, *args):
        """
        Adds a single row of elements to a window's self.Rows variables.
        Generally speaking this is NOT how users should be building Window layouts.
        Users, create a single layout (a list of lists) and pass as a parameter to Window object, or call Window.Layout(layout)

        :param *args: List[Elements]
        """
        ...
    
    def AddRows(self, rows):
        """
        Loops through a list of lists of elements and adds each row, list, to the layout.
        This is NOT the best way to go about creating a window.  Sending the entire layout at one time and passing
        it as a parameter to the Window call is better.

        :param rows: A list of a list of elements
        :type rows: List[List[Elements]]
        """
        ...
    
    def Layout(self, rows):
        """
        Second of two preferred ways of telling a Window what its layout is. The other way is to pass the layout as
        a parameter to Window object.  The parameter method is the currently preferred method. This call to Layout
        has been removed from examples contained in documents and in the Demo Programs. Trying to remove this call
        from history and replace with sending as a parameter to Window.

        :param rows: Your entire layout
        :type rows: List[List[Elements]]
        :return: self so that you can chain method calls
        :rtype: (Window)
        """
        ...
    
    def extend_layout(self, container, rows):
        """
        Adds new rows to an existing container element inside of this window

        :param container: The container Element the layout will be placed inside of
        :type container: (Union[Frame, Column, Tab])
        :param rows: The layout to be added
        :type rows: (List[List[Element]])
        :return: (Window) self so could be chained
        :rtype: (Window)
        """
        ...
    
    def LayoutAndRead(self, rows, non_blocking=...):
        """
        Deprecated!!  Now your layout your window's rows (layout) and then separately call Read.

        :param rows:  The layout of the window
        :type rows: List[List[Element]]
        :param non_blocking:  if True the Read call will not block
        :type non_blocking: (bool)
        """
        ...
    
    def LayoutAndShow(self, rows):
        """
        Deprecated - do not use any longer.  Layout your window and then call Read.  Or can add a Finalize call before the Read
        """
        ...
    
    def SetIcon(self, icon=..., pngbase64=...):
        """
        Changes the icon that is shown on the title bar and on the task bar.
        NOTE - The file type is IMPORTANT and depends on the OS!
        Can pass in:
        * filename which must be a .ICO icon file for windows, PNG file for Linux
        * bytes object
        * BASE64 encoded file held in a variable

        :param icon: Filename or bytes object
        :type icon: (str)
        :param pngbase64: Base64 encoded image
        :type pngbase64: (str)
        """
        ...
    
    def Read(self, timeout=..., timeout_key=..., close=...):
        """
        THE biggest deal method in the Window class! This is how you get all of your data from your Window.
            Pass in a timeout (in milliseconds) to wait for a maximum of timeout milliseconds. Will return timeout_key
            if no other GUI events happen first.

        :param timeout: Milliseconds to wait until the Read will return IF no other GUI events happen first
        :type timeout: (int)
        :param timeout_key: The value that will be returned from the call if the timer expired
        :type timeout_key: (Any)
        :param close: if True the window will be closed prior to returning
        :type close: (bool)
        :return:  (event, values)
        :rtype: Tuple[(Any), Union[Dict[Any:Any]], List[Any], None]
        """
        ...
    
    def Finalize(self):
        """
        Use this method to cause your layout to built into a real tkinter window.  In reality this method is like
        Read(timeout=0).  It doesn't block and uses your layout to create tkinter widgets to represent the elements.
        Lots of action!

        :return:  Returns 'self' so that method "Chaining" can happen (read up about it as it's very cool!)
        :rtype: (Window)
        """
        ...
    
    def Refresh(self):
        """
        Refreshes the window by calling tkroot.update().  Can sometimes get away with a refresh instead of a Read.
        Use this call when you want something to appear in your Window immediately (as soon as this function is called).
        Without this call your changes to a Window will not be visible to the user until the next Read call

        :return: `self` so that method calls can be easily "chained"
        :rtype: (Window)
        """
        ...
    
    def Fill(self, values_dict):
        """
        Fill in elements that are input fields with data based on a 'values dictionary'

        :param values_dict: pairs
        :type values_dict: (Dict[Any:Any]) - {Element_key : value}
        :return: returns self so can be chained with other methods
        :rtype: (Window)
        """
        ...
    
    def FindElement(self, key, silent_on_error=...):
        """
        Find element object associated with the provided key.
        THIS METHOD IS NO LONGER NEEDED to be called by the user

        You can perform the same operation by writing this statement:
        element = window[key]

        You can drop the entire "FindElement" function name and use [ ] instead.

        Typically used in combination with a call to element's Update method (or any other element method!):
        window[key].Update(new_value)

        Versus the "old way"
        window.FindElement(key).Update(new_value)

        This call can be abbreviated to any of these:
        FindElement == Element == Find
        Rememeber that this call will return None if no match is found which may cause your code to crash if not
        checked for.

        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param silent_on_error: If True do not display popup nor print warning of key errors
        :type silent_on_error: (bool)
        :return:  Return value can be: the Element that matches the supplied key if found; an Error Element if silent_on_error is False; None if silent_on_error True;
        :rtype: Union[Element, Error Element, None]
        """
        ...
    
    Element = ...
    Find = ...
    Elem = ...
    def FindElementWithFocus(self):
        """
        Returns the Element that currently has focus as reported by tkinter. If no element is found None is returned!
        :return: An Element if one has been found with focus or None if no element found
        :rtype: Union[Element, None]
        """
        ...
    
    def element_list(self):
        """
        Returns a list of all elements in the window

        :return:  List of all elements in the window and container elements in the window
        :rtype: List[Element]
        """
        ...
    
    def SaveToDisk(self, filename):
        """
        Saves the values contained in each of the input areas of the form. Basically saves what would be returned from a call to Read.  It takes these results and saves them to disk using pickle.
         Note that every element in your layout that is to be saved must have a key assigned to it.

        :param filename: Filename to save the values to in pickled form
        :type filename: str
        """
        ...
    
    def LoadFromDisk(self, filename):
        """
        Restore values from a previous call to SaveToDisk which saves the returned values dictionary in Pickle format

        :param filename: Pickle Filename to load
        :type filename: (str)
        """
        ...
    
    def GetScreenDimensions(self):
        """
        Get the screen dimensions.  NOTE - you must have a window already open for this to work (blame tkinter not me)

        :return: Tuple containing width and height of screen in pixels
        :rtype: Union[Tuple[None, None], Tuple[width, height]]
        """
        ...
    
    def Move(self, x, y):
        """
        Move the upper left corner of this window to the x,y coordinates provided
        :param x: x coordinate in pixels
        :type x: (int)
        :param y: y coordinate in pixels
        :type y: (int)
        """
        ...
    
    def Minimize(self):
        """
        Minimize this window to the task bar
        """
        ...
    
    def Maximize(self):
        """
        Maximize the window. This is done differently on a windows system versus a linux or mac one.  For non-Windows
        the root attribute '-fullscreen' is set to True.  For Windows the "root" state is changed to "zoomed"
        The reason for the difference is the title bar is removed in some cases when using fullscreen option
        """
        ...
    
    def Normal(self):
        """
        Restore a window to a non-maximized state.  Does different things depending on platform.  See Maximize for more.
        """
        ...
    
    def Close(self):
        """
        Closes window.  Users can safely call even if window has been destroyed.   Should always call when done with
        a window so that resources are properly freed up within your thread.
        """
        ...
    
    def Disable(self):
        """
        Disables window from taking any input from the user
        """
        ...
    
    def Enable(self):
        """
        Re-enables window to take user input after having it be Disabled previously
        """
        ...
    
    def Hide(self):
        """
        Hides the window from the screen and the task bar
        """
        ...
    
    def UnHide(self):
        """
        Used to bring back a window that was previously hidden using the Hide method
        """
        ...
    
    def Disappear(self):
        """
        Causes a window to "disappear" from the screen, but remain on the taskbar. It does this by turning the alpha
        channel to 0.  NOTE that on some platforms alpha is not supported. The window will remain showing on these
        platforms.  The Raspberry Pi for example does not have an alpha setting
        """
        ...
    
    def Reappear(self):
        """
        Causes a window previously made to "Disappear" (using that method). Does this by restoring the alpha channel
        """
        ...
    
    def SetAlpha(self, alpha):
        """
        Sets the Alpha Channel for a window.  Values are between 0 and 1 where 0 is completely transparent

        :param alpha: 0 to 1. 0 is completely transparent.  1 is completely visible and solid (can't see through)
        :type alpha: (float)
        """
        ...
    
    @property
    def AlphaChannel(self):
        """
        A property that changes the current alpha channel value (internal value)
        :return: (float) the current alpha channel setting according to self, not read directly from tkinter
        """
        ...
    
    @AlphaChannel.setter
    def AlphaChannel(self, alpha):
        """
        The setter method for this "property".
        Planning on depricating so that a Set call is always used by users. This is more in line with the SDK
        :param alpha: 0 to 1. 0 is completely transparent.  1 is completely visible and solid (can't see through)
        :type alpha: (float)
        """
        ...
    
    def BringToFront(self):
        """
        Brings this window to the top of all other windows (perhaps may not be brought before a window made to "stay
        on top")
        """
        ...
    
    def SendToBack(self):
        """
        Pushes this window to the bottom of the stack of windows. It is the opposite of BringToFront
        """
        ...
    
    def CurrentLocation(self):
        """
        Get the current location of the window's top left corner

        :return: The x and y location in tuple form (x,y)
        :rtype: Tuple[(int), (int)]
        """
        ...
    
    @property
    def Size(self):
        """
        Return the current size of the window in pixels

        :return: (width, height) of the window
        :rtype: Tuple[(int), (int)] or Tuple[None, None]
        """
        ...
    
    @Size.setter
    def Size(self, size):
        """
        Changes the size of the window, if possible

        :param size: (width, height) of the desired window size
        :type size: (int, int)
        """
        ...
    
    def set_min_size(self, size):
        """
        Changes the minimum size of the window. Note Window must be read or finalized first.

        :param size: (width, height) tuple (int, int) of the desired window size in pixels
        :type size: Tuple[int, int]
        """
        ...
    
    def visibility_changed(self):
        """
        When making an element in a column or someplace that has a scrollbar, then you'll want to call this function
        prior to the column's contents_changed() method.
        """
        ...
    
    def SetTransparentColor(self, color):
        """
        Set the color that will be transparent in your window. Areas with this color will be SEE THROUGH.

        :param color: Color string that defines the transparent color
        :type color: (str)
        """
        ...
    
    def GrabAnyWhereOn(self):
        """
        Turns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        ...
    
    def GrabAnyWhereOff(self):
        """
        Turns off Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet
        been Finalized or Read.
        """
        ...
    
    def bind(self, bind_string, key):
        """
        Used to add tkinter events to a Window.
        The tkinter specific data is in the Window's member variable user_bind_event
        :param bind_string: The string tkinter expected in its bind function
        :type bind_string: (str)
        :param key: The event that will be generated when the tkinter event occurs
        :type key: Union[str, int, tuple, object]
        """
        ...
    
    def EnableDebugger(self):
        """
        Enables the internal debugger. By default, the debugger IS enabled
        """
        ...
    
    def DisableDebugger(self):
        """
        Disable the internal debugger. By default the debugger is ENABLED
        """
        ...
    
    def set_title(self, title):
        """
        Change the title of the window

        :param title: The string to set the title to
        :type title: (str)
        """
        ...
    
    def make_modal(self):
        """
        Makes a window into a "Modal Window"
        This means user will not be able to interact with other windows until this one is closed
        """
        ...
    
    def force_focus(self):
        """
        Forces this window to take focus
        """
        ...
    
    def was_closed(self):
        """
        Returns True if the window was closed

        :return: True if the window is closed
        :rtype: bool
        """
        ...
    
    def set_cursor(self, cursor):
        """
        Sets the cursor for the window.
        :param cursor: The tkinter cursor name
        :type cursor: (str)
        """
        ...
    
    def write_event_value(self, key, value):
        """
        Adds a key & value tuple to the queue that is used by threads to communicate with the window

        :param key: The key that will be returned as the event when reading the window
        :type key: Any
        :param value: The value that will be in the values dictionary
        :type value: Any
        """
        ...
    
    def write_multi_window_event_value(self, window, event, value):
        """

        :param window:
        :param event:
        :param value:
        :return:
        """
        ...
    
    def __getitem__(self, key):
        """
        Returns Element that matches the passed in key.
        This is "called" by writing code as thus:
        window['element key'].Update

        :param key: The key to find
        :type key: Union[str, int, tuple, object]
        :return: The element found or None if no element was found
        :rtype: Union[Element, None]
        """
        ...
    
    def __call__(self, *args, **kwargs):
        """
        Call window.Read but without having to type it out.
        window() == window.Read()
        window(timeout=50) == window.Read(timeout=50)

        :return: The famous event, values that Read returns.
        :rtype: Tuple[Any, Dict[Any:Any]]
        """
        ...
    
    add_row = ...
    add_rows = ...
    alpha_channel = ...
    bring_to_front = ...
    close = ...
    current_location = ...
    disable = ...
    disable_debugger = ...
    disappear = ...
    elem = ...
    element = ...
    enable = ...
    enable_debugger = ...
    fill = ...
    finalize = ...
    find = ...
    find_element = ...
    find_element_with_focus = ...
    get_screen_dimensions = ...
    grab_any_where_off = ...
    grab_any_where_on = ...
    hide = ...
    layout = ...
    load_from_disk = ...
    maximize = ...
    minimize = ...
    move = ...
    normal = ...
    read = ...
    reappear = ...
    refresh = ...
    save_to_disk = ...
    send_to_back = ...
    set_alpha = ...
    set_icon = ...
    set_transparent_color = ...
    size = ...
    un_hide = ...
    VisibilityChanged = ...


FlexForm = Window
def read_all_windows(timeout=..., timeout_key=...):
    """
    Reads a list of windows.  If any of the list returns a value then the window and its event and values
    are returned.

    :param timeout: Time in milliseconds to delay before a returning a timeout event
    :type timeout: (int)
    :param timeout_key: Key to return when a timeout happens. Defaults to the standard TIMEOUT_KEY
    :type timeout_key: (Any)
    :return: A tuple with the  (Window, event, values dictionary/list)
    :rtype: Tuple[Window, Any, (Dict or List)]
    """
    ...

SYSTEM_TRAY_WIN_MARGINS = (160, 60)
SYSTEM_TRAY_MESSAGE_MAX_LINE_LENGTH = 50
SYSTEM_TRAY_MESSAGE_WIN_COLOR = "#282828"
SYSTEM_TRAY_MESSAGE_TEXT_COLOR = "#ffffff"
SYSTEM_TRAY_MESSAGE_DISPLAY_DURATION_IN_MILLISECONDS = 3000
SYSTEM_TRAY_MESSAGE_FADE_IN_DURATION = 1000
EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED = '__DOUBLE_CLICKED__'
EVENT_SYSTEM_TRAY_ICON_ACTIVATED = '__ACTIVATED__'
EVENT_SYSTEM_TRAY_MESSAGE_CLICKED = '__MESSAGE_CLICKED__'
_tray_icon_error = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAADlAAAA5QGP5Zs8AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAIpQTFRF////20lt30Bg30pg4FJc409g4FBe4E9f4U9f4U9g4U9f4E9g31Bf4E9f4E9f4E9f4E9f4E9f4FFh4Vdm4lhn42Bv5GNx5W575nJ/6HqH6HyI6YCM6YGM6YGN6oaR8Kev9MPI9cbM9snO9s3R+Nfb+dzg+d/i++vt/O7v/fb3/vj5//z8//7+////KofnuQAAABF0Uk5TAAcIGBktSYSXmMHI2uPy8/XVqDFbAAAA8UlEQVQ4y4VT15LCMBBTQkgPYem9d9D//x4P2I7vILN68kj2WtsAhyDO8rKuyzyLA3wjSnvi0Eujf3KY9OUP+kno651CvlB0Gr1byQ9UXff+py5SmRhhIS0oPj4SaUUCAJHxP9+tLb/ezU0uEYDUsCc+l5/T8smTIVMgsPXZkvepiMj0Tm5txQLENu7gSF7HIuMreRxYNkbmHI0u5Hk4PJOXkSMz5I3nyY08HMjbpOFylF5WswdJPmYeVaL28968yNfGZ2r9gvqFalJNUy2UWmq1Wa7di/3Kxl3tF1671YHRR04dWn3s9cXRV09f3vb1fwPD7z9j1WgeRgAAAABJRU5ErkJggg=='
_tray_icon_success = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAEKAAABCgEWpLzLAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAHJQTFRF////ZsxmbbZJYL9gZrtVar9VZsJcbMRYaMZVasFYaL9XbMFbasRZaMFZacRXa8NYasFaasJaasFZasJaasNZasNYasJYasJZasJZasJZasJZasJZasJYasJZasJZasJZasJZasJaasJZasJZasJZasJZ2IAizQAAACV0Uk5TAAUHCA8YGRobHSwtPEJJUVtghJeYrbDByNjZ2tvj6vLz9fb3/CyrN0oAAADnSURBVDjLjZPbWoUgFIQnbNPBIgNKiwwo5v1fsQvMvUXI5oqPf4DFOgCrhLKjC8GNVgnsJY3nKm9kgTsduVHU3SU/TdxpOp15P7OiuV/PVzk5L3d0ExuachyaTWkAkLFtiBKAqZHPh/yuAYSv8R7XE0l6AVXnwBNJUsE2+GMOzWL8k3OEW7a/q5wOIS9e7t5qnGExvF5Bvlc4w/LEM4Abt+d0S5BpAHD7seMcf7+ZHfclp10TlYZc2y2nOqc6OwruxUWx0rDjNJtyp6HkUW4bJn0VWdf/a7nDpj1u++PBOR694+Ftj/8PKNdnDLn/V8YAAAAASUVORK5CYII='
_tray_icon_halt = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANswNuMPDO8HBO8FCe0HCu4IBu4IB+oLDeoLDu8JC+wKCu4JDO4LDOwKEe4OEO4OEeUQDewQDe0QDucVEuYcG+ccHOsQFuwWHe4fH/EGAvMEBfMFBvAHBPMGBfEGBvYCAfYDAvcDA/cDBPcDBfUDBvYEAPYEAfYEAvYEA/QGAPQGAfQGAvYEBPUEBvYFB/QGBPQGBfQHB/EFCvIHCPMHCfIHC/IFDfMHDPQGCPQGCfQGCvEIBPIIBfAIB/UIB/QICPYICfoBAPoBAfoBAvsBA/kCAPkCAfkCAvkCA/oBBPkCBPkCBfkCBvgCB/gEAPkEAfgEAvkEA/gGAfkGAvkEBPgEBfkEBv0AAP0AAfwAAvwAA/wCAPwCAfwCAvwCA/wABP0ABfwCBfwEAPwFA/ASD/ESFPAUEvAUE/EXFvAdH+kbIOobIeofIfEfIOcmKOohIukgJOggJesiKuwiKewoLe0tLO0oMOQ3OO43Oew4OfAhIPAhIfAiIPEiI+dDRe9ES+lQTOdSWupSUOhTUehSV+hUVu1QUO1RUe1SV+tTWe5SWOxXWOpYV+pZWelYXexaW+xaXO9aX+lZYeNhYOxjZ+lna+psbOttbehsbupscepucuxtcuxucep3fet7e+p/ffB6gOmKiu2Iie2Sk+2Qle2QluySlOyTleuYmvKFivCOjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIxGNZsAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAACVElEQVQ4T22S93PTMBhADQdl791SSsuRARTKKHsn+STZBptAi6zIacous+w9yyxl7z1T1h8ptHLhrrzLD5+/987R2XZElZ/39tZsbGg42NdvF4pqcGMs4XEcozAB/oQeu6wGr5fkAZcKOUIIRgQXR723wgaXt/NSgcwlO1r3oARkATfhbmNMMCnlMZdz5J8RN9fVhglS5JA/pJUOJiYXoShCkz/flheDvpzlBCBmya5KcDG1sMSB+r/VQtG+YoFXlwN0Us4yeBXujPmWCOqNlVwX5zHntLH5iQ420YiqX9pqTZFSCrBGBc+InBUDAsbwLRlMC40fGJT8YLRwfnhY3v6/AUtDc9m5z0tRJBOAvHUaFchdY6+zDzEghHv1tUnrNCaIOw84Q2WQmkeO/Xopj1xFBREFr8ZZjuRhA++PEB+t05ggwBucpbH8i/n5C1ZU0EEEmRZnSMxoIYcarKigA0Cb1zpHAyZnGj21xqICAA9dcvo4UgEdZ41FBZSTzEOn30f6QeE3Vhl0gLN+2RGDzZPMHLHKoAO3MFy+ix4sDxFlvMXfrdNgFezy7qrXPaaJg0u27j5nneKrCjJ4pf4e3m4DVMcjNNNKxWnpo6jtnfnkunExB4GbuGKk5FNanpB1nJCjCsThJPAAJ8lVdSF5sSrklM2ZqmYdiC40G7Dfnhp57ZsQz6c3hylEO6ZoZQJxqiVgbhoQK3T6AIgU4rbjxthAPF6NAwAOAcS+ixlp/WBFJRDi0fj2RtcjWRwif8Qdu/w3EKLcu3/YslnrZzwo24UQQvwFCrp/iM1NnHwAAAAASUVORK5CYII='
_tray_icon_notallowed = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAPcICPcLC/cMDPcQEPcSEvcXF/cYGPcaGvcbG/ccHPgxMfgyMvg0NPg5Ofg6Ovg7O/hBQfhCQvlFRflGRvljY/pkZPplZfpnZ/p2dggEwNYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABE0lEQVQ4T4WT65bDIAiExWbbtN0m3Uua+P4P6g4jGtN4NvNL4DuCCC5WWobe++uwmEmtwNxJUTebcwWCt5jJBwsYcKf3NE4hTOOJxj1FEnBTz4NH6qH2jUcCGr/QLLpkQgHe/6VWJXVqFgBB4yI/KVCkBCoFgPrPHw0CWbwCL8RibBFwzQDQH62/QeAtHQBeADUIDbkF/UnmnkB1ixtERrN3xCgyuF5kMntHTCJXh2vyv+wIdMhvgTeCQJ0C2hBMgSKfZlM1wSLXZ5oqgs8sjSpaCQ2VVlfKhLU6fdZGSvyWz9JMb+NE4jt/Nwfm0yJZSkBpYDg7TcJGrjm0Z7jK0B6P/fHiHK8e9Pp/eSmuf1+vf4x/ralnCN9IrncAAAAASUVORK5CYII='
_tray_icon_stop = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANsAANsBAdsCAtwEBNwFBdwHB9wICNwLC90MDN0NDd0PD90REd0SEt4TE94UFN4WFt4XF94ZGeAjI+AlJeEnJ+EpKeEqKuErK+EsLOEuLuIvL+IyMuIzM+M1NeM2NuM3N+M6OuM8POQ9PeQ+PuQ/P+RAQOVISOVJSeVKSuZLS+ZOTuZQUOZRUedSUudVVehbW+lhYeljY+poaOtvb+twcOtxcetzc+t0dOx3d+x4eOx6eu19fe1+fu2AgO2Cgu6EhO6Ghu6Hh+6IiO6Jie+Kiu+Li++MjO+Nje+Oju+QkPCUlPCVlfKgoPKkpPKlpfKmpvOrq/SurvSxsfSysvW4uPW6uvW7u/W8vPa9vfa+vvbAwPbCwvfExPfFxffGxvfHx/fIyPfJyffKyvjLy/jNzfjQ0PjR0fnS0vnU1PnY2Pvg4Pvi4vvj4/vl5fvm5vzo6Pzr6/3u7v3v7/3x8f3z8/309P719f729v739/74+P75+f76+v77+//8/P/9/f/+/v///wyoUAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABnUlEQVQ4T33S50PTQBgG8D6lzLbsIUv2kD0FFWTvPWTvISDIUBGV1ecvj+8luZTR9P1wSe755XK5O4+hK4gn5bc7DcMBz/InQoMXeVjY4FXuCAtEyLUwQcTcFgq45JYQ4JqbwhMtV8IjeUJDjQ+5paqCyG9srEsGgoUlpeXpIjxA1nfyi2+Jqmo7Q9JeV+ODerpvBQTM8/ySzQ3t+xxoL7h7nJve5jd85M7wJq9McHaT8o6TwBTfIIfHQGzoAZ/YiSTSq8D5dSDQVqFADrJ5KFMLPaKLHQiQMQoscClezdgCB4CXD/jM90izR8g85UaKA3YAn4AejhV189acA5LX+DVOg00gnvfoVX/BRQsgbplNGqzLusgIffx1tDchiyRgdRbVHNdgRRZHQD9H1asm+PMzYyYMtoBU/sYgRxxgrmGtBRL/cnf5RL4zzCEHZF2QE14LoOWf6B9vMcJBG/iBxKo8dVtYnyStv6yuUq7FLfmqTzbLEOFest1GNGEemCjCPnKuwjm0LsLMbRBJWLkGr4WdO+Cl0HkYPBc6N4z//HcQqVwcOuIAAAAASUVORK5CYII='
_tray_icon_exclamation = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAN0zM900NN01Nd02Nt03N944ON45Od46Ot47O98/P99BQd9CQt9DQ+FPT+JSUuJTU+JUVOJVVeJWVuNbW+ReXuVjY+Zra+dxceh4eOl7e+l8fOl+ful/f+qBgeqCguqDg+qFheuJieuLi+yPj+yQkO2Wlu+cnO+hofGqqvGtrfre3vrf3/ri4vvn5/75+f76+v/+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQ8SQkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAABJElEQVQ4T4WS63KCMBBGsyBai62X0otY0aq90ZZa3v/dtpvsJwTijOfXt7tnILOJYY9tNonjNCtQOlqhuKKG0RrNVjgkmIHBHgMId+h7zHSiwg2a9FNVVYScupETmjkd67o+CWpYwft+R6CpCgeUlq5AOyf45+8JsRUKFI6eQLkI3n5CIREBUekLxGaLpATCymRISiAszARJCYSxiZGUQKDLQoqgnPnFhUPOTWeRoZD3FvVZlmVHkE2OEM9iV71GVoZDBGUpAg9QWN5/jx+Ilsi9hz0q4VHOWD+hEF70yc1QEr1a4Q0F0S3eJDfLuv8T4QEFXduZE1rj+et7g6hzCDxF08N+X4DAu+6lUSTnc5wE5tx73ckSTV8QVoux3N88Rykw/wP3i+vwPKk17AAAAABJRU5ErkJggg=='
_tray_icon_none = None
SYSTEM_TRAY_MESSAGE_ICON_INFORMATION = _tray_icon_success
SYSTEM_TRAY_MESSAGE_ICON_WARNING = _tray_icon_exclamation
SYSTEM_TRAY_MESSAGE_ICON_CRITICAL = _tray_icon_stop
SYSTEM_TRAY_MESSAGE_ICON_NOICON = _tray_icon_none
class SystemTray:
    """
    A "Simulated System Tray" that duplicates the API calls available to PySimpleGUIWx and PySimpleGUIQt users.

    All of the functionality works. The icon is displayed ABOVE the system tray rather than inside of it.
    """
    def __init__(self, menu=..., filename=..., data=..., data_base64=..., tooltip=..., metadata=...) -> None:
        """
        SystemTray - create an icon in the system tray
        :param menu: Menu definition. Example - ['UNUSED', ['My', 'Simple', '---', 'Menu', 'Exit']]
        :type menu: List[List[List[str] or str]]
        :param filename: filename for icon
        :type filename: (str)
        :param data: in-ram image for icon (same as data_base64 parm)
        :type data: (bytes)
        :param data_base64: base-64 data for icon
        :type data_base64: (bytes)
        :param tooltip: tooltip string
        :type tooltip: (str)
        :param metadata: User metadata that can be set to ANYTHING
        :type metadata: (Any)
        """
        ...
    
    def Read(self, timeout=...):
        """
        Reads the context menu
        :param timeout: Optional.  Any value other than None indicates a non-blocking read
        :return:
        """
        ...
    
    def Hide(self):
        """
        Hides the icon
        """
        ...
    
    def UnHide(self):
        """
        Restores a previously hidden icon
        """
        ...
    
    def ShowMessage(self, title, message, filename=..., data=..., data_base64=..., messageicon=..., time=...):
        """
        Shows a balloon above icon in system tray
        :param title:  Title shown in balloon
        :type title:
        :param message: Message to be displayed
        :type message:
        :param filename: Optional icon filename
        :type filename:
        :param data: Optional in-ram icon
        :type data:
        :param data_base64: Optional base64 icon
        :type data_base64:
        :param time: Amount of time to display message in milliseconds. If tuple, first item is fade in/out duration
        :type time: Union[int, Tuple[int, int]]
        :return:   The event that happened during the display such as user clicked on message
        :rtype:  (Any)
        """
        ...
    
    def Close(self):
        """
        Close the system tray window
        """
        ...
    
    def Update(self, menu=..., tooltip=..., filename=..., data=..., data_base64=...):
        """
        Updates the menu, tooltip or icon
        :param menu: menu defintion
        :type menu: ???
        :param tooltip: string representing tooltip
        :type tooltip: ???
        :param filename:  icon filename
        :type filename: ???
        :param data:  icon raw image
        :type data: ???
        :param data_base64: icon base 64 image
        :type data_base64: ???
        """
        ...
    
    @classmethod
    def notify(cls, title, message, icon=..., display_duration_in_ms=..., fade_in_duration=..., alpha=..., location=...):
        """
        Displays a "notification window", usually in the bottom right corner of your display.  Has an icon, a title, and a message
        The window will slowly fade in and out if desired.  Clicking on the window will cause it to move through the end the current "phase". For example, if the window was fading in and it was clicked, then it would immediately stop fading in and instead be fully visible.  It's a way for the user to quickly dismiss the window.
        :param title: Text to be shown at the top of the window in a larger font
        :type title: (str)
        :param message: Text message that makes up the majority of the window
        :type message: (str)
        :param icon: A base64 encoded PNG/GIF image or PNG/GIF filename that will be displayed in the window
        :type icon: Union[bytes, str]
        :param display_duration_in_ms: Number of milliseconds to show the window
        :type display_duration_in_ms: (int)
        :param fade_in_duration: Number of milliseconds to fade window in and out
        :type fade_in_duration: (int)
        :param alpha: Alpha channel. 0 - invisible 1 - fully visible
        :type alpha: (float)
        :param location: Location on the screen to display the window
        :type location: Tuple[int, int]
        :return: (int) reason for returning
        :rtype: (int)
        """
        ...
    
    close = ...
    hide = ...
    read = ...
    show_message = ...
    un_hide = ...
    update = ...


def Sizer(h_pixels=..., v_pixels=...):
    """
    "Pushes" out the size of whatever it is placed inside of.  This includes Columns, Frames, Tabs and Windows

    :param h_pixels: number of horizontal pixels
    :type h_pixels: (int)
    :param v_pixels: number of vertical pixels
    :type v_pixels: (int)
    :return: (Column) A column element that has a pad setting set according to parameters
    :rtype: (Column)
    """
    ...

def pin(elem, vertical_alignment=..., shrink=...):
    """
    Pin's an element provided into a layout so that when it's made invisible and visible again, it will
     be in the correct place.  Otherwise it will be placed at the end of its containing window/column.

    :param elem: the element to put into the layout
    :type elem: Element
    :param vertical_alignment: Aligns elements vertically. 'top', 'center', 'bottom'. Can be shortened to 't', 'c', 'b'
    :type vertical_alignment: Union[str, None]
    :param shrink: If True, then the space will shrink down to a single pixel when hidden. False leaves the area large and blank
    :type shrink: bool
    :return: A column element containing the provided element
    :rtype: Column
    """
    ...

def vtop(elem_or_row):
    """
    Align an element or a row of elements to the top of the row that contains it

    :param elem_or_row: the element or row of elements
    :type elem_or_row: Union[Element, List[Element], Tuple[Element]]
    :return: A column element containing the provided element aligned to the top or list of elements (a row)
    :rtype: Union[Column, List[Column]]
    """
    ...

def vcenter(elem_or_row):
    """
    Align an element or a row of elements to the center of the row that contains it

    :param elem_or_row: the element or row of elements
    :type elem_or_row: Union[Element, List[Element], Tuple[Element]]
    :return: A column element containing the provided element aligned to the center or list of elements (a row)
    :rtype: Union[Column, List[Column]]
    """
    ...

def vbottom(elem_or_row):
    """
    Align an element or a row of elements to the bottom of the row that contains it

    :param elem_or_row: the element or row of elements
    :type elem_or_row: Union[Element, List[Element], Tuple[Element]]
    :return: A column element containing the provided element aligned to the bottom or list of elements (a row)
    :rtype: Union[Column, List[Column]]
    """
    ...

def FolderBrowse(button_text=..., target=..., initial_folder=..., tooltip=..., size=..., auto_size_button=..., button_color=..., disabled=..., change_submits=..., enable_events=..., font=..., pad=..., key=..., k=..., metadata=...):
    """
    :param button_text: text in the button (Default value = 'Browse')
    :type button_text: (str)
    :param target:  target for the button (Default value = (ThisRow, -1))
    :type target: key or (row,col)
    :param initial_folder:  starting path for folders and files
    :type initial_folder: (str)
    :param tooltip:  text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param change_submits: If True, pressing Enter key submits window (Default = False)
    :type enable_events: (bool)
    :param enable_events: Turns on the element specific events.(Default = False)
    :type enable_events: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param pad:  Amount of padding to put around element
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key:  Used with window.FindElement and with return values to uniquely identify this element
    :type key: Union[str, int, tuple, object]  
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: The Button created
    :rtype: (Button)
    """
    ...

def FileBrowse(button_text=..., target=..., file_types=..., initial_folder=..., tooltip=..., size=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., disabled=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Browse')
    :type button_text: (str)
    :param target: key or (row,col) target for the button (Default value = (ThisRow, -1))
    :param file_types: filter file types (Default value = (("ALL Files", "*.*")))
    :type file_types: Tuple[Tuple[str, str], ...]
    :param initial_folder:  starting path for folders and files
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param change_submits: If True, pressing Enter key submits window (Default = False)
    :type change_submits: (bool)
    :param enable_events: Turns on the element specific events.(Default = False)
    :type enable_events: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def FilesBrowse(button_text=..., target=..., file_types=..., disabled=..., initial_folder=..., tooltip=..., size=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., key=..., k=..., metadata=...):
    """
    Allows browsing of multiple files. File list is returned as a single list with the delimeter defined using the variable
    BROWSE_FILES_DELIMETER.  This defaults to ';' but is changable by the user

    :param button_text: text in the button (Default value = 'Browse')
    :type button_text: (str)
    :param target: key or (row,col) target for the button (Default value = (ThisRow, -1))
    :param file_types:  (Default value = (("ALL Files", "*.*")))
    :type file_types: Tuple[Tuple[str, str], ...]
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param initial_folder:  starting path for folders and files
    :type initial_folder: (str)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param change_submits: If True, pressing Enter key submits window (Default = False)
    :type change_submits: (bool)
    :param enable_events: Turns on the element specific events.(Default = False)
    :type enable_events: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def FileSaveAs(button_text=..., target=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., tooltip=..., size=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Save As...')
    :type button_text: (str)
    :param target: key or (row,col) target for the button (Default value = (ThisRow, -1))
    :param file_types:  (Default value = (("ALL Files", "*.*")))
    :type file_types: Tuple[Tuple[str, str], ...]
    :param default_extension:  If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension: (str)
    :param initial_folder:  starting path for folders and files
    :type initial_folder: (str)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param change_submits: If True, pressing Enter key submits window (Default = False)
    :type change_submits: (bool)
    :param enable_events: Turns on the element specific events.(Default = False)
    :type enable_events: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def SaveAs(button_text=..., target=..., file_types=..., initial_folder=..., default_extension=..., disabled=..., tooltip=..., size=..., auto_size_button=..., button_color=..., change_submits=..., enable_events=..., font=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Save As...')
    :type button_text: (str)
    :param target: key or (row,col) target for the button (Default value = (ThisRow, -1))
    :param file_types:  (Default value = (("ALL Files", "*.*")))
    :type file_types: Tuple[Tuple[str, str], ...]
    :param default_extension:  If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension: (str)
    :param initial_folder:  starting path for folders and files
    :type initial_folder: (str)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param change_submits: If True, pressing Enter key submits window (Default = False)
    :type change_submits: (bool)
    :param enable_events: Turns on the element specific events.(Default = False)
    :type enable_events: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Save(button_text=..., size=..., auto_size_button=..., button_color=..., bind_return_key=..., disabled=..., tooltip=..., font=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Save')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Submit(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Submit')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Open(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Open')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def OK(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'OK')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Ok(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., bind_return_key=..., tooltip=..., font=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Ok')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Cancel(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Cancel')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Quit(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Quit')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Exit(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Exit')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Yes(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Yes')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = True) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def No(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., tooltip=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'No')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Help(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., font=..., tooltip=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = 'Help')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def Debug(button_text=..., size=..., auto_size_button=..., button_color=..., disabled=..., font=..., tooltip=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button (Default value = '')
    :type button_text: (str)
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param metadata: Anything you want to store along with this button
    :type metadata: (Any)
    :return: returns a button
    :rtype: (Button)
    """
    ...

def SimpleButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button
    :type button_text: (str)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size: (Default = (None))
    :param image_subsample:amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

def CloseButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button
    :type button_text: (str)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size: (Default = (None))
    :param image_subsample:amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :return: returns a button
    :rtype: (Button)
    """
    ...

CButton = CloseButton
def ReadButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., auto_size_button=..., button_color=..., font=..., bind_return_key=..., disabled=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """
    :param button_text: text in the button
    :type button_text: (str)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size: (Default = (None))
    :param image_subsample:amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param focus: if focus should be set to this
    :type focus: idk_yetReally
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param border_width: width of border around element
    :type border_width: (int)
    :param metadata: Anything you want to store along with this button
    :type metadata: (Any)
    :return: Button created
    :rtype: (Button)
    """
    ...

ReadFormButton = ReadButton
RButton = ReadFormButton
def RealtimeButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., auto_size_button=..., button_color=..., font=..., disabled=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button
    :type button_text: (str)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size: (Default = (None))
    :param image_subsample:amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :type focus: (bool)
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param border_width: width of border around element
    :type border_width: (int)
    :param metadata: Anything you want to store along with this button
    :type metadata: (Any)
    :return: Button created
    :rtype: (Button)
    """
    ...

def DummyButton(button_text, image_filename=..., image_data=..., image_size=..., image_subsample=..., border_width=..., tooltip=..., size=..., auto_size_button=..., button_color=..., font=..., disabled=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button
    :type button_text: (str)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size: (Default = (None))
    :param image_subsample:amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: if focus should be set to this
    :type focus: (bool)
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param metadata: Anything you want to store along with this button
    :type metadata: (Any)
    :param border_width: width of border around element
    :type border_width: (int)
    :return: returns a button
    :rtype: (Button)
    """
    ...

def CalendarButton(button_text, target=..., close_when_date_chosen=..., default_date_m_d_y=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., tooltip=..., border_width=..., size=..., auto_size_button=..., button_color=..., disabled=..., font=..., bind_return_key=..., focus=..., pad=..., enable_events=..., key=..., k=..., locale=..., format=..., begin_at_sunday_plus=..., month_names=..., day_abbreviations=..., title=..., no_titlebar=..., location=..., metadata=...):
    """
    Button that will show a calendar chooser window.  Fills in the target element with result

    :param button_text: text in the button
    :type button_text: (str)
    :param target: Key or "coordinate" (see docs) of target element
    :type target: Union[(int, int), Any]
    :param close_when_date_chosen:  (Default = True)
    :type close_when_date_chosen:  bool
    :param default_date_m_d_y:  Beginning date to show
    :type default_date_m_d_y:  (int, int or None, int)
    :param image_filename: image filename if there is a button image
    :type image_filename: image filename if there is a button image
    :param image_data: in-RAM image to be displayed on button
    :type image_data: in-RAM image to be displayed on button
    :param image_size: image size (O.K.)
    :type image_size:  (Default = (None))
    :param image_subsample: amount to reduce the size of the image
    :type image_subsample: amount to reduce the size of the image
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param border_width:  width of border around element
    :type border_width:  width of border around element
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: (Default = False) If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: bool
    :param focus: if focus should be set to this
    :type focus: bool
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param locale: defines the locale used to get day names
    :type locale: str
    :param format: formats result using this strftime format
    :type format: str
    :param month_names: optional list of month names to use (should be 12 items)
    :type month_names: List[str]
    :param day_abbreviations: optional list of abbreviations to display as the day of week
    :type day_abbreviations: List[str]
    :param title: Title shown on the date chooser window
    :type title: (str)
    :param no_titlebar: if True no titlebar will be shown on the date chooser window
    :type no_titlebar: bool
    :param location: Location on the screen (x,y) to show the calendar popup window
    :type location: (int, int)
    :param metadata: Anything you want to store along with this button
    :type metadata: (Any)
    :return: returns a button
    :rtype: (Button)
    """
    ...

def ColorChooserButton(button_text, target=..., image_filename=..., image_data=..., image_size=..., image_subsample=..., tooltip=..., border_width=..., size=..., auto_size_button=..., button_color=..., disabled=..., font=..., bind_return_key=..., focus=..., pad=..., key=..., k=..., metadata=...):
    """

    :param button_text: text in the button
    :type button_text: (str)
    :param target: key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button
    :type target: Union[str, Tuple[int, int]]
    :type image_filename: (str)
    :param image_filename: image filename if there is a button image. GIFs and PNGs only.
    :type image_filename: (str)
    :param image_data: Raw or Base64 representation of the image to put on button. Choose either filename or data
    :type image_data: Union[bytes, str]
    :param image_size: Size of the image in pixels (width, height)
    :type image_size: (int, int)
    :param image_subsample: amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc
    :type image_subsample: (int)
    :param tooltip: text, that will appear when mouse hovers over the element
    :type tooltip: (str)
    :param border_width:  width of border around element
    :type border_width: (int)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param auto_size_button:  True if button size is determined by button text
    :type auto_size_button: (bool)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param disabled: set disable state for element (Default = False)
    :type disabled: (bool)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param bind_return_key: If True, then the return key will cause a the Listbox to generate an event
    :type bind_return_key: (bool)
    :param focus: Determines if initial focus should go to this element.
    :type focus: (bool)
    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int)
    :param key: key for uniquely identify this element (for window.FindElement)
    :type key: Union[str, int, tuple, object]
    :param k: Same as the Key. You can use either k or key. Which ever is set will be used.
    :type k: Union[str, int, tuple, object]
    :param metadata: User metadata that can be set to ANYTHING
    :type metadata: (Any)
    :return: returns a button
    :rtype: (Button)
    """
    ...

def AddToReturnDictionary(form, element, value):
    ...

def AddToReturnList(form, value):
    ...

def InitializeResults(form):
    ...

def DecodeRadioRowCol(RadValue):
    ...

def EncodeRadioRowCol(container, row, col):
    ...

def FillFormWithValues(window, values_dict):
    """
    Fills a window with values provided in a values dictionary { element_key : new_value }

    :param window:  The window object to fill
    :type window: (Window)
    :param values_dict:  A dictionary with element keys as key and value is values parm for Update call
    :type values_dict: (Dict[Any:Any])
    :return: None
    :rtype: None
    """
    ...

def AddMenuItem(top_menu, sub_menu_info, element, is_sub_menu=..., skip=..., right_click_menu=...):
    """
    Only to be used internally. Not user callable
    :param top_menu: ???
    :type top_menu: ???
    :param sub_menu_info: ???
    :param element: ???
    :type element: idk_yetReally
    :param is_sub_menu:  (Default = False)
    :type is_sub_menu: (bool)
    :param skip:  (Default = False)
    :type skip: (bool)

    """
    ...

class VarHolder(object):
    canvas_holder = ...
    def __init__(self) -> None:
        ...
    


def PackFormIntoFrame(form, containing_frame, toplevel_form):
    """

    :param form: a window class
    :type form: (Window)
    :param containing_frame: ???
    :type containing_frame: ???
    :param toplevel_form: ???
    :type toplevel_form: (Window)

    """
    ...

def StartupTK(window):
    """
    NOT user callable
    Creates the window (for real) lays out all the elements, etc.  It's a HUGE set of things it does.  It's the basic
    "porting layer" that will change depending on the GUI framework PySimpleGUI is running on top of.

    :param window: you window object
    :type window: (Window)

    """
    ...

def ConvertArgsToSingleString(*args):
    """

    :param *args:

    """
    ...

METER_REASON_CANCELLED = 'cancelled'
METER_REASON_CLOSED = 'closed'
METER_REASON_REACHED_MAX = 'finished'
METER_OK = True
METER_STOPPED = False
class QuickMeter(object):
    active_meters = ...
    exit_reasons = ...
    def __init__(self, title, current_value, max_value, key, *args, orientation=..., bar_color=..., button_color=..., size=..., border_width=..., grab_anywhere=..., no_titlebar=...) -> None:
        """

        :param title: text to display in element
        :type title: (str)
        :param current_value: current value
        :type current_value: (int)
        :param max_value: max value of QuickMeter
        :type max_value: (int)
        :param key:  Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple, object]
        :param *args: stuff to output
        :type *args: (Any)
        :param orientation:  'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical' / 'v')
        :type orientation: (str)
        :param bar_color:  color of a bar line
        :type bar_color: Tuple[str, str]
        :param button_color: button color (foreground, background)
        :type button_color: Tuple[str, str] or str
        :param size:  (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)
        :type size: (int, int)
        :param border_width:  width of border around element
        :type border_width: (int)
        :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
        :type grab_anywhere: (bool)
        :param no_titlebar: If True: window will be created without a titlebar
        :type no_titlebar: (bool)
        """
        ...
    
    def BuildWindow(self, *args):
        ...
    
    def UpdateMeter(self, current_value, max_value, *args):
        ...
    
    def ComputeProgressStats(self):
        ...
    


def OneLineProgressMeter(title, current_value, max_value, key=..., *args, orientation=..., bar_color=..., button_color=..., size=..., border_width=..., grab_anywhere=..., no_titlebar=...):
    """
    :param title: text to display in eleemnt
    :type title: (str)
    :param current_value: current value
    :type current_value: (int)
    :param max_value: max value of QuickMeter
    :type max_value: (int)
    :param key:  Used to differentiate between mutliple meters. Used to cancel meter early. Now optional as there is a default value for single meters
    :type key: Union[str, int, tuple, object]
    :param *args: stuff to output
    :type *args: (Any)
    :param orientation:  'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical' / 'v')
    :type orientation: (str)
    :param bar_color:  color of a bar line
    :type bar_color: Tuple(str, str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param size:  (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)
    :type size: (int, int)
    :param border_width:  width of border around element
    :type border_width: (int)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param no_titlebar: If True: no titlebar will be shown on the window
    :type no_titlebar: (bool)
    :return: True if updated successfully. False if user closed the meter with the X or Cancel button
    :rtype: (bool)
    """
    ...

def OneLineProgressMeterCancel(key=...):
    """
    Cancels and closes a previously created One Line Progress Meter window

    :param key:  Key used when meter was created
    :type key: (Any)
    :return: None
    :rtype: None
    """
    ...

def GetComplimentaryHex(color):
    """
    :param color: color string, like "#RRGGBB"
    :type color: (str)
    :return: color string, like "#RRGGBB"
    :rtype: (str)
    """
    ...

class _DebugWin:
    debug_window = ...
    def __init__(self, size=..., location=..., font=..., no_titlebar=..., no_button=..., grab_anywhere=..., keep_on_top=..., do_not_reroute_stdout=...) -> None:
        """

        :param size:  (w,h) w=characters-wide, h=rows-high
        :type size: (int, int)
        :param location:  Location of upper left corner of the window
        :type location: Tuple[int, int]
        :param font:  specifies the font family, size, etc
        :type font: Union[str, Tuple[str, int]]
        :param no_titlebar: If True no titlebar will be shown
        :type no_titlebar: (bool)

        :param no_button: show button
        :type no_button: (bool)

        :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
        :type grab_anywhere: (bool)

        :param location:  Location of upper left corner of the window
        :type location: Tuple[int, int]
        :param do_not_reroute_stdout: bool value
        :type do_not_reroute_stdout: (bool)
        :rtype: (None)
        """
        ...
    
    def Print(self, *args, end=..., sep=..., text_color=..., background_color=...):
        ...
    
    def Close(self):
        ...
    


def PrintClose():
    """
    Close a previously opened EasyPrint window
    """
    ...

def EasyPrint(*args, size=..., end=..., sep=..., location=..., font=..., no_titlebar=..., no_button=..., grab_anywhere=..., keep_on_top=..., do_not_reroute_stdout=..., text_color=..., background_color=...):
    """
    Works like a "print" statement but with windowing options.  Routes output to the "Debug Window"

    :param *args: stuff to output
    :type *args: (Any)
    :param size: (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param end: end character
    :type end: (str)
    :param sep: separator character
    :type sep: (str)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param no_button: don't show button
    :type no_button: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param do_not_reroute_stdout: do not reroute stdout
    :type do_not_reroute_stdout: (bool)
    :return:
    :rtype:
    """
    ...

Print = EasyPrint
eprint = EasyPrint
def EasyPrintClose():
    """
    Close a previously opened EasyPrint window

    :return:
    :rtype:
    """
    ...

CPRINT_DESTINATION_WINDOW = None
CPRINT_DESTINATION_MULTILINE_ELMENT_KEY = None
def cprint_set_output_destination(window, multiline_key):
    """
    Sets up the color print (cprint) output destination
    :param window: The window that the cprint call will route the output to
    :type window: (Window)
    :param multiline_key: Key for the Multiline Element where output will be sent
    :type multiline_key: (Any)
    :return: None
    :rtype: None
    """
    ...

def cprint(*args, end=..., sep=..., text_color=..., t=..., background_color=..., b=..., colors=..., c=..., window=..., key=..., justification=...):
    """
    Color print to a multiline element in a window of your choice.
    Must have EITHER called cprint_set_output_destination prior to making this call so that the
    window and element key can be saved and used here to route the output, OR used the window
    and key parameters to the cprint function to specicy these items.

    args is a variable number of things you want to print.

    end - The end char to use just like print uses
    sep - The separation character like print uses
    text_color - The color of the text
            key - overrides the previously defined Multiline key
    window - overrides the previously defined window to output to
    background_color - The color of the background
    colors -(str, str) or str.  A combined text/background color definition in a single parameter

    There are also "aliases" for text_color, background_color and colors (t, b, c)
    t - An alias for color of the text (makes for shorter calls)
    b - An alias for the background_color parameter
    c - Tuple[str, str] - "shorthand" way of specifying color. (foreground, backgrouned)
    c - str - can also be a string of the format "foreground on background"  ("white on red")

    With the aliases it's possible to write the same print but in more compact ways:
    cprint('This will print white text on red background', c=('white', 'red'))
    cprint('This will print white text on red background', c='white on red')
    cprint('This will print white text on red background', text_color='white', background_color='red')
    cprint('This will print white text on red background', t='white', b='red')

    :param *args: stuff to output
    :type *args: (Any)
    :param text_color: Color of the text
    :type text_color: (str)
    :param background_color: The background color of the line
    :type background_color: (str)
    :param colors: Either a tuple or a string that has both the text and background colors
    :type colors: (str) or Tuple[str, str]
    :param t: Color of the text
    :type t: (str)
    :param b: The background color of the line
    :type b: (str)
    :param c: Either a tuple or a string that has both the text and background colors
    :type c: (str) or Tuple[str, str]
    :param end: end character
    :type end: (str)
    :param sep: separator character
    :type sep: (str)
    :param key: key of multiline to output to (if you want to override the one previously set)
    :type key: (Any)
    :param window: Window containing the multiline to output to (if you want to override the one previously set)
    :param justification: text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element
    :type justification: (str)
    :type window: (Window)
    :return: None
    :rtype: None
    """
    ...

def SetGlobalIcon(icon):
    """
    Sets the icon which will be used any time a window is created if an icon is not provided when the
    window is created.

    :param icon: Either a Base64 byte string or a filename
    :type icon: Union[bytes, str]
    :return: None
    :rtype: None
    """
    ...

def SetOptions(icon=..., button_color=..., element_size=..., button_element_size=..., margins=..., element_padding=..., auto_size_text=..., auto_size_buttons=..., font=..., border_width=..., slider_border_width=..., slider_relief=..., slider_orientation=..., autoclose_time=..., message_box_line_width=..., progress_meter_border_depth=..., progress_meter_style=..., progress_meter_relief=..., progress_meter_color=..., progress_meter_size=..., text_justification=..., background_color=..., element_background_color=..., text_element_background_color=..., input_elements_background_color=..., input_text_color=..., scrollbar_color=..., text_color=..., element_text_color=..., debug_win_size=..., window_location=..., error_button_color=..., tooltip_time=..., tooltip_font=..., use_ttk_buttons=..., ttk_theme=..., suppress_error_popups=..., suppress_raise_key_errors=..., suppress_key_guessing=..., enable_treeview_869_patch=..., enable_mac_notitlebar_patch=...):
    """
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param button_color: Color of the button (text, background)
    :type button_color: Tuple[str, str] or str
    :param element_size: element size (width, height) in characters
    :type element_size: (int, int)
    :param button_element_size: Size of button
    :type button_element_size: (int, int)
    :param margins: (left/right, top/bottom) tkinter margins around outsize. Amount of pixels to leave inside the window's frame around the edges before your elements are shown.
    :type margins: Tuple[int, int]
    :param element_padding: Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom))
    :type element_padding: Tuple[int, int] or ((int, int),(int,int))
    :param auto_size_text: True if the Widget should be shrunk to exactly fit the number of chars to show
    :type auto_size_text: bool
    :param auto_size_buttons: True if Buttons in this Window should be sized to exactly fit the text on this.
    :type auto_size_buttons: (bool)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param border_width:  width of border around element
    :type border_width: (int)
    :param slider_border_width: ???
    :type slider_border_width: ???
    :param slider_relief: ???
    :type slider_relief: ???
    :param slider_orientation: ???
    :type slider_orientation: ???
    :param autoclose_time: ???
    :type autoclose_time: ???
    :param message_box_line_width: ???
    :type message_box_line_width: ???
    :param progress_meter_border_depth: ???
    :type progress_meter_border_depth: ???

    :param progress_meter_style:  You can no longer set a progress bar style. All ttk styles must be the same for the window
    :type progress_meter_style: ???
    :param progress_meter_relief:
    :type progress_meter_relief: ???
    :param progress_meter_color: ???
    :type progress_meter_color: ???
    :param progress_meter_size: ???
    :type progress_meter_size: ???
    :param text_justification: Default text justification for all Text Elements in window
    :type text_justification: Union['left', 'right', 'center']
    :param background_color: color of background
    :type background_color: (str)
    :param element_background_color: element background color
    :type element_background_color: (str)
    :param text_element_background_color: text element background color
    :type text_element_background_color: (str)
    :param input_elements_background_color: ???
    :type input_elements_background_color: idk_yetReally
    :param input_text_color: ???
    :type input_text_color: ???
    :param scrollbar_color: ???
    :type scrollbar_color: ???
    :param text_color: color of the text
    :type text_color: (str)
    :param element_text_color: ???
    :type element_text_color: ???
    :param debug_win_size: window size
    :type debug_win_size:  Tuple[int, int]
    :param window_location:  (Default = (None))
    :type window_location: ???
    :param error_button_color:  (Default = (None))
    :type error_button_color: ???
    :param tooltip_time:  time in milliseconds to wait before showing a tooltip. Default is 400ms
    :type tooltip_time: (int)
    :param tooltip_font:  font to use for all tooltips
    :type tooltip_font: str or Tuple[str, int] or Tuple[str, int, str]
    :param use_ttk_buttons: if True will cause all buttons to be ttk buttons
    :type use_ttk_buttons: (bool)
    :param ttk_theme: Theme to use with ttk widgets.  Choices (on Windows) include - 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'
    :type ttk_theme:  (str)
    :param suppress_error_popups: If True then error popups will not be shown if generated internally to PySimpleGUI
    :type suppress_error_popups:  (bool)
    :param suppress_raise_key_errors: If True then key errors won't be raised (you'll still get popup error)
    :type suppress_raise_key_errors:  (bool)
    :param suppress_key_guessing: If True then key errors won't try and find closest matches for you
    :type suppress_key_guessing:  (bool)
    :param enable_treeview_869_patch: If True, then will use the treeview color patch for tk 8.6.9
    :type enable_treeview_869_patch:  (bool)
    :param enable_mac_notitlebar_patch: If True then Windows with no titlebar use an alternative technique when tkinter version < 8.6.10
    :type enable_mac_notitlebar_patch:  (bool)
    :return: None
    :rtype: None
    """
    ...

def get_globals():
    """
    Returns the dictionary of the global variables

    :return: the gobals dictionary
    :rtype: Dict[str, Any]
    """
    ...

LOOK_AND_FEEL_TABLE = { "SystemDefault": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"SystemDefaultForReal": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": COLOR_SYSTEM_DEFAULT,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"SystemDefault1": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": COLOR_SYSTEM_DEFAULT,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"Material1": { "BACKGROUND": "#E3F2FD","TEXT": "#000000","INPUT": "#86A8FF","TEXT_INPUT": "#000000","SCROLL": "#86A8FF","BUTTON": ("#FFFFFF", "#5079D3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 0,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#FF0266","ACCENT2": "#FF5C93","ACCENT3": "#C5003C" },"Material2": { "BACKGROUND": "#FAFAFA","TEXT": "#000000","INPUT": "#004EA1","TEXT_INPUT": "#FFFFFF","SCROLL": "#5EA7FF","BUTTON": ("#FFFFFF", "#0079D3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 0,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#FF0266","ACCENT2": "#FF5C93","ACCENT3": "#C5003C" },"Reddit": { "BACKGROUND": "#ffffff","TEXT": "#1a1a1b","INPUT": "#dae0e6","TEXT_INPUT": "#222222","SCROLL": "#a5a4a4","BUTTON": ("#FFFFFF", "#0079d3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#ff5414","ACCENT2": "#33a8ff","ACCENT3": "#dbf0ff" },"Topanga": { "BACKGROUND": "#282923","TEXT": "#E7DB74","INPUT": "#393a32","TEXT_INPUT": "#E7C855","SCROLL": "#E7C855","BUTTON": ("#E7C855", "#284B5A"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#c15226","ACCENT2": "#7a4d5f","ACCENT3": "#889743" },"GreenTan": { "BACKGROUND": "#9FB8AD","TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": "#F7F3EC","TEXT_INPUT": "#000000","SCROLL": "#F7F3EC","BUTTON": ("#FFFFFF", "#475841"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Dark": { "BACKGROUND": "#404040","TEXT": "#FFFFFF","INPUT": "#4D4D4D","TEXT_INPUT": "#FFFFFF","SCROLL": "#707070","BUTTON": ("#FFFFFF", "#004F00"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightGreen": { "BACKGROUND": "#B7CECE","TEXT": "#000000","INPUT": "#FDFFF7","TEXT_INPUT": "#000000","SCROLL": "#FDFFF7","BUTTON": ("#FFFFFF", "#658268"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"ACCENT1": "#76506d","ACCENT2": "#5148f1","ACCENT3": "#0a1c84","PROGRESS_DEPTH": 0 },"Dark2": { "BACKGROUND": "#404040","TEXT": "#FFFFFF","INPUT": "#FFFFFF","TEXT_INPUT": "#000000","SCROLL": "#707070","BUTTON": ("#FFFFFF", "#004F00"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Black": { "BACKGROUND": "#000000","TEXT": "#FFFFFF","INPUT": "#4D4D4D","TEXT_INPUT": "#FFFFFF","SCROLL": "#707070","BUTTON": ("#000000", "#FFFFFF"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Tan": { "BACKGROUND": "#fdf6e3","TEXT": "#268bd1","INPUT": "#eee8d5","TEXT_INPUT": "#6c71c3","SCROLL": "#eee8d5","BUTTON": ("#FFFFFF", "#063542"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"TanBlue": { "BACKGROUND": "#e5dece","TEXT": "#063289","INPUT": "#f9f8f4","TEXT_INPUT": "#242834","SCROLL": "#eee8d5","BUTTON": ("#FFFFFF", "#063289"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkTanBlue": { "BACKGROUND": "#242834","TEXT": "#dfe6f8","INPUT": "#97755c","TEXT_INPUT": "#FFFFFF","SCROLL": "#a9afbb","BUTTON": ("#FFFFFF", "#063289"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkAmber": { "BACKGROUND": "#2c2825","TEXT": "#fdcb52","INPUT": "#705e52","TEXT_INPUT": "#fdcb52","SCROLL": "#705e52","BUTTON": ("#000000", "#fdcb52"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlue": { "BACKGROUND": "#1a2835","TEXT": "#d1ecff","INPUT": "#335267","TEXT_INPUT": "#acc2d0","SCROLL": "#1b6497","BUTTON": ("#000000", "#fafaf8"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Reds": { "BACKGROUND": "#280001","TEXT": "#FFFFFF","INPUT": "#d8d584","TEXT_INPUT": "#000000","SCROLL": "#763e00","BUTTON": ("#000000", "#daad28"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Green": { "BACKGROUND": "#82a459","TEXT": "#000000","INPUT": "#d8d584","TEXT_INPUT": "#000000","SCROLL": "#e3ecf3","BUTTON": ("#FFFFFF", "#517239"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"BluePurple": { "BACKGROUND": "#A5CADD","TEXT": "#6E266E","INPUT": "#E0F5FF","TEXT_INPUT": "#000000","SCROLL": "#E0F5FF","BUTTON": ("#FFFFFF", "#303952"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Purple": { "BACKGROUND": "#B0AAC2","TEXT": "#000000","INPUT": "#F2EFE8","SCROLL": "#F2EFE8","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#C2D4D8"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"BlueMono": { "BACKGROUND": "#AAB6D3","TEXT": "#000000","INPUT": "#F1F4FC","SCROLL": "#F1F4FC","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#7186C7"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"GreenMono": { "BACKGROUND": "#A8C1B4","TEXT": "#000000","INPUT": "#DDE0DE","SCROLL": "#E3E3E3","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#6D9F85"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"BrownBlue": { "BACKGROUND": "#64778d","TEXT": "#FFFFFF","INPUT": "#f0f3f7","SCROLL": "#A6B2BE","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#283b5b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"BrightColors": { "BACKGROUND": "#b4ffb4","TEXT": "#000000","INPUT": "#ffff64","SCROLL": "#ffb482","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#ffa0dc"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"NeutralBlue": { "BACKGROUND": "#92aa9d","TEXT": "#000000","INPUT": "#fcfff6","SCROLL": "#fcfff6","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#d0dbbd"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Kayak": { "BACKGROUND": "#a7ad7f","TEXT": "#000000","INPUT": "#e6d3a8","SCROLL": "#e6d3a8","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#5d907d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"SandyBeach": { "BACKGROUND": "#efeccb","TEXT": "#012f2f","INPUT": "#e6d3a8","SCROLL": "#e6d3a8","TEXT_INPUT": "#012f2f","BUTTON": ("#FFFFFF", "#046380"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"TealMono": { "BACKGROUND": "#a8cfdd","TEXT": "#000000","INPUT": "#dfedf2","SCROLL": "#dfedf2","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#183440"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"Default": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"Default1": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": COLOR_SYSTEM_DEFAULT,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"DefaultNoMoreNagging": { "BACKGROUND": COLOR_SYSTEM_DEFAULT,"TEXT": COLOR_SYSTEM_DEFAULT,"INPUT": COLOR_SYSTEM_DEFAULT,"TEXT_INPUT": COLOR_SYSTEM_DEFAULT,"SCROLL": COLOR_SYSTEM_DEFAULT,"BUTTON": OFFICIAL_PYSIMPLEGUI_BUTTON_COLOR,"PROGRESS": COLOR_SYSTEM_DEFAULT,"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"LightBlue": { "BACKGROUND": "#E3F2FD","TEXT": "#000000","INPUT": "#86A8FF","TEXT_INPUT": "#000000","SCROLL": "#86A8FF","BUTTON": ("#FFFFFF", "#5079D3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 0,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#FF0266","ACCENT2": "#FF5C93","ACCENT3": "#C5003C" },"LightGrey": { "BACKGROUND": "#FAFAFA","TEXT": "#000000","INPUT": "#004EA1","TEXT_INPUT": "#FFFFFF","SCROLL": "#5EA7FF","BUTTON": ("#FFFFFF", "#0079D3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 0,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#FF0266","ACCENT2": "#FF5C93","ACCENT3": "#C5003C" },"LightGrey1": { "BACKGROUND": "#ffffff","TEXT": "#1a1a1b","INPUT": "#dae0e6","TEXT_INPUT": "#222222","SCROLL": "#a5a4a4","BUTTON": ("#FFFFFF", "#0079d3"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#ff5414","ACCENT2": "#33a8ff","ACCENT3": "#dbf0ff" },"DarkBrown": { "BACKGROUND": "#282923","TEXT": "#E7DB74","INPUT": "#393a32","TEXT_INPUT": "#E7C855","SCROLL": "#E7C855","BUTTON": ("#E7C855", "#284B5A"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"ACCENT1": "#c15226","ACCENT2": "#7a4d5f","ACCENT3": "#889743" },"LightGreen1": { "BACKGROUND": "#9FB8AD","TEXT": "#000000","INPUT": "#F7F3EC","TEXT_INPUT": "#000000","SCROLL": "#F7F3EC","BUTTON": ("#FFFFFF", "#475841"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey": { "BACKGROUND": "#404040","TEXT": "#FFFFFF","INPUT": "#4D4D4D","TEXT_INPUT": "#FFFFFF","SCROLL": "#707070","BUTTON": ("#FFFFFF", "#004F00"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightGreen2": { "BACKGROUND": "#B7CECE","TEXT": "#000000","INPUT": "#FDFFF7","TEXT_INPUT": "#000000","SCROLL": "#FDFFF7","BUTTON": ("#FFFFFF", "#658268"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"ACCENT1": "#76506d","ACCENT2": "#5148f1","ACCENT3": "#0a1c84","PROGRESS_DEPTH": 0 },"DarkGrey1": { "BACKGROUND": "#404040","TEXT": "#FFFFFF","INPUT": "#FFFFFF","TEXT_INPUT": "#000000","SCROLL": "#707070","BUTTON": ("#FFFFFF", "#004F00"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlack": { "BACKGROUND": "#000000","TEXT": "#FFFFFF","INPUT": "#4D4D4D","TEXT_INPUT": "#FFFFFF","SCROLL": "#707070","BUTTON": ("#000000", "#FFFFFF"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBrown": { "BACKGROUND": "#fdf6e3","TEXT": "#268bd1","INPUT": "#eee8d5","TEXT_INPUT": "#6c71c3","SCROLL": "#eee8d5","BUTTON": ("#FFFFFF", "#063542"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBrown1": { "BACKGROUND": "#e5dece","TEXT": "#063289","INPUT": "#f9f8f4","TEXT_INPUT": "#242834","SCROLL": "#eee8d5","BUTTON": ("#FFFFFF", "#063289"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlue1": { "BACKGROUND": "#242834","TEXT": "#dfe6f8","INPUT": "#97755c","TEXT_INPUT": "#FFFFFF","SCROLL": "#a9afbb","BUTTON": ("#FFFFFF", "#063289"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBrown1": { "BACKGROUND": "#2c2825","TEXT": "#fdcb52","INPUT": "#705e52","TEXT_INPUT": "#fdcb52","SCROLL": "#705e52","BUTTON": ("#000000", "#fdcb52"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlue2": { "BACKGROUND": "#1a2835","TEXT": "#d1ecff","INPUT": "#335267","TEXT_INPUT": "#acc2d0","SCROLL": "#1b6497","BUTTON": ("#000000", "#fafaf8"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBrown2": { "BACKGROUND": "#280001","TEXT": "#FFFFFF","INPUT": "#d8d584","TEXT_INPUT": "#000000","SCROLL": "#763e00","BUTTON": ("#000000", "#daad28"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGreen": { "BACKGROUND": "#82a459","TEXT": "#000000","INPUT": "#d8d584","TEXT_INPUT": "#000000","SCROLL": "#e3ecf3","BUTTON": ("#FFFFFF", "#517239"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBlue1": { "BACKGROUND": "#A5CADD","TEXT": "#6E266E","INPUT": "#E0F5FF","TEXT_INPUT": "#000000","SCROLL": "#E0F5FF","BUTTON": ("#FFFFFF", "#303952"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightPurple": { "BACKGROUND": "#B0AAC2","TEXT": "#000000","INPUT": "#F2EFE8","SCROLL": "#F2EFE8","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#C2D4D8"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBlue2": { "BACKGROUND": "#AAB6D3","TEXT": "#000000","INPUT": "#F1F4FC","SCROLL": "#F1F4FC","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#7186C7"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightGreen3": { "BACKGROUND": "#A8C1B4","TEXT": "#000000","INPUT": "#DDE0DE","SCROLL": "#E3E3E3","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#6D9F85"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlue3": { "BACKGROUND": "#64778d","TEXT": "#FFFFFF","INPUT": "#f0f3f7","SCROLL": "#A6B2BE","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#283b5b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightGreen4": { "BACKGROUND": "#b4ffb4","TEXT": "#000000","INPUT": "#ffff64","SCROLL": "#ffb482","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#ffa0dc"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightGreen5": { "BACKGROUND": "#92aa9d","TEXT": "#000000","INPUT": "#fcfff6","SCROLL": "#fcfff6","TEXT_INPUT": "#000000","BUTTON": ("#000000", "#d0dbbd"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBrown2": { "BACKGROUND": "#a7ad7f","TEXT": "#000000","INPUT": "#e6d3a8","SCROLL": "#e6d3a8","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#5d907d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBrown3": { "BACKGROUND": "#efeccb","TEXT": "#012f2f","INPUT": "#e6d3a8","SCROLL": "#e6d3a8","TEXT_INPUT": "#012f2f","BUTTON": ("#FFFFFF", "#046380"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBlue3": { "BACKGROUND": "#a8cfdd","TEXT": "#000000","INPUT": "#dfedf2","SCROLL": "#dfedf2","TEXT_INPUT": "#000000","BUTTON": ("#FFFFFF", "#183440"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"LightBrown4": { "BACKGROUND": "#d7c79e","TEXT": "#a35638","INPUT": "#9dab86","TEXT_INPUT": "#000000","SCROLL": "#a35638","BUTTON": ("#FFFFFF", "#a35638"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#a35638", "#9dab86", "#e08f62", "#d7c79e"] },"DarkTeal": { "BACKGROUND": "#003f5c","TEXT": "#fb5b5a","INPUT": "#bc4873","TEXT_INPUT": "#FFFFFF","SCROLL": "#bc4873","BUTTON": ("#FFFFFF", "#fb5b5a"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#003f5c", "#472b62", "#bc4873", "#fb5b5a"] },"DarkPurple": { "BACKGROUND": "#472b62","TEXT": "#fb5b5a","INPUT": "#bc4873","TEXT_INPUT": "#FFFFFF","SCROLL": "#bc4873","BUTTON": ("#FFFFFF", "#472b62"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#003f5c", "#472b62", "#bc4873", "#fb5b5a"] },"LightGreen6": { "BACKGROUND": "#eafbea","TEXT": "#1f6650","INPUT": "#6f9a8d","TEXT_INPUT": "#FFFFFF","SCROLL": "#1f6650","BUTTON": ("#FFFFFF", "#1f6650"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#1f6650", "#6f9a8d", "#ea5e5e", "#eafbea"] },"DarkGrey2": { "BACKGROUND": "#2b2b28","TEXT": "#f8f8f8","INPUT": "#f1d6ab","TEXT_INPUT": "#000000","SCROLL": "#f1d6ab","BUTTON": ("#2b2b28", "#e3b04b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#2b2b28", "#e3b04b", "#f1d6ab", "#f8f8f8"] },"LightBrown6": { "BACKGROUND": "#f9b282","TEXT": "#8f4426","INPUT": "#de6b35","TEXT_INPUT": "#FFFFFF","SCROLL": "#8f4426","BUTTON": ("#FFFFFF", "#8f4426"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#8f4426", "#de6b35", "#64ccda", "#f9b282"] },"DarkTeal1": { "BACKGROUND": "#396362","TEXT": "#ffe7d1","INPUT": "#f6c89f","TEXT_INPUT": "#000000","SCROLL": "#f6c89f","BUTTON": ("#ffe7d1", "#4b8e8d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#396362", "#4b8e8d", "#f6c89f", "#ffe7d1"] },"LightBrown7": { "BACKGROUND": "#f6c89f","TEXT": "#396362","INPUT": "#4b8e8d","TEXT_INPUT": "#FFFFFF","SCROLL": "#396362","BUTTON": ("#FFFFFF", "#396362"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#396362", "#4b8e8d", "#f6c89f", "#ffe7d1"] },"DarkPurple1": { "BACKGROUND": "#0c093c","TEXT": "#fad6d6","INPUT": "#eea5f6","TEXT_INPUT": "#000000","SCROLL": "#eea5f6","BUTTON": ("#FFFFFF", "#df42d1"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#0c093c", "#df42d1", "#eea5f6", "#fad6d6"] },"DarkGrey3": { "BACKGROUND": "#211717","TEXT": "#dfddc7","INPUT": "#f58b54","TEXT_INPUT": "#000000","SCROLL": "#f58b54","BUTTON": ("#dfddc7", "#a34a28"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#211717", "#a34a28", "#f58b54", "#dfddc7"] },"LightBrown8": { "BACKGROUND": "#dfddc7","TEXT": "#211717","INPUT": "#a34a28","TEXT_INPUT": "#dfddc7","SCROLL": "#211717","BUTTON": ("#dfddc7", "#a34a28"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#211717", "#a34a28", "#f58b54", "#dfddc7"] },"DarkBlue4": { "BACKGROUND": "#494ca2","TEXT": "#e3e7f1","INPUT": "#c6cbef","TEXT_INPUT": "#000000","SCROLL": "#c6cbef","BUTTON": ("#FFFFFF", "#8186d5"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#494ca2", "#8186d5", "#c6cbef", "#e3e7f1"] },"LightBlue4": { "BACKGROUND": "#5c94bd","TEXT": "#470938","INPUT": "#1a3e59","TEXT_INPUT": "#FFFFFF","SCROLL": "#470938","BUTTON": ("#FFFFFF", "#470938"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#470938", "#1a3e59", "#5c94bd", "#f2d6eb"] },"DarkTeal2": { "BACKGROUND": "#394a6d","TEXT": "#c0ffb3","INPUT": "#52de97","TEXT_INPUT": "#000000","SCROLL": "#52de97","BUTTON": ("#c0ffb3", "#394a6d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#394a6d", "#3c9d9b", "#52de97", "#c0ffb3"] },"DarkTeal3": { "BACKGROUND": "#3c9d9b","TEXT": "#c0ffb3","INPUT": "#52de97","TEXT_INPUT": "#000000","SCROLL": "#52de97","BUTTON": ("#c0ffb3", "#394a6d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#394a6d", "#3c9d9b", "#52de97", "#c0ffb3"] },"DarkPurple5": { "BACKGROUND": "#730068","TEXT": "#f6f078","INPUT": "#01d28e","TEXT_INPUT": "#000000","SCROLL": "#01d28e","BUTTON": ("#f6f078", "#730068"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#730068", "#434982", "#01d28e", "#f6f078"] },"DarkPurple2": { "BACKGROUND": "#202060","TEXT": "#b030b0","INPUT": "#602080","TEXT_INPUT": "#FFFFFF","SCROLL": "#602080","BUTTON": ("#FFFFFF", "#202040"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#202040", "#202060", "#602080", "#b030b0"] },"DarkBlue5": { "BACKGROUND": "#000272","TEXT": "#ff6363","INPUT": "#a32f80","TEXT_INPUT": "#FFFFFF","SCROLL": "#a32f80","BUTTON": ("#FFFFFF", "#341677"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#000272", "#341677", "#a32f80", "#ff6363"] },"LightGrey2": { "BACKGROUND": "#f6f6f6","TEXT": "#420000","INPUT": "#d4d7dd","TEXT_INPUT": "#420000","SCROLL": "#420000","BUTTON": ("#420000", "#d4d7dd"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#420000", "#d4d7dd", "#eae9e9", "#f6f6f6"] },"LightGrey3": { "BACKGROUND": "#eae9e9","TEXT": "#420000","INPUT": "#d4d7dd","TEXT_INPUT": "#420000","SCROLL": "#420000","BUTTON": ("#420000", "#d4d7dd"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#420000", "#d4d7dd", "#eae9e9", "#f6f6f6"] },"DarkBlue6": { "BACKGROUND": "#01024e","TEXT": "#ff6464","INPUT": "#8b4367","TEXT_INPUT": "#FFFFFF","SCROLL": "#8b4367","BUTTON": ("#FFFFFF", "#543864"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#01024e", "#543864", "#8b4367", "#ff6464"] },"DarkBlue7": { "BACKGROUND": "#241663","TEXT": "#eae7af","INPUT": "#a72693","TEXT_INPUT": "#eae7af","SCROLL": "#a72693","BUTTON": ("#eae7af", "#160f30"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#160f30", "#241663", "#a72693", "#eae7af"] },"LightBrown9": { "BACKGROUND": "#f6d365","TEXT": "#3a1f5d","INPUT": "#c83660","TEXT_INPUT": "#f6d365","SCROLL": "#3a1f5d","BUTTON": ("#f6d365", "#c83660"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3a1f5d", "#c83660", "#e15249", "#f6d365"] },"DarkPurple3": { "BACKGROUND": "#6e2142","TEXT": "#ffd692","INPUT": "#e16363","TEXT_INPUT": "#ffd692","SCROLL": "#e16363","BUTTON": ("#ffd692", "#943855"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#6e2142", "#943855", "#e16363", "#ffd692"] },"LightBrown10": { "BACKGROUND": "#ffd692","TEXT": "#6e2142","INPUT": "#943855","TEXT_INPUT": "#FFFFFF","SCROLL": "#6e2142","BUTTON": ("#FFFFFF", "#6e2142"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#6e2142", "#943855", "#e16363", "#ffd692"] },"DarkPurple4": { "BACKGROUND": "#200f21","TEXT": "#f638dc","INPUT": "#5a3d5c","TEXT_INPUT": "#FFFFFF","SCROLL": "#5a3d5c","BUTTON": ("#FFFFFF", "#382039"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#200f21", "#382039", "#5a3d5c", "#f638dc"] },"LightBlue5": { "BACKGROUND": "#b2fcff","TEXT": "#3e64ff","INPUT": "#5edfff","TEXT_INPUT": "#000000","SCROLL": "#3e64ff","BUTTON": ("#FFFFFF", "#3e64ff"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3e64ff", "#5edfff", "#b2fcff", "#ecfcff"] },"DarkTeal4": { "BACKGROUND": "#464159","TEXT": "#c7f0db","INPUT": "#8bbabb","TEXT_INPUT": "#000000","SCROLL": "#8bbabb","BUTTON": ("#FFFFFF", "#6c7b95"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"] },"LightTeal": { "BACKGROUND": "#c7f0db","TEXT": "#464159","INPUT": "#6c7b95","TEXT_INPUT": "#FFFFFF","SCROLL": "#464159","BUTTON": ("#FFFFFF", "#464159"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"] },"DarkTeal5": { "BACKGROUND": "#8bbabb","TEXT": "#464159","INPUT": "#6c7b95","TEXT_INPUT": "#FFFFFF","SCROLL": "#464159","BUTTON": ("#c7f0db", "#6c7b95"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#464159", "#6c7b95", "#8bbabb", "#c7f0db"] },"LightGrey4": { "BACKGROUND": "#faf5ef","TEXT": "#672f2f","INPUT": "#99b19c","TEXT_INPUT": "#672f2f","SCROLL": "#672f2f","BUTTON": ("#672f2f", "#99b19c"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"] },"LightGreen7": { "BACKGROUND": "#99b19c","TEXT": "#faf5ef","INPUT": "#d7d1c9","TEXT_INPUT": "#000000","SCROLL": "#d7d1c9","BUTTON": ("#FFFFFF", "#99b19c"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"] },"LightGrey5": { "BACKGROUND": "#d7d1c9","TEXT": "#672f2f","INPUT": "#99b19c","TEXT_INPUT": "#672f2f","SCROLL": "#672f2f","BUTTON": ("#FFFFFF", "#672f2f"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#672f2f", "#99b19c", "#d7d1c9", "#faf5ef"] },"DarkBrown3": { "BACKGROUND": "#a0855b","TEXT": "#f9f6f2","INPUT": "#f1d6ab","TEXT_INPUT": "#000000","SCROLL": "#f1d6ab","BUTTON": ("#FFFFFF", "#38470b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#38470b", "#a0855b", "#f1d6ab", "#f9f6f2"] },"LightBrown11": { "BACKGROUND": "#f1d6ab","TEXT": "#38470b","INPUT": "#a0855b","TEXT_INPUT": "#FFFFFF","SCROLL": "#38470b","BUTTON": ("#f9f6f2", "#a0855b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#38470b", "#a0855b", "#f1d6ab", "#f9f6f2"] },"DarkRed": { "BACKGROUND": "#83142c","TEXT": "#f9d276","INPUT": "#ad1d45","TEXT_INPUT": "#FFFFFF","SCROLL": "#ad1d45","BUTTON": ("#f9d276", "#ad1d45"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#44000d", "#83142c", "#ad1d45", "#f9d276"] },"DarkTeal6": { "BACKGROUND": "#204969","TEXT": "#fff7f7","INPUT": "#dadada","TEXT_INPUT": "#000000","SCROLL": "#dadada","BUTTON": ("#000000", "#fff7f7"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#204969", "#08ffc8", "#dadada", "#fff7f7"] },"DarkBrown4": { "BACKGROUND": "#252525","TEXT": "#ff0000","INPUT": "#af0404","TEXT_INPUT": "#FFFFFF","SCROLL": "#af0404","BUTTON": ("#FFFFFF", "#252525"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#252525", "#414141", "#af0404", "#ff0000"] },"LightYellow": { "BACKGROUND": "#f4ff61","TEXT": "#27aa80","INPUT": "#32ff6a","TEXT_INPUT": "#000000","SCROLL": "#27aa80","BUTTON": ("#f4ff61", "#27aa80"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#27aa80", "#32ff6a", "#a8ff3e", "#f4ff61"] },"DarkGreen1": { "BACKGROUND": "#2b580c","TEXT": "#fdef96","INPUT": "#f7b71d","TEXT_INPUT": "#000000","SCROLL": "#f7b71d","BUTTON": ("#fdef96", "#2b580c"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#2b580c", "#afa939", "#f7b71d", "#fdef96"] },"LightGreen8": { "BACKGROUND": "#c8dad3","TEXT": "#63707e","INPUT": "#93b5b3","TEXT_INPUT": "#000000","SCROLL": "#63707e","BUTTON": ("#FFFFFF", "#63707e"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#63707e", "#93b5b3", "#c8dad3", "#f2f6f5"] },"DarkTeal7": { "BACKGROUND": "#248ea9","TEXT": "#fafdcb","INPUT": "#aee7e8","TEXT_INPUT": "#000000","SCROLL": "#aee7e8","BUTTON": ("#000000", "#fafdcb"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#248ea9", "#28c3d4", "#aee7e8", "#fafdcb"] },"DarkBlue8": { "BACKGROUND": "#454d66","TEXT": "#d9d872","INPUT": "#58b368","TEXT_INPUT": "#000000","SCROLL": "#58b368","BUTTON": ("#000000", "#009975"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#009975", "#454d66", "#58b368", "#d9d872"] },"DarkBlue9": { "BACKGROUND": "#263859","TEXT": "#ff6768","INPUT": "#6b778d","TEXT_INPUT": "#FFFFFF","SCROLL": "#6b778d","BUTTON": ("#ff6768", "#263859"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#17223b", "#263859", "#6b778d", "#ff6768"] },"DarkBlue10": { "BACKGROUND": "#0028ff","TEXT": "#f1f4df","INPUT": "#10eaf0","TEXT_INPUT": "#000000","SCROLL": "#10eaf0","BUTTON": ("#f1f4df", "#24009c"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#24009c", "#0028ff", "#10eaf0", "#f1f4df"] },"DarkBlue11": { "BACKGROUND": "#6384b3","TEXT": "#e6f0b6","INPUT": "#b8e9c0","TEXT_INPUT": "#000000","SCROLL": "#b8e9c0","BUTTON": ("#e6f0b6", "#684949"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#684949", "#6384b3", "#b8e9c0", "#e6f0b6"] },"DarkTeal8": { "BACKGROUND": "#71a0a5","TEXT": "#212121","INPUT": "#665c84","TEXT_INPUT": "#FFFFFF","SCROLL": "#212121","BUTTON": ("#fab95b", "#665c84"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#212121", "#665c84", "#71a0a5", "#fab95b"] },"DarkRed1": { "BACKGROUND": "#c10000","TEXT": "#eeeeee","INPUT": "#dedede","TEXT_INPUT": "#000000","SCROLL": "#dedede","BUTTON": ("#c10000", "#eeeeee"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#c10000", "#ff4949", "#dedede", "#eeeeee"] },"LightBrown5": { "BACKGROUND": "#fff591","TEXT": "#e41749","INPUT": "#f5587b","TEXT_INPUT": "#000000","SCROLL": "#e41749","BUTTON": ("#fff591", "#e41749"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#e41749", "#f5587b", "#ff8a5c", "#fff591"] },"LightGreen9": { "BACKGROUND": "#f1edb3","TEXT": "#3b503d","INPUT": "#4a746e","TEXT_INPUT": "#f1edb3","SCROLL": "#3b503d","BUTTON": ("#f1edb3", "#3b503d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3b503d", "#4a746e", "#c8cf94", "#f1edb3"],"DESCRIPTION": ["Green", "Turquoise", "Yellow"] },"DarkGreen2": { "BACKGROUND": "#3b503d","TEXT": "#f1edb3","INPUT": "#c8cf94","TEXT_INPUT": "#000000","SCROLL": "#c8cf94","BUTTON": ("#f1edb3", "#3b503d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3b503d", "#4a746e", "#c8cf94", "#f1edb3"],"DESCRIPTION": ["Green", "Turquoise", "Yellow"] },"LightGray1": { "BACKGROUND": "#f2f2f2","TEXT": "#222831","INPUT": "#393e46","TEXT_INPUT": "#FFFFFF","SCROLL": "#222831","BUTTON": ("#f2f2f2", "#222831"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#222831", "#393e46", "#f96d00", "#f2f2f2"],"DESCRIPTION": ["#000000", "Grey", "Orange", "Grey", "Autumn"] },"DarkGrey4": { "BACKGROUND": "#52524e","TEXT": "#e9e9e5","INPUT": "#d4d6c8","TEXT_INPUT": "#000000","SCROLL": "#d4d6c8","BUTTON": ("#FFFFFF", "#9a9b94"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#52524e", "#9a9b94", "#d4d6c8", "#e9e9e5"],"DESCRIPTION": ["Grey", "Pastel", "Winter"] },"DarkBlue12": { "BACKGROUND": "#324e7b","TEXT": "#f8f8f8","INPUT": "#86a6df","TEXT_INPUT": "#000000","SCROLL": "#86a6df","BUTTON": ("#FFFFFF", "#5068a9"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#324e7b", "#5068a9", "#86a6df", "#f8f8f8"],"DESCRIPTION": ["Blue", "Grey", "Cold", "Winter"] },"DarkPurple6": { "BACKGROUND": "#070739","TEXT": "#e1e099","INPUT": "#c327ab","TEXT_INPUT": "#e1e099","SCROLL": "#c327ab","BUTTON": ("#e1e099", "#521477"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#070739", "#521477", "#c327ab", "#e1e099"],"DESCRIPTION": ["#000000", "Purple", "Yellow", "Dark"] },"DarkPurple7": { "BACKGROUND": "#191930","TEXT": "#B1B7C5","INPUT": "#232B5C","TEXT_INPUT": "#D0E3E7","SCROLL": "#B1B7C5","BUTTON": ("#272D38", "#B1B7C5"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBlue13": { "BACKGROUND": "#203562","TEXT": "#e3e8f8","INPUT": "#c0c5cd","TEXT_INPUT": "#000000","SCROLL": "#c0c5cd","BUTTON": ("#FFFFFF", "#3e588f"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#203562", "#3e588f", "#c0c5cd", "#e3e8f8"],"DESCRIPTION": ["Blue", "Grey", "Wedding", "Cold"] },"DarkBrown5": { "BACKGROUND": "#3c1b1f","TEXT": "#f6e1b5","INPUT": "#e2bf81","TEXT_INPUT": "#000000","SCROLL": "#e2bf81","BUTTON": ("#3c1b1f", "#f6e1b5"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3c1b1f", "#b21e4b", "#e2bf81", "#f6e1b5"],"DESCRIPTION": ["Brown", "Red", "Yellow", "Warm"] },"DarkGreen3": { "BACKGROUND": "#062121","TEXT": "#eeeeee","INPUT": "#e4dcad","TEXT_INPUT": "#000000","SCROLL": "#e4dcad","BUTTON": ("#eeeeee", "#181810"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#062121", "#181810", "#e4dcad", "#eeeeee"],"DESCRIPTION": ["#000000", "#000000", "Brown", "Grey"] },"DarkBlack1": { "BACKGROUND": "#181810","TEXT": "#eeeeee","INPUT": "#e4dcad","TEXT_INPUT": "#000000","SCROLL": "#e4dcad","BUTTON": ("#FFFFFF", "#062121"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#062121", "#181810", "#e4dcad", "#eeeeee"],"DESCRIPTION": ["#000000", "#000000", "Brown", "Grey"] },"DarkGrey5": { "BACKGROUND": "#343434","TEXT": "#f3f3f3","INPUT": "#e9dcbe","TEXT_INPUT": "#000000","SCROLL": "#e9dcbe","BUTTON": ("#FFFFFF", "#8e8b82"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#343434", "#8e8b82", "#e9dcbe", "#f3f3f3"],"DESCRIPTION": ["Grey", "Brown"] },"LightBrown12": { "BACKGROUND": "#8e8b82","TEXT": "#f3f3f3","INPUT": "#e9dcbe","TEXT_INPUT": "#000000","SCROLL": "#e9dcbe","BUTTON": ("#f3f3f3", "#8e8b82"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#343434", "#8e8b82", "#e9dcbe", "#f3f3f3"],"DESCRIPTION": ["Grey", "Brown"] },"DarkTeal9": { "BACKGROUND": "#13445a","TEXT": "#fef4e8","INPUT": "#446878","TEXT_INPUT": "#FFFFFF","SCROLL": "#446878","BUTTON": ("#fef4e8", "#446878"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#13445a", "#970747", "#446878", "#fef4e8"],"DESCRIPTION": ["Red", "Grey", "Blue", "Wedding", "Retro"] },"DarkBlue14": { "BACKGROUND": "#21273d","TEXT": "#f1f6f8","INPUT": "#b9d4f1","TEXT_INPUT": "#000000","SCROLL": "#b9d4f1","BUTTON": ("#FFFFFF", "#6a759b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#21273d", "#6a759b", "#b9d4f1", "#f1f6f8"],"DESCRIPTION": ["Blue", "#000000", "Grey", "Cold", "Winter"] },"LightBlue6": { "BACKGROUND": "#f1f6f8","TEXT": "#21273d","INPUT": "#6a759b","TEXT_INPUT": "#FFFFFF","SCROLL": "#21273d","BUTTON": ("#f1f6f8", "#6a759b"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#21273d", "#6a759b", "#b9d4f1", "#f1f6f8"],"DESCRIPTION": ["Blue", "#000000", "Grey", "Cold", "Winter"] },"DarkGreen4": { "BACKGROUND": "#044343","TEXT": "#e4e4e4","INPUT": "#045757","TEXT_INPUT": "#e4e4e4","SCROLL": "#045757","BUTTON": ("#e4e4e4", "#045757"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#222222", "#044343", "#045757", "#e4e4e4"],"DESCRIPTION": ["#000000", "Turquoise", "Grey", "Dark"] },"DarkGreen5": { "BACKGROUND": "#1b4b36","TEXT": "#e0e7f1","INPUT": "#aebd77","TEXT_INPUT": "#000000","SCROLL": "#aebd77","BUTTON": ("#FFFFFF", "#538f6a"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#1b4b36", "#538f6a", "#aebd77", "#e0e7f1"],"DESCRIPTION": ["Green", "Grey"] },"DarkTeal10": { "BACKGROUND": "#0d3446","TEXT": "#d8dfe2","INPUT": "#71adb5","TEXT_INPUT": "#000000","SCROLL": "#71adb5","BUTTON": ("#FFFFFF", "#176d81"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#0d3446", "#176d81", "#71adb5", "#d8dfe2"],"DESCRIPTION": ["Grey", "Turquoise", "Winter", "Cold"] },"DarkGrey6": { "BACKGROUND": "#3e3e3e","TEXT": "#ededed","INPUT": "#68868c","TEXT_INPUT": "#ededed","SCROLL": "#68868c","BUTTON": ("#FFFFFF", "#405559"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3e3e3e", "#405559", "#68868c", "#ededed"],"DESCRIPTION": ["Grey", "Turquoise", "Winter"] },"DarkTeal11": { "BACKGROUND": "#405559","TEXT": "#ededed","INPUT": "#68868c","TEXT_INPUT": "#ededed","SCROLL": "#68868c","BUTTON": ("#ededed", "#68868c"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#3e3e3e", "#405559", "#68868c", "#ededed"],"DESCRIPTION": ["Grey", "Turquoise", "Winter"] },"LightBlue7": { "BACKGROUND": "#9ed0e0","TEXT": "#19483f","INPUT": "#5c868e","TEXT_INPUT": "#FFFFFF","SCROLL": "#19483f","BUTTON": ("#FFFFFF", "#19483f"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#19483f", "#5c868e", "#ff6a38", "#9ed0e0"],"DESCRIPTION": ["Orange", "Blue", "Turquoise"] },"LightGreen10": { "BACKGROUND": "#d8ebb5","TEXT": "#205d67","INPUT": "#639a67","TEXT_INPUT": "#FFFFFF","SCROLL": "#205d67","BUTTON": ("#d8ebb5", "#205d67"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#205d67", "#639a67", "#d9bf77", "#d8ebb5"],"DESCRIPTION": ["Blue", "Green", "Brown", "Vintage"] },"DarkBlue15": { "BACKGROUND": "#151680","TEXT": "#f1fea4","INPUT": "#375fc0","TEXT_INPUT": "#f1fea4","SCROLL": "#375fc0","BUTTON": ("#f1fea4", "#1c44ac"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#151680", "#1c44ac", "#375fc0", "#f1fea4"],"DESCRIPTION": ["Blue", "Yellow", "Cold"] },"DarkBlue16": { "BACKGROUND": "#1c44ac","TEXT": "#f1fea4","INPUT": "#375fc0","TEXT_INPUT": "#f1fea4","SCROLL": "#375fc0","BUTTON": ("#f1fea4", "#151680"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#151680", "#1c44ac", "#375fc0", "#f1fea4"],"DESCRIPTION": ["Blue", "Yellow", "Cold"] },"DarkTeal12": { "BACKGROUND": "#004a7c","TEXT": "#fafafa","INPUT": "#e8f1f5","TEXT_INPUT": "#000000","SCROLL": "#e8f1f5","BUTTON": ("#fafafa", "#005691"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#004a7c", "#005691", "#e8f1f5", "#fafafa"],"DESCRIPTION": ["Grey", "Blue", "Cold", "Winter"] },"LightBrown13": { "BACKGROUND": "#ebf5ee","TEXT": "#921224","INPUT": "#bdc6b8","TEXT_INPUT": "#921224","SCROLL": "#921224","BUTTON": ("#FFFFFF", "#921224"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#921224", "#bdc6b8", "#bce0da", "#ebf5ee"],"DESCRIPTION": ["Red", "Blue", "Grey", "Vintage", "Wedding"] },"DarkBlue17": { "BACKGROUND": "#21294c","TEXT": "#f9f2d7","INPUT": "#f2dea8","TEXT_INPUT": "#000000","SCROLL": "#f2dea8","BUTTON": ("#f9f2d7", "#141829"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#141829", "#21294c", "#f2dea8", "#f9f2d7"],"DESCRIPTION": ["#000000", "Blue", "Yellow"] },"DarkBrown6": { "BACKGROUND": "#785e4d","TEXT": "#f2eee3","INPUT": "#baaf92","TEXT_INPUT": "#000000","SCROLL": "#baaf92","BUTTON": ("#FFFFFF", "#785e4d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#785e4d", "#ff8426", "#baaf92", "#f2eee3"],"DESCRIPTION": ["Grey", "Brown", "Orange", "Autumn"] },"DarkGreen6": { "BACKGROUND": "#5c715e","TEXT": "#f2f9f1","INPUT": "#ddeedf","TEXT_INPUT": "#000000","SCROLL": "#ddeedf","BUTTON": ("#f2f9f1", "#5c715e"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#5c715e", "#b6cdbd", "#ddeedf", "#f2f9f1"],"DESCRIPTION": ["Grey", "Green", "Vintage"] },"DarkGreen7": { "BACKGROUND": "#0C231E","TEXT": "#efbe1c","INPUT": "#153C33","TEXT_INPUT": "#efbe1c","SCROLL": "#153C33","BUTTON": ("#efbe1c", "#153C33"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey7": { "BACKGROUND": "#4b586e","TEXT": "#dddddd","INPUT": "#574e6d","TEXT_INPUT": "#dddddd","SCROLL": "#574e6d","BUTTON": ("#dddddd", "#43405d"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#43405d", "#4b586e", "#574e6d", "#dddddd"],"DESCRIPTION": ["Grey", "Winter", "Cold"] },"DarkRed2": { "BACKGROUND": "#ab1212","TEXT": "#f6e4b5","INPUT": "#cd3131","TEXT_INPUT": "#f6e4b5","SCROLL": "#cd3131","BUTTON": ("#f6e4b5", "#ab1212"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#ab1212", "#1fad9f", "#cd3131", "#f6e4b5"],"DESCRIPTION": ["Turquoise", "Red", "Yellow"] },"LightGrey6": { "BACKGROUND": "#e3e3e3","TEXT": "#233142","INPUT": "#455d7a","TEXT_INPUT": "#e3e3e3","SCROLL": "#233142","BUTTON": ("#e3e3e3", "#455d7a"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0,"COLOR_LIST": ["#233142", "#455d7a", "#f95959", "#e3e3e3"],"DESCRIPTION": ["#000000", "Blue", "Red", "Grey"] },"HotDogStand": { "BACKGROUND": "red","TEXT": "yellow","INPUT": "yellow","TEXT_INPUT": "#000000","SCROLL": "yellow","BUTTON": ("red", "yellow"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey8": { "BACKGROUND": "#19232D","TEXT": "#ffffff","INPUT": "#32414B","TEXT_INPUT": "#ffffff","SCROLL": "#505F69","BUTTON": ("#ffffff", "#32414B"),"PROGRESS": ("#505F69", "#32414B"),"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey9": { "BACKGROUND": "#36393F","TEXT": "#DCDDDE","INPUT": "#40444B","TEXT_INPUT": "#ffffff","SCROLL": "#202225","BUTTON": ("#202225", "#B9BBBE"),"PROGRESS": ("#202225", "#40444B"),"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey10": { "BACKGROUND": "#1c1e23","TEXT": "#cccdcf","INPUT": "#272a31","TEXT_INPUT": "#8b9fde","SCROLL": "#313641","BUTTON": ("#f5f5f6", "#2e3d5a"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey11": { "BACKGROUND": "#1c1e23","TEXT": "#cccdcf","INPUT": "#313641","TEXT_INPUT": "#cccdcf","SCROLL": "#313641","BUTTON": ("#f5f5f6", "#313641"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey12": { "BACKGROUND": "#1c1e23","TEXT": "#8b9fde","INPUT": "#313641","TEXT_INPUT": "#8b9fde","SCROLL": "#313641","BUTTON": ("#cccdcf", "#2e3d5a"),"PROGRESS": DEFAULT_PROGRESS_BAR_COMPUTE,"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey13": { "BACKGROUND": "#1c1e23","TEXT": "#cccdcf","INPUT": "#272a31","TEXT_INPUT": "#cccdcf","SCROLL": "#313641","BUTTON": ("#8b9fde", "#313641"),"PROGRESS": ("#cccdcf", "#272a31"),"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkGrey14": { "BACKGROUND": "#24292e","TEXT": "#fafbfc","INPUT": "#1d2125","TEXT_INPUT": "#fafbfc","SCROLL": "#1d2125","BUTTON": ("#fafbfc", "#155398"),"PROGRESS": ("#155398", "#1d2125"),"BORDER": 1,"SLIDER_DEPTH": 0,"PROGRESS_DEPTH": 0 },"DarkBrown7": { "BACKGROUND": "#2c2417","TEXT": "#baa379","INPUT": "#baa379","TEXT_INPUT": "#000000","SCROLL": "#392e1c","BUTTON": ("#000000", "#baa379"),"PROGRESS": ("#baa379", "#453923"),"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 },"Python": { "BACKGROUND": "#3d7aab","TEXT": "#ffde56","INPUT": "#295273","TEXT_INPUT": "#ffde56","SCROLL": "#295273","BUTTON": ("#ffde56", "#295273"),"PROGRESS": ("#ffde56", "#295273"),"BORDER": 1,"SLIDER_DEPTH": 1,"PROGRESS_DEPTH": 0 } }
def ListOfLookAndFeelValues():
    """
    Get a list of the valid values to pass into your call to change_look_and_feel

    :return: list of valid string values
    :rtype: List[str]
    """
    ...

def theme(new_theme=...):
    """
    Sets / Gets the current Theme.  If none is specified then returns the current theme.
    This call replaces the ChangeLookAndFeel / change_look_and_feel call which only sets the theme.

    :param new_theme: the new theme name to use
    :type new_theme: (str)
    :return: the currently selected theme
    :rtype: (str)
    """
    ...

def theme_background_color(color=...):
    """
    Sets/Returns the background color currently in use
    Used for Windows and containers (Column, Frame, Tab) and tables

    :param color: new background color to use (optional)
    :type color: (str)
    :return: color string of the background color currently in use
    :rtype: (str)
    """
    ...

TRANSPARENT_BUTTON = (theme_background_color(), theme_background_color())
def theme_element_background_color(color=...):
    """
    Sets/Returns the background color currently in use for all elements except containers

    :return: (str) - color string of the element background color currently in use
    :rtype: (str)
    """
    ...

def theme_text_color(color=...):
    """
    Sets/Returns the text color currently in use

    :return: (str) - color string of the text color currently in use
    :rtype: (str)
    """
    ...

def theme_text_element_background_color(color=...):
    """
    Sets/Returns the background color for text elements

    :return: (str) - color string of the text background color currently in use
    :rtype: (str)
    """
    ...

def theme_input_background_color(color=...):
    """
    Sets/Returns the input element background color currently in use

    :return: (str) - color string of the input element background color currently in use
    :rtype: (str)
    """
    ...

def theme_input_text_color(color=...):
    """
    Sets/Returns the input element entry color (not the text but the thing that's displaying the text)

    :return: (str) - color string of the input element color currently in use
    :rtype: (str)
    """
    ...

def theme_button_color(color=...):
    """
    Sets/Returns the button color currently in use

    :return: Tuple[str, str] - TUPLE with color strings of the button color currently in use (button text color, button background color)
    :rtype: (str)
    """
    ...

def theme_progress_bar_color(color=...):
    """
    Sets/Returns the progress bar colors by the current color theme

    :return: Tuple[str, str] - TUPLE with color strings of the ProgressBar color currently in use(button text color, button background color)
    :rtype: (str)
    """
    ...

def theme_slider_color(color=...):
    """
    Sets/Returns the slider color (used for sliders)

    :return: (str) - color string of the slider color currently in use
    :rtype: (str)
    """
    ...

def theme_border_width(border_width=...):
    """
    Sets/Returns the border width currently in use
    Used by non ttk elements at the moment

    :return: (int) - border width currently in use
    :rtype: (str)
    """
    ...

def theme_slider_border_width(border_width=...):
    """
    Sets/Returns the slider border width currently in use

    :return: (int) - border width currently in use
    :rtype: (str)
    """
    ...

def theme_progress_bar_border_width(border_width=...):
    """
    Sets/Returns the progress meter border width currently in use

    :return: (int) - border width currently in use
    :rtype: (str)
    """
    ...

def theme_element_text_color(color=...):
    """
    Sets/Returns the text color used by elements that have text as part of their display (Tables, Trees and Sliders)

    :return: (str) - color string currently in use
    :rtype: (str)
    """
    ...

def theme_list():
    """
    Returns a sorted list of the currently available color themes

    :return: List[str] - A sorted list of the currently available color themes
    :rtype: List[str]
    """
    ...

def theme_add_new(new_theme_name, new_theme_dict):
    """
    Add a new theme to the dictionary of themes

    :param new_theme_name: text to display in element
    :type new_theme_name: (str)
    :param new_theme_dict: text to display in element
    :type new_theme_dict: (dict)
    """
    ...

def theme_previewer(columns=..., scrollable=..., scroll_area_size=..., search_string=..., location=...):
    """
    Displays a "Quick Reference Window" showing all of the different Look and Feel settings that are available.
    They are sorted alphabetically.  The legacy color names are mixed in, but otherwise they are sorted into Dark and Light halves

    :param columns: The number of themes to display per row
    :type columns: int
    :param scrollable: If True then scrollbars will be added
    :type scrollable: bool
    :param scroll_area_size: Size of the scrollable area (The Column Element used to make scrollable)
    :type scroll_area_size: (int, int)
    :param search_string: If specified then only themes containing this string will be shown
    :type search_string: str
    :param location: Location on the screen to place the window. Defaults to the center like all windows
    :type location: (int, int)
    """
    ...

preview_all_look_and_feel_themes = theme_previewer
def theme_previewer_swatches():
    """
    Display themes in a window as color swatches.
    Click on a color swatch to see the hex value printed on the console.
    If you hover over a color or right click it you'll also see the hext value.
    """
    ...

def ChangeLookAndFeel(index, force=...):
    """
    Change the "color scheme" of all future PySimpleGUI Windows.
    The scheme are string names that specify a group of colors. Background colors, text colors, button colors.
    There are 13 different color settings that are changed at one time using a single call to ChangeLookAndFeel
    The look and feel table itself has these indexes into the dictionary LOOK_AND_FEEL_TABLE.
    The original list was (prior to a major rework and renaming)... these names still work...
    In Nov 2019 a new Theme Formula was devised to make choosing a theme easier:
    The "Formula" is:
    ["Dark" or "Light"] Color Number
    Colors can be Blue Brown Grey Green Purple Red Teal Yellow Black
    The number will vary for each pair. There are more DarkGrey entries than there are LightYellow for example.
    Default = The default settings (only button color is different than system default)
    Default1 = The full system default including the button (everything's gray... how sad... don't be all gray... please....)
    :param index:  the name of the index into the Look and Feel table (does not have to be exact, can be "fuzzy")
    :type index: (str)
    :param force:  no longer used
    :type force: (bool)
    :return: None
    :rtype: None
    """
    ...

def ObjToStringSingleObj(obj):
    """
    Dumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form
    Returns only the top-most object's variables instead of drilling down to dispolay more
    :param obj: The object to display
    :type obj: (Any)
    :return: Formatted output of the object's values
    :rtype: (str)
    """
    ...

def ObjToString(obj, extra=...):
    """
    Dumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form
    :param obj: The object to display
    :type obj: (Any)
    :param extra: extra stuff (Default value = '    ')
    :type extra: (str)
    :return:  Formatted output of the object's values
    :rtype: (str)
    """
    ...

def Popup(*args, title=..., button_color=..., background_color=..., text_color=..., button_type=..., auto_close=..., auto_close_duration=..., custom_text=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., any_key_closes=..., image=..., modal=...):
    """
    Popup - Display a popup Window with as many parms as you wish to include.  This is the GUI equivalent of the
    "print" statement.  It's also great for "pausing" your program's flow until the user can read some error messages.

    :param *args:  Variable number of your arguments.  Load up the call with stuff to see!
    :type *args: (Any)
    :param title:   Optional title for the window. If none provided, the first arg will be used instead.
    :type title: (str)
    :param button_color: Color of the buttons shown (text color, button color)
    :type button_color: Union[Tuple[str, str], None]
    :param background_color:  Window's background color
    :type background_color: (str)
    :param text_color:  text color
    :type text_color: (str)
    :param button_type:  NOT USER SET!  Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK). There are many Popup functions and they call Popup, changing this parameter to get the desired effect.
    :type button_type: (int)
    :param auto_close:  If True the window will automatically close
    :type auto_close: (bool)
    :param auto_close_duration:  time in seconds to keep window open before closing it automatically
    :type auto_close_duration: (int)
    :param custom_text:  A string or pair of strings that contain the text to display on the buttons
    :type custom_text: Union[Tuple[str, str], str]
    :param non_blocking:  If True then will immediately return from the function without waiting for the user's input.
    :type non_blocking: (bool)
    :param icon:  icon to display on the window. Same format as a Window call
    :type icon: Union[str, bytes]
    :param line_width:  Width of lines in characters.  Defaults to MESSAGE_BOX_LINE_WIDTH
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, tuple(font name, size, modifiers]
    :param no_titlebar:  If True will not show the frame around the window and the titlebar across the top
    :type no_titlebar: (bool)
    :param grab_anywhere:  If True can grab anywhere to move the window. If no_titlebar is True, grab_anywhere should likely be enabled too
    :type grab_anywhere: (bool)
    :param location:   Location on screen to display the top left corner of window. Defaults to window centered on screen
    :type location: Tuple[int, int]
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param any_key_closes: If True then will turn on return_keyboard_events for the window which will cause window to close as soon as any key is pressed.  Normally the return key only will close the window.  Default is false.
    :type any_key_closes: (bool)
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None]
    """
    ...

def MsgBox(*args):
    """
    Do not call this anymore it will raise exception.  Use Popups instead
    :param *args:

    """
    ...

def PopupScrolled(*args, title=..., button_color=..., background_color=..., text_color=..., yes_no=..., auto_close=..., auto_close_duration=..., size=..., location=..., non_blocking=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., font=..., image=..., modal=...):
    """
    Show a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you
    want, just like a print statement.

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color:  button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param yes_no:  If True, displays Yes and No buttons instead of Ok
    :type yes_no: (bool)
    :param auto_close:   if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: (int, int)
    :param location:  Location on the screen to place the upper left corner of the window
    :type location: Tuple[int, int]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True, than can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

ScrolledTextBox = PopupScrolled
sprint = ScrolledTextBox
def PopupNoButtons(*args, title=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """Show a Popup but without any buttons

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking:  If True then will immediately return from the function without waiting for the user's input. (Default = False)
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True, than can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]    """
    ...

def PopupNonBlocking(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Show Popup window and immediately return (does not block)

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (int)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal: bool
    :return: Reason for popup closing
    :rtype: Union[str, None]
    """
    ...

PopupNoWait = PopupNonBlocking
def PopupQuick(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Show Popup box that doesn't block and closes itself

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (int)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

def PopupQuickMessage(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Show Popup window with no titlebar, doesn't block, and auto closes itself.

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (int)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = False
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

def PopupNoTitlebar(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display a Popup without a titlebar.   Enables grab anywhere so you can move it

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (int)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

PopupNoFrame = PopupNoTitlebar
PopupNoBorder = PopupNoTitlebar
PopupAnnoying = PopupNoTitlebar
def PopupAutoClose(*args, title=..., button_type=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """Popup that closes itself after some time period

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (int)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

PopupTimed = PopupAutoClose
def PopupError(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Popup with colored button and 'Error' as button text

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

def PopupCancel(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display Popup with "cancelled" button text

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

def PopupOK(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display Popup with OK button only

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]
    """
    ...

def PopupOKCancel(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display popup with OK and Cancel buttons

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: clicked button
    :rtype: Union["OK", "Cancel", None]
    """
    ...

def PopupYesNo(*args, title=..., button_color=..., background_color=..., text_color=..., auto_close=..., auto_close_duration=..., non_blocking=..., icon=..., line_width=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display Popup with Yes and No buttons

    :param *args: Variable number of items to display
    :type *args: (Any)
    :param title: Title to display in the window.
    :type title: (str)
    :param button_color: button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]
    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: clicked button
    :rtype: Union["Yes", "No", None]
    """
    ...

def PopupGetFolder(message, title=..., default_path=..., no_window=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., initial_folder=..., image=..., modal=...):
    """
    Display popup with text entry field and browse button so that a folder can be chosen.

    :param message:  message displayed to user
    :type message: (str)
    :param title:  Window title
    :type title: (str)
    :param default_path: path to display to user as starting point (filled into the input field)
    :type default_path: (str)
    :param no_window:  if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window: (bool)
    :param size: (width, height) of the InputText Element
    :type size: (int, int)
    :param button_color:  button color (foreground, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param initial_folder:  location in filesystem to begin browsing
    :type initial_folder: (str)
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: string representing the path chosen, None if cancelled or window closed with X
    :rtype: Union[str, None]
    """
    ...

def PopupGetFile(message, title=..., default_path=..., default_extension=..., save_as=..., multiple_files=..., file_types=..., no_window=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., initial_folder=..., image=..., modal=...):
    """
    Display popup window with text entry field and browse button so that a file can be chosen by user.

    :param message:  message displayed to user
    :type message: (str)
    :param title:  Window title
    :type title: (str)
    :param default_path: path to display to user as starting point (filled into the input field)
    :type default_path: (str)
    :param default_extension:  If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension: (str)
    :param save_as: if True, the "save as" dialog is shown which will verify before overwriting
    :type save_as: (bool)
    :param multiple_files:  if True, then allows multiple files to be selected that are returned with ';' between each filename
    :type multiple_files: (bool)
    :param file_types: List of extensions to show using wildcards. All files (the default) = (("ALL Files", "*.*"),)
    :type file_types:  Tuple[Tuple[str,str]]
    :param no_window:  if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window:  (bool)
    :param size: (width, height) of the InputText Element
    :type size: (int, int)
    :param button_color: Color of the button (text, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: background color of the entire window
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param initial_folder:  location in filesystem to begin browsing
    :type initial_folder: (str)
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: string representing the file(s) chosen, None if cancelled or window closed with X
    :rtype: Union[str, None]
    """
    ...

def PopupGetText(message, title=..., default_text=..., password_char=..., size=..., button_color=..., background_color=..., text_color=..., icon=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., image=..., modal=...):
    """
    Display Popup with text entry field. Returns the text entered or None if closed / cancelled

    :param message: message displayed to user
    :type message: (str)
    :param title: Window title
    :type title: (str)
    :param default_text: default value to put into input area
    :type default_text: (str)
    :param password_char: character to be shown instead of actually typed characters
    :type password_char: (str)
    :param size: (width, height) of the InputText Element
    :type size: (int, int)
    :param button_color:  Color of the button (text, background)
    :type button_color: Tuple[str, str] or str
    :param background_color: background color of the entire window
    :type background_color: (str)
    :param text_color: color of the message text
    :type text_color: (str)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True can click and drag anywhere in the window to move the window
    :type grab_anywhere: (bool)
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location: (x,y) Location on screen to display the upper left corner of window
    :type location: Tuple[int, int]
    :param image:  Image to include at the top of the popup window
    :type image: (str) or (bytes)
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Text entered or None if window was closed or cancel button clicked
    :rtype: Union[str, None]
    """
    ...

def popup_get_date(start_mon=..., start_day=..., start_year=..., begin_at_sunday_plus=..., no_titlebar=..., title=..., keep_on_top=..., location=..., close_when_chosen=..., icon=..., locale=..., month_names=..., day_abbreviations=..., modal=...):
    """
    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)

    :param start_mon: The starting month
    :type start_mon: (int)
    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start
    :type start_day: Union[int, None]
    :param start_year: The starting year
    :type start_year: (int)
    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc
    :type begin_at_sunday_plus: (int)
    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO
    :type icon: (str)
    :param location: (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location: (int, int)
    :param title: Title that will be shown on the window
    :type title: (str)
    :param close_when_chosen: MIKE_please_add_text_here
    :type close_when_chosen: (bool)
    :param locale: locale used to get the day names
    :type locale: (str)
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param keep_on_top: If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param month_names: optional list of month names to use (should be 12 items)
    :type month_names: List[str]
    :param day_abbreviations: optional list of abbreviations to display as the day of week
    :type day_abbreviations: List[str]
    :param modal: If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True
    :type modal: bool
    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled
    :rtype: None or (int, int, int)
    """
    ...

def PopupAnimated(image_source, message=..., background_color=..., text_color=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., alpha_channel=..., time_between_frames=..., transparent_color=..., title=..., icon=...):
    """
     Show animation one frame at a time.  This function has its own internal clocking meaning you can call it at any frequency
     and the rate the frames of video is shown remains constant.  Maybe your frames update every 30 ms but your
     event loop is running every 10 ms.  You don't have to worry about delaying, just call it every time through the
     loop.

    :param image_source:  Either a filename or a base64 string.
    :type image_source: Union[str, bytes]
    :param message:  An optional message to be shown with the animation
    :type message: (str)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, tuple]
    :param no_titlebar:   If True then the titlebar and window frame will not be shown
    :type no_titlebar: (bool)
    :param grab_anywhere:  If True then you can move the window just clicking anywhere on window, hold and drag
    :type grab_anywhere: (bool)
    :param keep_on_top:   If True then Window will remain on top of all other windows currently shownn
    :type keep_on_top:  (bool)
    :param location:   (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location:  (int, int)
    :param alpha_channel:  Window transparency 0 = invisible 1 = completely visible. Values between are see through
    :type alpha_channel: (float)
    :param time_between_frames:  Amount of time in milliseconds between each frame
    :type time_between_frames: (int)
    :param transparent_color:  This color will be completely see-through in your window. Can even click through
    :type transparent_color: (str)
    :param title:  Title that will be shown on the window
    :type title: (str)
    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO
    :type icon: str
    :return: No return value
    :rtype: None
    """
    ...

def popup_notify(*args, title=..., icon=..., display_duration_in_ms=..., fade_in_duration=..., alpha=..., location=...):
    """
    Displays a "notification window", usually in the bottom right corner of your display.  Has an icon, a title, and a message.  It is more like a "toaster" window than the normal popups.

    The window will slowly fade in and out if desired.  Clicking on the window will cause it to move through the end the current "phase". For example, if the window was fading in and it was clicked, then it would immediately stop fading in and instead be fully visible.  It's a way for the user to quickly dismiss the window.

    The return code specifies why the call is returning (e.g. did the user click the message to dismiss it)

    :param title: Text to be shown at the top of the window in a larger font
    :type title: (str)
    :param message: Text message that makes up the majority of the window
    :type message: (str)
    :param icon: A base64 encoded PNG/GIF image or PNG/GIF filename that will be displayed in the window
    :type icon: Union[bytes, str]
    :param display_duration_in_ms: Number of milliseconds to show the window
    :type display_duration_in_ms: (int)
    :param fade_in_duration: Number of milliseconds to fade window in and out
    :type fade_in_duration: (int)
    :param alpha: Alpha channel. 0 - invisible 1 - fully visible
    :type alpha: (float)
    :param location: Location on the screen to display the window
    :type location: Tuple[int, int]
    :return: reason for returning
    :rtype: (int)
    """
    ...

def shell_with_animation(command, args=..., image_source=..., message=..., background_color=..., text_color=..., font=..., no_titlebar=..., grab_anywhere=..., keep_on_top=..., location=..., alpha_channel=..., time_between_frames=..., transparent_color=...):
    """
    Execute a "shell command" (anything capable of being launched using subprocess.run) and
    while the command is running, show an animated popup so that the user knows that a long-running
    command is being executed.  Without this mechanism, the GUI appears locked up.

    :param command: The command to run
    :type command: (str)
    :param args: List of arguments
    :type args: List[str]
    :param image_source: Either a filename or a base64 string.
    :type image_source: Union[str, bytes]
    :param message:  An optional message to be shown with the animation
    :type message: (str)
    :param background_color: color of background
    :type background_color: (str)
    :param text_color:  color of the text
    :type text_color: (str)
    :param font:  specifies the font family, size, etc
    :type font: Union[str, tuple]
    :param no_titlebar: If True then the titlebar and window frame will not be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True then you can move the window just clicking anywhere on window, hold and drag
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True then Window will remain on top of all other windows currently shownn
    :type keep_on_top: (bool)
    :param location:  (x,y) location on the screen to place the top left corner of your window. Default is to center on screen
    :type location: (int, int)
    :param alpha_channel:  Window transparency 0 = invisible 1 = completely visible. Values between are see through
    :type alpha_channel: (float)
    :param time_between_frames: Amount of time in milliseconds between each frame
    :type time_between_frames: (int)
    :param transparent_color: This color will be completely see-through in your window. Can even click through
    :type transparent_color: (str)
    :return: The resulting string output from stdout
    :rtype: (str)
    """
    ...

class UserSettings:
    _default_for_function_interface: UserSettings = ...
    def __init__(self, filename=..., path=..., silent_on_error=...) -> None:
        """
        User Settings

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename: (str or None)
        :param path: The folder that the settings file will be stored in. Do not include the filename.
        :type path: (str or None)
        """
        ...
    
    def __repr__(self):
        """
        Converts the settings dictionary into a string for easy display

        :return: (str) the dictionary as a string
        """
        ...
    
    def set_default_value(self, default):
        """
        Set the value that will be returned if a requested setting is not found

        :param default: value to be returned if a setting is not found in the settings dictionary
        :type default: Any
        """
        ...
    
    def set_location(self, filename=..., path=...):
        """
        Sets the location of the settings file

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename: (str or None)
        :param path: The folder that the settings file will be stored in. Do not include the filename.
        :type path: (str or None)
        """
        ...
    
    def get_filename(self, filename=..., path=...):
        """
        Sets the filename and path for your settings file.  Either paramter can be optional.

        If you don't choose a path, one is provided for you that is OS specific
        Windows path default = users/name/AppData/Local/PySimpleGUI/settings.

        If you don't choose a filename, your application's filename + '.json' will be used.

        Normally the filename and path are split in the user_settings calls. However for this call they
        can be combined so that the filename contains both the path and filename.

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename: (str or None)
        :param path: The folder that the settings file will be stored in. Do not include the filename.
        :type path: (str or None)
        :return: The full pathname of the settings file that has both the path and filename combined.
        :rtype: (str)
        """
        ...
    
    def save(self, filename=..., path=...):
        """
        Saves the current settings dictionary.  If a filename or path is specified in the call, then it will override any
        previously specitfied filename to create a new settings file.  The settings dictionary is then saved to the newly defined file.

        :param filename: The fFilename to save to. Can specify a path or just the filename. If no filename specified, then the caller's filename will be used.
        :type filename: (str or None)
        :param path: The (optional) path to use to save the file.
        :type path: (str or None)
        :return: The full path and filename used to save the settings
        :rtype: (str)
        """
        ...
    
    def load(self, filename=..., path=...):
        """
        Specifies the path and filename to use for the settings and reads the contents of the file.
        The filename can be a full filename including a path, or the path can be specified separately.
        If  no filename is specified, then the caller's filename will be used with the extension ".json"

        :param filename: Filename to load settings from (and save to in the future)
        :type filename: (str or None)
        :param path: Path to the file. Defaults to a specific folder depending on the operating system
        :type path: (str or None)
        :return: The settings dictionary (i.e. all settings)
        :rtype: (dict)
        """
        ...
    
    def delete_file(self, filename=..., path=...):
        """
        Deltes the filename and path for your settings file.  Either paramter can be optional.
        If you don't choose a path, one is provided for you that is OS specific
        Windows path default = users/name/AppData/Local/PySimpleGUI/settings.
        If you don't choose a filename, your application's filename + '.json' will be used
        Also sets your current dictionary to a blank one.

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename: (str or None)
        :param path: The folder that the settings file will be stored in. Do not include the filename.
        :type path: (str or None)
        """
        ...
    
    def write_new_dictionary(self, settings_dict):
        """
        Writes a specified dictionary to the currently defined settings filename.

        :param settings_dict: The dictionary to be written to the currently defined settings file
        :type settings_dict: (dict)
        """
        ...
    
    def read(self):
        """
        Reads settings file and returns the dictionary.

        :return: settings dictionary
        :rtype: (dict)
        """
        ...
    
    def exists(self, filename=..., path=...):
        """
        Check if a particular settings file exists.  Returns True if file exists

        :param filename: The name of the file to use. Can be a full path and filename or just filename
        :type filename: (str or None)
        :param path: The folder that the settings file will be stored in. Do not include the filename.
        :type path: (str or None)
        """
        ...
    
    def delete_entry(self, key):
        """
        Deletes an individual entry.  If no filename has been specified up to this point,
        then a default filename will be used.
        After value has been deleted, the settings file is written to disk.

        :param key:  Setting to be deleted. Can be any valid dictionary key type (i.e. must be hashable)
        :type key: (Any)
        """
        ...
    
    def set(self, key, value):
        """
        Sets an individual setting to the specified value.  If no filename has been specified up to this point,
        then a default filename will be used.
        After value has been modified, the settings file is written to disk.

        :param key:  Setting to be saved. Can be any valid dictionary key type
        :type key: (Any)
        :param value: Value to save as the setting's value. Can be anything
        :type value:  (Any)
        """
        ...
    
    def get(self, key, default=...):
        """
        Returns the value of a specified setting.  If the setting is not found in the settings dictionary, then
        the user specified default value will be returned.  It no default is specified and nothing is found, then
        the "default value" is returned.  This default can be specified in this call, or previously defined
        by calling set_default. If nothing specified now or previously, then None is returned as default.

        :param key: Key used to lookup the setting in the settings dictionary
        :type key: (Any)
        :param default: Value to use should the key not be found in the dictionary
        :type default: (Any)
        :return: Value of specified settings
        :rtype: (Any)
        """
        ...
    
    def get_dict(self):
        """
        Returns the current settings dictionary.  If you've not setup the filename for the
        settings, a default one will be used and then read.

        Note that you can display the dictionary in text format by printing the object itself.

        :return: The current settings dictionary
        :rtype: Dict
        """
        ...
    
    def __setitem__(self, item, value):
        """
        Enables setting a setting by using [ ] notation like a dictionary.
        Your code will have this kind of design pattern:
        settings = sg.UserSettings()
        settings[item] = value

        :param item: The key for the setting to change. Needs to be a hashable type. Basically anything but a list
        :type item: Any
        :param value: The value to set the setting to
        :type value: Any
        """
        ...
    
    def __getitem__(self, item):
        """
        Enables accessing a setting using [ ] notation like a dictionary.
        If the entry does not exist, then the default value will be returned.  This default
        value is None unless user sets by calling UserSettings.set_default_value(default_value)

        :param item: The key for the setting to change. Needs to be a hashable type. Basically anything but a list
        :type item: Any
        :return: The setting value
        :rtype: Any
        """
        ...
    
    def __delitem__(self, item):
        """
        Delete an individual user setting.  This is the same as calling delete_entry.  The syntax
        for deleting the item using this manner is:
            del settings['entry']
        :param item: The key for the setting to delete
        :type item: Any
        """
        ...
    


if UserSettings._default_for_function_interface is None:
    ...
def user_settings_filename(filename=..., path=...):
    """
    Sets the filename and path for your settings file.  Either paramter can be optional.

    If you don't choose a path, one is provided for you that is OS specific
    Windows path default = users/name/AppData/Local/PySimpleGUI/settings.

    If you don't choose a filename, your application's filename + '.json' will be used.

    Normally the filename and path are split in the user_settings calls. However for this call they
    can be combined so that the filename contains both the path and filename.

    :param filename: The name of the file to use. Can be a full path and filename or just filename
    :type filename: (str)
    :param path: The folder that the settings file will be stored in. Do not include the filename.
    :type path: (str)
    :return: The full pathname of the settings file that has both the path and filename combined.
    :rtype: (str)
    """
    ...

def user_settings_delete_filename(filename=..., path=...):
    """
    Deltes the filename and path for your settings file.  Either paramter can be optional.
    If you don't choose a path, one is provided for you that is OS specific
    Windows path default = users/name/AppData/Local/PySimpleGUI/settings.
    If you don't choose a filename, your application's filename + '.json' will be used
    Also sets your current dictionary to a blank one.

    :param filename: The name of the file to use. Can be a full path and filename or just filename
    :type filename: (str)
    :param path: The folder that the settings file will be stored in. Do not include the filename.
    :type path: (str)
    """
    ...

def user_settings_set_entry(key, value):
    """
    Sets an individual setting to the specified value.  If no filename has been specified up to this point,
    then a default filename will be used.
    After value has been modified, the settings file is written to disk.

    :param key:  Setting to be saved. Can be any valid dictionary key type
    :type key: (Any)
    :param value: Value to save as the setting's value. Can be anything
    :type value:  (Any)
    """
    ...

def user_settings_delete_entry(key):
    """
    Deletes an individual entry.  If no filename has been specified up to this point,
    then a default filename will be used.
    After value has been deleted, the settings file is written to disk.

    :param key:  Setting to be saved. Can be any valid dictionary key type (hashable)
    :type key: (Any)
    """
    ...

def user_settings_get_entry(key, default=...):
    """
    Returns the value of a specified setting.  If the setting is not found in the settings dictionary, then
    the user specified default value will be returned.  It no default is specified and nothing is found, then
    None is returned.  If the key isn't in the dictionary, then it will be added and the settings file saved.
    If no filename has been specified up to this point, then a default filename will be assigned and used.
    The settings are SAVED prior to returning.

    :param key: Key used to lookup the setting in the settings dictionary
    :type key: (Any)
    :param default: Value to use should the key not be found in the dictionary
    :type default: (Any)
    :return: Value of specified settings
    :rtype: (Any)
    """
    ...

def user_settings_save(filename=..., path=...):
    """
    Saves the current settings dictionary.  If a filename or path is specified in the call, then it will override any
    previously specitfied filename to create a new settings file.  The settings dictionary is then saved to the newly defined file.

    :param filename: The fFilename to save to. Can specify a path or just the filename. If no filename specified, then the caller's filename will be used.
    :type filename: (str)
    :param path: The (optional) path to use to save the file.
    :type path: (str)
    :return: The full path and filename used to save the settings
    :rtype: (str)
    """
    ...

def user_settings_load(filename=..., path=...):
    """
    Specifies the path and filename to use for the settings and reads the contents of the file.
    The filename can be a full filename including a path, or the path can be specified separately.
    If  no filename is specified, then the caller's filename will be used with the extension ".json"

    :param filename: Filename to load settings from (and save to in the future)
    :type filename: (str)
    :param path: Path to the file. Defaults to a specific folder depending on the operating system
    :type path: (str)
    :return: The settings dictionary (i.e. all settings)
    :rtype: (dict)
    """
    ...

def user_settings_file_exists(filename=..., path=...):
    """
    Determines if a settings file exists.  If so a boolean True is returned.
    If either a filename or a path is not included, then the appropriate default
    will be used.

    :param filename: Filename to check
    :type filename: (str)
    :param path: Path to the file. Defaults to a specific folder depending on the operating system
    :type path: (str)
    :return: True if the file exists
    :rtype: (bool)
    """
    ...

def user_settings_write_new_dictionary(settings_dict):
    """
    Writes a specified dictionary to the currently defined settings filename.

    :param settings_dict: The dictionary to be written to the currently defined settings file
    :type settings_dict: (dict)
    """
    ...

def user_settings_silent_on_error(silent_on_error=...):
    """
    Used to control the display of error messages.  By default, error messages are displayed to stdout.

    :param silent_on_error: If True then all error messages are silenced (not displayed on the console)
    :type silent_on_error: (bool)
    """
    ...

def user_settings():
    """
    Returns the current settings dictionary.  If you've not setup the filename for the
    settings, a default one will be used and then read.

    :return: The current settings dictionary
    :rtype: (dict)
    """
    ...

PSGDebugLogo = b'R0lGODlhMgAtAPcAAAAAADD/2akK/4yz0pSxyZWyy5u3zZ24zpW30pG52J250J+60aC60KS90aDC3a3E163F2K3F2bPI2bvO3rzP3qvJ4LHN4rnR5P/zuf/zuv/0vP/0vsDS38XZ6cnb6f/xw//zwv/yxf/1w//zyP/1yf/2zP/3z//30wyAC0AAAj/AP8JHEiwoMGDCBMqXMiwoUOFAiJGXBigYoAPDxlK3CigwUGLIAOEyIiQI8cCBUOqJFnQpEkGA1XKZPlPgkuXBATK3JmRws2bB3TuXNmQw8+jQoeCbHj0qIGkSgNobNoUqlKIVJs++BfV4oiEWalaHVpyosCwJidw7Sr1YMQFBDn+y4qSbUW3AiDElXiWqoK1bPEKGLixr1jAXQ9GuGn4sN22Bl02roo4Kla+c8OOJbsQM9rNPJlORlr5asbPpTk/RP2YJGu7rjWnDm2RIQLZrSt3zgp6ZmqwmkHAng3ccWDEMe8Kpnw8JEHlkXnPdh6SxHPILaU/dp60LFUP07dfRq5aYntohAO0m+c+nvT6pVMPZ3jv8AJu8xktyNbw+ATJDtKFBx9NlA20gWU0DVQBYwZhsJMICRrkwEYJJGRCSBtEqGGCAQEAOw=='
red_x = b"R0lGODlhEAAQAPeQAIsAAI0AAI4AAI8AAJIAAJUAAJQCApkAAJoAAJ4AAJkJCaAAAKYAAKcAAKcCAKcDA6cGAKgAAKsAAKsCAKwAAK0AAK8AAK4CAK8DAqUJAKULAKwLALAAALEAALIAALMAALMDALQAALUAALYAALcEALoAALsAALsCALwAAL8AALkJAL4NAL8NAKoTAKwbAbEQALMVAL0QAL0RAKsREaodHbkQELMsALg2ALk3ALs+ALE2FbgpKbA1Nbc1Nb44N8AAAMIWAMsvAMUgDMcxAKVABb9NBbVJErFYEq1iMrtoMr5kP8BKAMFLAMxKANBBANFCANJFANFEB9JKAMFcANFZANZcANpfAMJUEMZVEc5hAM5pAMluBdRsANR8AM9YOrdERMpIQs1UVMR5WNt8X8VgYMdlZcxtYtx4YNF/btp9eraNf9qXXNCCZsyLeNSLd8SSecySf82kd9qqc9uBgdyBgd+EhN6JgtSIiNuJieGHhOGLg+GKhOKamty1ste4sNO+ueenp+inp+HHrebGrefKuOPTzejWzera1O7b1vLb2/bl4vTu7fbw7ffx7vnz8f///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAJAALAAAAAAQABAAAAjUACEJHEiwYEEABniQKfNFgQCDkATQwAMokEU+PQgUFDAjjR09e/LUmUNnh8aBCcCgUeRmzBkzie6EeQBAoAAMXuA8ciRGCaJHfXzUMCAQgYooWN48anTokR8dQk4sELggBhQrU9Q8evSHiJQgLCIIfMDCSZUjhbYuQkLFCRAMAiOQGGLE0CNBcZYmaRIDLqQFGF60eTRoSxc5jwjhACFWIAgMLtgUocJFy5orL0IQRHAiQgsbRZYswbEhBIiCCH6EiJAhAwQMKU5DjHCi9gnZEHMTDAgAOw=="
COLOR_SCHEME = 'LightGreen'
WIDTH_VARIABLES = 23
WIDTH_RESULTS = 46
WIDTH_WATCHER_VARIABLES = 20
WIDTH_WATCHER_RESULTS = 60
WIDTH_LOCALS = 80
NUM_AUTO_WATCH = 9
MAX_LINES_PER_RESULT_FLOATING = 4
MAX_LINES_PER_RESULT_MAIN = 3
POPOUT_WINDOW_FONT = 'Sans 8'
class _Debugger:
    debugger = ...
    def __init__(self) -> None:
        ...
    


def show_debugger_window(location=..., *args):
    """
    Shows the large main debugger window
    :param location:  Locations (x,y) on the screen to place upper left corner of the window
    :type location: Tuple[int, int]
    :return: None
    :rtype: None
    """
    ...

def show_debugger_popout_window(location=..., *args):
    """
    Shows the smaller "popout" window.  Default location is the upper right corner of your screen

    :param location:  Locations (x,y) on the screen to place upper left corner of the window
    :type location: Tuple[int, int]
    :return: None
    :rtype: None
    """
    ...

ICON_BASE64_BLOB_PALM = b''
ICON_BASE64_BLOB_PAT = b''
ICON_BASE64_BLOB_THINK = b''
ICON_BASE64_BLOB_THINK2 = b''
ICON_BASE64_BROW = b''
ICON_BASE64_BLOB_HEADACHE = b''
ICON_BASE64_LEGO_THINK = b''
ICON_BASE64_THINK = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAD+paVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0NSA3OS4xNjIzMTksIDIwMTgvMDIvMTUtMjA6Mjk6NDMgICAgICAgICI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgRWxlbWVudHMgMTcuMCAoV2luZG93cyk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjAtMDctMDJUMTc6MDI6MDUtMDQ6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIwLTA3LTAyVDE3OjAyOjUxLTA0OjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMC0wNy0wMlQxNzowMjo1MS0wNDowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2UvcG5nPC9kYzpmb3JtYXQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6NGZjMmNkMTQtYjBhZi05ODQ0LTkyNTAtZTk1NTRhYjMzYzJmPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8eG1wTU06RG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6NTU3OWQyOWUtYmNhNy0xMWVhLWExMGItYjE5ZmEzMTU3NWFkPC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6OWUzNGE0MWQtOTM2YS1jZTRhLTgzNTMtZWVhYWEyYWQ2NjU1PC94bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpIaXN0b3J5PgogICAgICAgICAgICA8cmRmOlNlcT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjllMzRhNDFkLTkzNmEtY2U0YS04MzUzLWVlYWFhMmFkNjY1NTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMC0wNy0wMlQxNzowMjowNS0wNDowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIEVsZW1lbnRzIDE3LjAgKFdpbmRvd3MpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDoxMGZiMmQwMi04NmUzLTAyNDMtYTc0Ny1hOGVkODM3NDU3NDk8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMjAtMDctMDJUMTc6MDI6NTEtMDQ6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIFBob3Rvc2hvcCBFbGVtZW50cyAxNy4wIChXaW5kb3dzKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+ZGVyaXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5jb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZzwvc3RFdnQ6cGFyYW1ldGVycz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6NGZjMmNkMTQtYjBhZi05ODQ0LTkyNTAtZTk1NTRhYjMzYzJmPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDIwLTA3LTAyVDE3OjAyOjUxLTA0OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgRWxlbWVudHMgMTcuMCAoV2luZG93cyk8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICA8L3JkZjpTZXE+CiAgICAgICAgIDwveG1wTU06SGlzdG9yeT4KICAgICAgICAgPHhtcE1NOkRlcml2ZWRGcm9tIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgPHN0UmVmOmluc3RhbmNlSUQ+eG1wLmlpZDoxMGZiMmQwMi04NmUzLTAyNDMtYTc0Ny1hOGVkODM3NDU3NDk8L3N0UmVmOmluc3RhbmNlSUQ+CiAgICAgICAgICAgIDxzdFJlZjpkb2N1bWVudElEPnhtcC5kaWQ6OWUzNGE0MWQtOTM2YS1jZTRhLTgzNTMtZWVhYWEyYWQ2NjU1PC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICAgICA8c3RSZWY6b3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6OWUzNGE0MWQtOTM2YS1jZTRhLTgzNTMtZWVhYWEyYWQ2NjU1PC9zdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDwveG1wTU06RGVyaXZlZEZyb20+CiAgICAgICAgIDxwaG90b3Nob3A6Q29sb3JNb2RlPjM8L3Bob3Rvc2hvcDpDb2xvck1vZGU+CiAgICAgICAgIDxwaG90b3Nob3A6SUNDUHJvZmlsZT5zUkdCIElFQzYxOTY2LTIuMTwvcGhvdG9zaG9wOklDQ1Byb2ZpbGU+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyMDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+NzIwMDAwLzEwMDAwPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjUwPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjUwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz7Z0mgMAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAzySURBVHjatFp7UFzndf+d7959wPLcFQKEQBiEDHoDltB75Ei25WTsNIkdeayJXTudJp04mbT+w/0jM53OONN4kr6cNJ5p6zgPN9NWSWvFiS25lZrI0QPJIPQASQgJEAhYYGHZ991773f6x+6iZbUvUPTNLMtw7/3u+Z3X75zzQcyMB7k2t3UQAPR0d3K264mV6b5c76DFAskm2KFndtHmRktp6xpreWONxVJRQvYCKxUBQDjKkSkfa7fG9FD39Wjg4k09NO4x9UBImpqO5L14KYAWBWRzWwelvuArX9ojtjRbLDvW2ZyNNepWq0qPwZT1AAoBKiRCAQAwQwKsAQhDEZ6owaM37xiXTvdqF89f04euDkXn/CGWSeLwYsDkDSQZRGtbB7W3WGyf211Y2dZkXVtZLrYJxg4ADwEoAWABoAIQAChJ0xKACUAHEAIwy4QR96x5umtA/+17J0PXPrmqz6VIlBegnEBSXWnnjm3iTz9bXPP0TtuBEps4oAg0A6gAUBAHoMSFTwBIBpL4ToAyAIQBzJgS/T5NfvSrU9rRfz7ivx2McHQxrpYVSCqIz31mh/LNgyXrd6+1viQIjwKoYuYiU7LVlCzATCQIiiBShMj2Xk6xUsJCE5Lx+4+vRn/xD//u6xwaNwMcU0ROMDmBJB5+4dldlm9+sWRra4PyCoE6gmF92fhUwD41E1I8s2EKhKLEzLBZVZSV2OAqK0TV8iJUlBdAEOUClQCkAZhhcE/PLePdvz/s/+jSgO7LxzJ5xciXn99te+1Qyd6mKuXPAGwZHPWWf3BiwDox6RPeuTBFdYnkbRQFcBTasHxZEdo3VGPfzodAucMw2To+BvoG3PLtN971vt91TffFt6ee7k6Z7mGRK7d/8emdyqsHi7c3VSrfIGAbiJzdl8dtl69OCPd0kIgEVte7sLujDvt3NWB720pULy9FMKTj5pAHHxzvh5SMPPRFcXmsAMoIWLd6uXj5Lw6WrG1aqaKnu5N7ujtlKu8klporxb7wpGNFc43yJSJsAlAKKa2P7WmgUNighroytG6oRmGBBWCO6ZQIIMKUJ4AzXXdQ4SyAUAiUX3JMJAkVQCkR1jXXKAdf/LTjKgBvNhrI6lqvv/po2avPFn29wEIvAlgBwBZ/hqAIQMaETxcCzAAEAcyZ3YoSPxi4VwwJIApgPKTjzb877H/rW3/7f9qigRzYv8P69l86D60oF98goDFGcAt4YX5FdBOX+twQCmFtUwUKrAooQ4AzEeb8EYxP+jEzG0ZEk1BVQmmxLZYcnA4IAuhuzEQYGBibla98+Tszp47+72lOB0bNpKyvfaGoubqM/oiAGgD2bCC+/845jI55ARA2tlTi5efakC4oZuYi+PmRXgyPzkLXTUgp4zFOICIoikCFy4HdHavQvrGaCiyKAGAjoKa6jF782ueLLgOYS5e90gb7wc/uVPe32x4VRA8DcCSR3D2ucfqTEdwa9iCiGYhoOs52j6LvxhTusTQBPX1uXBtwIxjUYBgmolEDWtSEFjWgRQ1EdQPDIzP46eEL+Jd3u6CbMpEAHIJo+2OP2NdkUnxaIE9uL3BZQTsBOONZJK2fMANDI16wvCu0EMCFy+OxX1KS66aW5djRXodP7WrApvXVUNS799htKvbvacKW1pWorCiC1xeBjO1L8YqhwkK8/sff2a/klbUO7NtO3/5K2SahoDFedohMQFJpOtdylRXguafWQdNNHP7wKnRDzm8cCuuory3FgT0NGHX7IQBYYkATVikUgtZuaLDY4lVAdousqrGoNS7RTjFrWLKBIALqa8sgxN1bTAm0bqwGpEzvAoJgmhKRsLFAA8yAL6DBZhFYXVuGhtqy5IqAAFgJaKlxiaq8XKvWJYpdxaIlKTaymmLHI7VoXOWC3abCbrNge1st1q5eljFrAYDVqqCs1AYSydUAodLlyPY2AaDZVSwef/3P99pSyfse16pdrrpUlarA87GR1a3sFgWvvLQVl666IUQs/UJmIJcEEFXBhocrcfmaGxPuABSFsKGlEjWVxZkUkJDDpaq0tXa5+ksAU8nZawGQXTu30bdeKKmiWE+h5AKRDGbrxhWL6jSb6svx3NMb0DcwhUK7Ba3rquCwq7lY30JASaVTWHft3Ea/P3U2PY+oKpGzWKwEzwf5A1uqIrC2cRmaVpWDiKAqApRbbQIMu7NYqKpKmWNEERCFNnKC5zMVPUgwRIDVosCi5gWC4knBUVAg7L/93RlOjhGRcicJhVSmB2uN+0MPoQhY9j+6nTJaRAKsG6xRrMbJTRFZCk7OfnkpK8GOUtcZMlv6NU02AyE5HO+jZS4QZjgENs0FEjMBLAhSMkwpY4CE+EMBkwBCgaCMmiZnZvbfnTzLR37w+HUmuInRnG1HbeA69PE7IKsN9uZ1UMrKwQDOdI3iyLHrCIU1SMmwWlVUOIvQsmYZNq2rwnJnIQrtaq72NyMQJnim/BwyjBwlypjHnGBGHwHb46U73xP0RJChIEgIwNAR6bsM+8ZWiKJiDI144QuEoQgBoRCiUQPDd2YwODqD/zl5Ew83uLDtkTqsXe1CcaF1MW4lAUSZMTPuMTU9F5DRSTMS1rjHYSN/fEYl0rmVUlYO6ZuLpR5pQr8zAtuaFuzb9RDqakpgtagQgmAYJmZ8GoZGvOi/OY3e/kkMjsyidcMKPLV/DcqLbVmrgBQw4bDGd0YnzYiezbUA4PaEzlNec8BRqY4BqErbszBDlJQuMJUM+AFNQ6XLMd8cJfKBKSWiugmPT8PR4zdw/uIoznSNoK6mFHu31uULwgAwN+U1+29P6JFEvCWY/R5t/+yXp3hkWg4z0BufaMj0HJDyqGlCapFYBqGFXKEqAoV2C1ZWOPAnh9rwxwfbUFtdihWVxYtxqwgDV0amZe/QhGmmNlZpa4LTvdHZbS3WixaBpzJ1hzIUWPgHZrBp5CBAAiRj++YV6Ni8AoIoX8Y1AXh1k//zdG908ONTZ2VejdVrb5zQPQF5jhmT8U14ocwSxsT4wsKQCKSouTmHADZ0sHcW+sgwtIHrMKbc4PRlP8ffH2ZGvyeIztfeOGHm3SECwI9+HehjQccABJOBMEtEB/ohQ8GUtKFCFBTe224RgSXDDPgRvT2I8MVuhLvPQ7t2BfrtIRgTY4jeHozFWPoJpA7AzQLvv/PrwPSSRqYXf/Fk3cZ69S0i2gfAyrpO0eFBGO6xhSQIwNa4BpbK6phmWUJqGqTPC2PGA+n3gQ0dBEpb3pOqwtrUDNVVkUp+MRDM/3VpyPjupmc+HFtUz55YP/zvwIjbJ/8GwBBLk/XRYRju8XsoWlisIFVFdPQ2tBtXEe7pQqTnE0Rv3oD0zgKmGUsOySA4Pj2xWiGcLghHUSoIA8AMgBNun3zrh+8FJu7rWOEHf/Up8dITji9Ypkff0odvuTK1sBAi1t5yhpqZOXZJUSAcRRBFxbFvux2isAhktSa7kwHAA+BYUOM33zkWvPTKX58w0w3mFjXE/uAf9xTvoZ4jxLx3SaW9okBdthxKuROiqBikqgCJWGVw10rJMeEDcFwyf+9YV/TSt3/qk4GwlNmOFdR85BjtHSFeyxpRRn3n7ohKymIxkJ7FE9kpGp/xXoga/HbXgN77+o+9CGq5D3ryAtKyLFwPRj0IS6tfTROmZxKq0wWyWNKRnRmvuCcBnPJH+GfHPomce/OwXw9q85bCfQMpVEynEHDEXyqW5l6W5KEdp1hhCsAFZhz3hPjETz4M3nz/VFj3hTjv0928gBiSwswIEcFczFBiPhBtdlhX1oIUhVMOdGbjAI6CcPL8Lf3W937uDw6NGzjXeXZR1lfzOXabClvdjPAoAZXxod2iYoV1HaZvjoWjSAKIxD+DUuKjkMbv3Zk1+/7teDhy7HSINWNp/zSQl0Uuugs8e1fNnUbseMGebR6cNpClqcugf5yZb+omumaC7J/wmFcG3ebH569FvWcua9IbkHyhq3PJPWRGID3dnZywysnbRcGvtovf2BTZRkARgNI8piyx7pYxrrP47rErtv8YvhQITHs5Ou2XysS0oU9Mm6ZmLCzHs3HFfREiALS1d9DLm6cKX9o4dQjAVwHUx0eqaib6SxAbAx8d6Xc+f+ifhgPZ3DjX8fN9u1ZCQ9u2bAm1VwWPra8IPySI9wGoQ8w6lpRSJ8HMGoAZMOZ21wXsAAIPAsCiYiQG5jw///jGka9vcf/r+orwDBHvoZhlSuNniyIpGwWY4QbwMRGO9ntsZt0DArAo10r222f2baLPN8+WP9E4t7lAlR1Soh5AeTwBmILgJYE7EV1cGfVbT58bKxx7v9+JoTnrgjnZHxJE3kDSBeGz+zcpTzTOOXasDDirHNFyMBVMhCx693hB4OKkw3Njxu73a0rk+KkuflBWWBKQTBklLmDiM19OPCiBM63/HwAQrmGURDhdsAAAAABJRU5ErkJggg=='
ICON_BASE64_PALM = b'iVBORw0KGgoAAAANSUhEUgAAAEkAAAA8CAMAAAAdQmecAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAB8SDx4UEiAUDyAUEiMZFSUbGSsUEy8aFiwbGTsUFTkdICwiHTIjHDQrHzsiGysjIjIlIDMqIzMsKjsgIzotID0uKT01IzszMUkYHE0ZIFkbKEQhHkUqH0sgHUUgI0MtIkUoKEsmIEwqIkwqL00rM0I1I0s1JEswKE04J0w7LUc9OVYpJ1omMVM0JVQ1K1I4JVU7KlszK1k6J1s7KVw4NGEdLmQeMWghNmE5LWQ4NXIiPWs2RHkkQnAzRVRENVNDOF1ENFxEOVpKOWNDM2NHPWNMPGxFOWxKPG9QPnJKPHVQP05HRFJMSltUUWpLQ2lUQ2NcWndNQndIU3JUQ3JUSHRZTHxSRHxVSHxZSnlaVH1YYmZgX39gVmZjYnZran14doFURoNWSYNbTYNeUoleUItbaYRgT4VhU4JiWIVoXIpjVIxlWo1oVo1pWpFiVpFlWZJsXZRxX4JmZYVsY4trY4pzaoN9e5NtYpRtaJltY5ZxYpRyaZpzZZx1ap14a5N4eJx1cJp3eJ15cZp6eqB2a6J6baN8cqJ7eax9cah+epx7hImBf5uBeqWAdKOCe6qCdKqDequJfbKJfY2EgpmIiZqVk52Zk6SBhKaFiKyDgqqFiayJgqyNi6aLkayNlKGQi6uRja+QlqySm6qZlLKMhLKOi7SRi76Th7qTi7KTk7KVm7KYk7SZm7iWk7yZk7ucm7Sco7ScqbqeorOfsK2knrmhnKukoqyop7GrqrqhpLqlq7mup7urqrSosbKuubqjsrymubyps7qqub6xrbSxsLizvbe1wr68ycKYi8OcmsCmo8KmqcGup8Ooq8qqqcersMGvv8yutMKxu8uwtM2zusy+v9G3usCwwsS0yca8xsW7y82/x8m9ysm90Ne8wMjAvMPCxsLAyc3Ax8vAy8/IzMbD0c3F08zK2NPLx9DJztnBydLO09LL2tPS19TS29rU29bU4dnT5NzV6NvZ4+Hf5uDd6+Pi7eXj8ejl9Ozp9/Lw+wAAAAAAAAAAAAAAAErQjXwAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAHU0lEQVRYR5WWf1gbZx3A8bw2y7nJVq00ZM9Eq63t0o3QFNKkrLbjoRjXsWFHCI+T0gNNe2nWm4Ndm9xFTLmj1UFONsUU1s2aZRRxdP7otNZN1Omc1inTdbad06danzlkVoR2/hG/7w8gNG/Y9iE/uPf9vp/7vt/37r0UZPLx34nxiYmJNybp4VuSxzQ9MXn5zempqelLlybfpotteu31ifFzfzp7/sL45PT09MS/aPOCME1jZ8+fGxs9Njw0fGLswuT01D/+SjsWgmU6fnJs7IUTx7410N8/MDx64eKlqV++DRXD9M2BkZOnfjicTvV0d/f0Hx09f/HNf//iL7QzP7mmn0XN9BMjR9PpfhOpkkdHz0z97+9PT9DuvOSa7gvHus2vYEzT6E4MDP10/PKlM0/T7rzkmoLBeyORWMwwzf6UaZowvydPX7z8nzPP0v585JhO7pIkWZbvVXUzlUomzYNmcui7L49fvPDs6zQiDzmmr9UHg7vDu8MRVTcOHESq5KEjz7z8yitnfkwj8pBr2njHNjEo7ZbliGFAQsk+eB155vTpc6f/RkPY5JiOr7i1uh5UYUVROw4ehEolk1193zj2k9+NLpxUbsWXrt5YfdfnpDAUS9UgLaCrq2/g6JETT9IINrmmJStWb9wUCKK6K0h1wDCMDs1IHjr8Tk23F63aeOsdooSXUNU6O7QOTdM7937x0NAbNIRJrumrS4tWb64OiFKrJEshWdnXqWr7QqGO/fuHztIQJrmmzKKiFauc9aLYIkp7xHvkfXtCLSG5Y+TU1w8foRFMGKat7y1asbLaH/CLkNeO5h2trZJk/Oq3I/uHh/9IQ1gwTD+4qnBpkbPK5xf9zTua/c1+fyT1WLLnvi+8MPwoDWHBMEWDjuuFpc5P+Hz3iM3Ndb5mPZVOKfU93xnqj/2GxjDINb3q8PicJYUly2vkutZWURR1PdErtwz8+vloQPk+DWLAyMnjWb58ZUnhrsf3SJ9s8fl1TVWlwODzI/HaxrYFpscw1fscxY7Slc7Yc5LkatDhTpZE3YzH133+1EsP0RgGDNOPqm74cJWrtHRbond9Q0LVdSmsmWa4rf3Ffw4/QmMYMEyZ9rIy502u0hpDlRK6HtNN40BCjI68+IeBtndWp0xmU5VrpWttFdqiensff27QjIuxwf6+/Y13v0YjGDBNr25yrV3rqoL7t7fX1A/0Girs6Eqw7fcPfJlGMGCaMt+rdt7k3Natqwkjpmnm4BNpQ27o+fNLD7yL4xYt+/RxGjYPtimTKSxxqYluEOm63psaTBtB89tDfe2LeY7neW7xnT+ncXPkMT109aoaJaYaugY7CmxSj6UHU12haNPV4EFw3I00cpY8psWLVlcHIxFdVTUtFod9Lm0aO+/adSMVAZy1icZSmKb738fzSzY1yJCRYcBGF48qWpdW11j/AapBQMW203gMw7SVRG4ORBKaqsXjWjSqaRGldkvV5utIF8JqFazWB+kQRI5pK4eLyvPVElQbyqRF92rxDll0rK+pXQRd8LK+/6MbNtzidrvXHKOjgCtMTVTD8++uDet6J1RJaVOie5XglrK6xlrUYf3QOo8HLG6v1+uuOEwHXmHajs45w05Fhx3c0JRQOBRUAi7P+pprIJuPrHHY7cXwZ3eAraJ8Nqss01NLqANzTbumxLSIrijhnTvDQWepq+x6oVAQBAuCh7dgs9sryj10dJbpttmJYT7eDlWOaJEwiO5uuRlJLNDMcSgK3lBOjkeyE3Q8NW1fNk8D1WiD9YJnZ1gOB1sCH0MK2oO/LYIF0gO3RWgkBmJ6cG51yRk5vkbR1IgcDisxWWwoIX0ILBAEm2AjCPx7sIeYbpvLx3odmgLPCaFIREY/WGDnrYOM5sAqUNgJNkEgImRaTGN44YPF0AFYhJsDIXicS/I+EC2n3QBHc7LZYO0q0KXgtttmTdfijDhLMQAiGxxYINK3Ax6ccqcq3jCzVrBaWAKdOKNyckk56N5esJ3UBqLQrAGYHg531CGV5ENtuAEDuSDWVKCMvN5Kb6X7s9R0O8poZvZ4FB0n2MrqGhr8vjLSij5JnYnMDSpIqbLS66amZbOiOSB9PNzmqdtSVVhL2rAcXtCHTeVIVQl4yfQKrs0WoWuNDKLp2dZ5eCvVzkGSmlWRpMCEhtORxIqj8TEBH88ja4IoKfxrqAC2wbmxUG0O7id6NAM+no+9GMuo6hZs+gxZKQQaRTPMFjFMUCuaFlo/Mr2CJkgJReNPfIFfmRM+ZIBVFfhS+BLOCZWb3C7kPofLEkM0CNqQy4zKuwGZ7iTRWIURIPW3mt0MMyo0vYL7s64luCt4Hu6ZeR4EHcgAuaBYcJ0XZPATAC0ampyAJ0fHz0IGZTPXiFTgQiYyJwAnh+pNd4QsZrcjgDYB5Bir7BvAhB5vKCvUZ+F4vMQ4cB54EP0/C2ik9/TDBZmnyG6BGqHuWJR9XvqdD2yCXcq+Dna6JtpIYJ15QWB+5W6v+1P/B0gPXHqaGwimAAAAAElFTkSuQmCC'
ICON_BUY_ME_A_COFFEE = b'iVBORw0KGgoAAAANSUhEUgAAAIIAAAAeCAIAAABvxVGSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAGVaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pg0KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPg0KICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPg0KICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4NCiAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+DQogICAgPC9yZGY6RGVzY3JpcHRpb24+DQogIDwvcmRmOlJERj4NCjwveDp4bXBtZXRhPg0KPD94cGFja2V0IGVuZD0iciI/PkPeCmYAAAvnSURBVGhD7ZkLVFVVGsf/9325XN7vhzwEARVQFLTEBE1QySeplZNl2gyKzlJrmlottXRmZTPN1HIm1/SY8jFlZWVODpVZ0zg5PjIyBJQURRHkqYD3ci/3Pd93OOBF4BKOrZgWv3UW7rPP3vvs8733VeLYmIFBfmyk4r+D/KgMqmFAMKiGAUHfucHhwJbC+npLDwpTOGzLk31CtErxfpCbpW81FDW0bZPdvnx5nnjfgcPhOH2qtPSVdevTg8WuQW4WV0FJb7ZV6swvHrs8ceKEa93Q6XQhoWFH9O5nmky1eos4Z5CbwpU37C6pf98aFxweYTKbxa5uyOVypUxy/tBHe+cMEbt6RK6E1QyHHbBDIhc7fwJIpbDTR3UgkXAQ7z+uvMFkcxjMNp3eZjbLhUvW9eJOgwGtRrvF4rSV7ngHYdUuTLgb03+JeU9jdDbv/ieApzfy30D4cBI/BWmkzsGSP3Oz/7jyhjarfWXBmafyFJrUKtIxmTL9Jd2TyiVSSIW/kjI88aL0ifGpMT5u4rTuRIzEkq2wtOFqNaQy+A3Bsd048JKw+/9fJIhNw72bsXM1KkvZy3PXI2QEtt4NqMQh3xtXVqmWS73VCrtO7e+NAB8E+iHIHyGBCA5AkB8CfEH9PqQYqyrMw+WL3X1Yh9vy8fJSvPQgTn2GkVOhEEITqVSEGv3VSvsUFyuQj9rgsIp3N8BGdMN4Z+iRTbicaDfA9hdR28OLDVNfx65APV5BaNPD7jTFQW2nt9OthLbUQ9TqIziMCNCUV4jtHnDA1AKrVamQu1zH3R8mA67W8F5p3yY9jM2w2aHxwugsURZRiYgfxw3/IRg6hhudkAM5Q24Ynw6FCtFJmLkWyZm8DzctpjyIaXm8ZuewzKVYsQPTVgkf3xUPH6TnIi0HGk8o1WKnM8mTkfc65q3nldtRa5B2F6Yswsw1CI3mHg8/2KwwGblNYVbjg2u1kHZEBe9ALHoWedsQncwfTtNz1yFvO0bP6K4JV+IjiYV5qYsr7MZWidHkdJk7Gq2SS3WSAI3WbneZl7Q+vFe1AuHxmLEaKXNx8gBoythZyFrNgqBdzPgV0h+C4xpy1iJ7FRxtwkwHC3HJixQ7hVsBnyAs2IgZ+Vj0PIalY/Y6pM7C/I0Yfy9Gz8bcx8XBY2dj4mKyEYxbCP9wYWYHJKBlr2BSHqauwdo9WPy84DdOULif9ST0DUjKxqgc7vELY4FOXY30h7lnwWZIbfAMh8UIk1C/SK3QeENXJYqUFE9bCo5n3UxZAZsBOY8gbiJkCkxd0d0LXRUtjUbL7wt1wbHDz/0pDtKeBG2HRYezloZPyptmxfmKnd0hC/X0Q/47bMLs0YBvGGRyhI3EtQb2DHdv7vn6PWhDEZKAb/eyTZEVKFUYNQ1VJdxun0iQxbUZMWo2qk/hzUcx+3FMXcmr7V7PSWhsLtRuMLWx0Z0/igN/wfKd4kQRB6Y8DJU7dq6C1h8LfoumGrZOZ8mMyYH+Kv71GobeDn0jf+eMNRyOCp5FzmPY9xvMfgr+kdB6w2yEuRlSDRRa9iqDXlwhZBiC47BnI8LiEJkKD28Mm4DDb/Cyd+YLL+siT1dq8FLJQ6Jjtr+7l6pSsasnNmzYGNuyX7zpEXcvNFfjyNuov8ACihyOrDWoLkJwLCpPwGbDkCSOPJfLWBkqN9ScE+WenAWVFpfPcJukwPUuhWszrCZyMRx8FWYLLp/E8Mk4fxzlx9jbGAp3HvCLxDfv8wotDWiuvz6dIkncHThRgKoyJGezYVZ8zU8pV1EcM9EByIqIMbh4HFfrUPQPXPwWPiGIGoP9f+T90z5bm3k/Gj+oPdDaJMrQ3Y+X0tMjgfAkWMyoOY3MZfjuIEIToXRD+VeYkodLJymdQqJwdkFXQUkhk3gbG/V6vaR3aFjj5QvBHrRoL9AY2iJ9auFHXFHUncPXBbhSheHZcPNA7Vk+Rgy7jWXUWAXPMP7CJkp65EMapC/mRvNF/puSDb9QbhAkNaMOFSfYpig6k85KPoNDAr9wWC0wG6D1Y8/LyMf4+/DFy9yZ9XN4+fHcoBg22/Ij3I4dzxmVvIpeOm4+steKSZWm66/AqMeHL0DXhKAofsWFEjRWQncF0x7lj1Jp4BnI3iwVfsvx9OJd6Sj/EXYORwollv4VMiWO7uHSlqbc9xxC4tjJtL7Ifpg9uANXaiAZe6Otrk4QSi9YrVbdxbMeSmeXvgEbf5WhRTBwgbAEtnoSDQVKijBuGsRlsE+01iM6hQfQplQKzHqMv5MgQY+ZiemPimqgWXRVHoddeCnJlAZQ4LLpEBAPQxMccjZG2n75Uex6BMX/ROQoJE2HVcilJD7aiKER/mEcKEj9JDuZg9NAJbmFIBpzG0ctxgGVEukPsBBJahYLxyXfcMhkmL8J3iE8VyFF8p2Yu4kHt7bAy5fzH3khOc2xXdi+EoZmRKTy6fXEXmzPR10FxtzF/kE+0YErNRBpgarCwm/Em5640tAQbGuUCW7RMxIzF6y+UQgdhogRmLyYjeJaPY6+yYpx92U/JbeguDdpGUcJ6py7DiveRGw6vnyNxZSRhxlrUfwpzhbygm6BbGi151k0NNhrCNp0aKlnKZA90unEIwCTHuKnVBlXFMMviPMHhZdWIXBfqeY1c57A/Vt4PF3eobhjCRRuOPWlELLVqCpCfCbiU7heenALByLKAVR3hURjaBqkchx9G++u4/IvYQpvdfaTrDlS/MwnkbcDidns5TYLx2H60rRZ3EN89T4aKhE7Dun34+hb/KoOZE9PjhKbPUGR8ojRKyNzsqPTlrtSWlraeGhP+hDPXvVARpQ2n212/AIkzYBPOIr24cPfcVxKykLyNATF4vOtbBAxt+PwLpwsgE8EGs7j4xcwJAWhCWz7X72NT18Sg7tvAFJzceLvqBeClaUVdWWoLoNMw48SMvhpSx2XxQmZnHWyVuLqZex7VgzFrVfZlsNHoroUH2zi6mXCz3gP721AU60wAqivQMIkjJ6D8EQU78eHf0DDOYydwx8SEI0jb+CLbayDtFz+kYaM7NAOVBRyiKPPpN1uW45LpUidh4gUjJ2H0Tm824AYxNyGEZMxcRGKCjhSOdHHL6wtZts9nxvvzL3HYrGYzRaTyWQ0mpRKhVqtor8KpbKspOQ+aVH2UB9xQo9oPdgx1e5cXBvb+MTQjm8QYsaj/gwunuZHKhWMBtaHrY2Vd9fjHIuIj5/jdMIxUkCuQHQiKsvEgl3sF6zEzZ1F03aNC2LyiQn3cmK8UIiiTziZX8cOuUrI81J4+iIyibVICdkZuQwaFQwmLnn5FQ6oldAGceSkT6CJFJqWv479WxA1GkHxOPkRJjyAHcvwwMs4sguH3sKo6YifCGMLij/GhVLEjEXKLH7pd/9G2X+cXYHoQw3kA9/U6DcdrHzq13ZZUDPJSiolx5CQJO312PeuxM0atSI1WKvsesL6X5EgYTzmP4PCDzBmDvZuQCllVOeNC3LpGerv9MzOMZ09PeJitd4JjMYvXsU76/iUvnAzqyFmArbew+cYUuHudRQHhGXp6oz8N9xep4/cQAE2JUTrqZQk+itHJdiS4mwjY+2Jw2yj4m0pITa1zDZ1qNet1gFhRWYeas+guIBFpOuoAq/jQmrOEqd2++UaF6v1DtUFdjsnACpM6Q10dOCUK+MDHbmaKFh+IDTaueH2On2ogSBNaJQyQ2O3E38rSmqkw3x7/0XvpvENgX8EB9CosWgzcFy+OUn9oBgbWAEBURgxCWYTqo/DzRP+ARiaipZaofDtB99DDUCkl/pCZVebcsCug9SuVlO5dstRebDyfUKRupCPUQZKGAMP2tXFQv5lgiqCU5/jLBW7EizdwdV5yQHhdNYP+qiU2rl0zVR8udXhq79Ui0s1wlWNim9x+DvPhYlBXfVzKzA2c4lCZ2M6bXzwTEcqHmhIcL4QEhvXSAd3wqDDpRNcyx3+G8qFwro/9P1/0USt3rz3dKPkhhRgR4K/JiPKW7y9tUgl/AOc/mrXCmcA0m6E7TGz0yD7HUK/lxoG+aH5ASL7IP1nUA0DgkE1DACA/wLdLG/w2vOeEgAAAABJRU5ErkJggg=='
ICON_BASE64_LIST = [ICON_BASE64_BLOB_HEADACHE, ICON_BASE64_BLOB_PALM, ICON_BASE64_BLOB_PAT, ICON_BASE64_BLOB_THINK, ICON_BASE64_BLOB_THINK2, ICON_BASE64_BROW, ICON_BASE64_LEGO_THINK, ICON_BASE64_PALM, ICON_BASE64_THINK]
def main_get_debug_data(suppress_popup=...):
    """
    Collect up and display the data needed to file GitHub issues.
    This function will place the information on the clipboard.
    You MUST paste the information from the clipboard prior to existing your application.
    :param suppress_popup: If True no popup window will be shown. The string will be only returned, not displayed
    :type suppress_popup: (bool)
    :returns: String containing the information to place into the GitHub Issue
    :rtype: (str)
    """
    ...

def main_sdk_help():
    """
    Display a window that will display the docstrings for each PySimpleGUI Element and the Window object

    """
    ...

def main():
    """
    The PySimpleGUI "Test Harness".  This is meant to be a super-quick test of the Elements.
    """
    ...

change_look_and_feel = ChangeLookAndFeel
convert_args_to_single_string = ConvertArgsToSingleString
easy_print = EasyPrint
easy_print_close = EasyPrintClose
fill_form_with_values = FillFormWithValues
get_complimentary_hex = GetComplimentaryHex
list_of_look_and_feel_values = ListOfLookAndFeelValues
obj_to_string = ObjToString
obj_to_string_single_obj = ObjToStringSingleObj
one_line_progress_meter = OneLineProgressMeter
one_line_progress_meter_cancel = OneLineProgressMeterCancel
popup = Popup
popup_animated = PopupAnimated
popup_annoying = PopupAnnoying
popup_auto_close = PopupAutoClose
popup_cancel = PopupCancel
popup_error = PopupError
popup_get_file = PopupGetFile
popup_get_folder = PopupGetFolder
popup_get_text = PopupGetText
popup_no_border = PopupNoBorder
popup_no_buttons = PopupNoButtons
popup_no_frame = PopupNoFrame
popup_no_titlebar = PopupNoTitlebar
popup_no_wait = PopupNoWait
popup_non_blocking = PopupNonBlocking
popup_ok = PopupOK
popup_ok_cancel = PopupOKCancel
popup_quick = PopupQuick
popup_quick_message = PopupQuickMessage
popup_scrolled = PopupScrolled
popup_timed = PopupTimed
popup_yes_no = PopupYesNo
sgprint = Print
sgprint_close = PrintClose
rgb = RGB
set_global_icon = SetGlobalIcon
set_options = SetOptions
test = main
tclversion_detailed = tkinter.Tcl().eval('info patchlevel')
if tclversion_detailed.startswith('8.5'):
    ...
if __name__ == '__main__':
    ...
